{"version":3,"sources":["../src/models/chat-models/base-chat-model.groq.ts","../src/configs/chat-model/common.config.chat-model.groq.ts","../src/configs/chat-model/base.config.chat-model.groq.ts","../src/configs/configs.groq.ts","../src/models/chat-models/gemma-7b-it.groq.ts","../src/models/chat-models/gemma2-9b-it.groq.ts","../src/models/chat-models/llama-3-1-70b.groq.ts","../src/models/chat-models/llama-3-1-8b.groq.ts","../src/models/chat-models/llama-3-2-11b-vision.groq.ts","../src/models/chat-models/llama-3-2-1b.groq.ts","../src/models/chat-models/llama-3-2-3b.groq.ts","../src/models/chat-models/llama-3-2-90b-vision.groq.ts","../src/models/chat-models/llama-3-70b-tool-use.groq.ts","../src/models/chat-models/llama-3-70b.groq.ts","../src/models/chat-models/llama-3-8b-tool-use.groq.ts","../src/models/chat-models/llama-3-8b.groq.ts","../src/models/chat-models/llama-guard-3-8b.groq.ts","../src/models/chat-models/mixtral-8x7b.groq.ts","../src/provider/provider.groq.ts"],"names":["BaseChatModelOptions","z","BaseChatModelGroq","BaseChatModel","modelSchema","options","parsedOptions","baseUrl","Groq","messages","transformedMessages","message","content","temperature","RangeConfigItem","CHAT_CONFIG","maxTokens","maxOutputTokens","stop","MultiStringConfigItem","topP","frequencyPenalty","presencePenalty","seed","responseFormat","SelectStringConfigItem","toolChoice","ChatModelBaseConfigSchema","value","ChatModelBaseConfigDef","GroqChatModelConfigs","Gemma_7b_ITLiteral","Gemma_7b_ITDescription","Gemma_7b_ITSchema","ChatModelSchema","OpenAIChatModelRoles","OpenAIChatModelTextToolModalitiesEnum","OpenAIChatModelRolesMap","OpenAIChatModelTextToolModalities","Gemma_7b_ITOptions","Gemma_7b_IT","Gemma2_9b_ITLiteral","Gemma2_9b_ITDescription","Gemma2_9b_ITSchema","Gemma2_9b_ITOptions","Gemma2_9b_IT","Llama_3_1_70bLiteral","Llama_3_1_70bDescription","Llama_3_1_70bSchema","Llama_3_1_70b_Options","Llama_3_1_70b","Llama_3_1_8bLiteral","Llama_3_1_8bDescription","Llama_3_1_8bSchema","Llama_3_1_8b_Options","Llama_3_1_8b","Llama_3_2_11b_VisionLiteral","Llama_3_2_11b_VisionDescription","Llama_3_2_11b_VisionSchema","OpenAIChatModelModalitiesEnum","OpenAIChatModelModalities","Llama_3_2_11b_VisionOptions","Llama_3_2_11b_Vision","Llama_3_2_1bLiteral","Llama_3_2_1bDescription","Llama_3_2_1bSchema","Llama_3_2_1b_Options","Llama_3_2_1b","Llama_3_2_3bLiteral","Llama_3_2_3bDescription","Llama_3_2_3bSchema","Llama_3_2_3b_Options","Llama_3_2_3b","Llama_3_2_90b_VisionLiteral","Llama_3_2_90b_VisionDescription","Llama_3_2_90b_VisionSchema","Llama_3_2_90b_VisionOptions","Llama_3_2_90b_Vision","Llama_3_70b_Tool_UseLiteral","Llama_3_70b_Tool_UseDescription","Llama_3_70b_Tool_UseSchema","Llama_3_70b_Tool_Use_Options","Llama_3_70b_Tool_Use","Llama_3_70bLiteral","Llama_3_70bDescription","Llama_3_70bSchema","Llama_3_70bOptions","Llama_3_70b","Llama_3_8b_Tool_UseLiteral","Llama_3_8b_Tool_UseDescription","Llama_3_8b_Tool_UseSchema","Llama_3_8b_Tool_Use_Options","Llama_3_8b_Tool_Use","Llama_3_8bLiteral","Llama_3_8bDescription","Llama_3_8bSchema","Llama_3_8bOptions","Llama_3_8b","LlamaGuard_3_8bLiteral","LlamaGuard_3_8bDescription","LlamaGuard_3_8bSchema","LlamaGuard_3_8bOptions","LlamaGuard_3_8b","Mixtral_8x7bLiteral","Mixtral_8x7bDescription","Mixtral_8x7bSchema","Mixtral_8x7bOptions","Mixtral_8x7b","ProviderLiteral","acc","key","modelName","ProviderError","model"],"mappings":"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","file":"index.mjs","sourcesContent":["import { z } from \"zod\";\n\nimport { BaseChatModel, OpenAIChatRequestMessageType } from \"@adaline/openai\";\nimport { ChatModelSchemaType, ParamsType } from \"@adaline/provider\";\nimport { MessageType } from \"@adaline/types\";\n\nimport { Groq } from \"../../provider\";\n\nconst BaseChatModelOptions = z.object({\n  modelName: z.string().min(1),\n  apiKey: z.string().min(1),\n});\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nclass BaseChatModelGroq extends BaseChatModel {\n  readonly version = \"v1\" as const;\n  modelSchema: ChatModelSchemaType;\n  readonly modelName: string;\n\n  private readonly groqApiKey: string;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    const baseUrl = Groq.baseUrl;\n    super(modelSchema, {\n      modelName: parsedOptions.modelName,\n      apiKey: parsedOptions.apiKey,\n      baseUrl: baseUrl,\n      completeChatUrl: `${baseUrl}/chat/completions`,\n      streamChatUrl: `${baseUrl}/chat/completions`,\n    });\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.groqApiKey = parsedOptions.apiKey;\n  }\n\n  transformMessages(messages: MessageType[]): ParamsType {\n    const transformedMessages = super.transformMessages(messages) as { messages: OpenAIChatRequestMessageType[] };\n\n    // Groq expects the content to be a string for system and assistant messages\n    // OpenAI transformer takes care of validating role and modality\n    transformedMessages.messages.forEach((message) => {\n      if (message.role === \"system\") {\n        if (typeof message.content !== \"string\") {\n          message.content = message.content.map((content) => content.text).join(\"\\n\");\n        }\n      } else if (message.role === \"assistant\") {\n        if (message.content && typeof message.content !== \"string\") {\n          message.content = message.content.map((content) => content.text).join(\"\\n\");\n        }\n      }\n    });\n\n    return transformedMessages;\n  }\n\n  // TODO: streamChat needs it's own implementation, OpenAI stream transformer is skipping some chunks\n}\n\nexport { BaseChatModelGroq, BaseChatModelOptions, type BaseChatModelOptionsType };\n","import { CHAT_CONFIG, MultiStringConfigItem, RangeConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\n\nconst temperature = RangeConfigItem({\n  param: \"temperature\",\n  title: CHAT_CONFIG.TEMPERATURE.title,\n  description: CHAT_CONFIG.TEMPERATURE.description,\n  min: 0,\n  max: 2,\n  step: 0.01,\n  default: 1,\n});\n\nconst maxTokens = (maxOutputTokens: number) =>\n  RangeConfigItem({\n    param: \"max_tokens\",\n    title: CHAT_CONFIG.MAX_TOKENS.title,\n    description: CHAT_CONFIG.MAX_TOKENS.description,\n    min: 0,\n    max: maxOutputTokens,\n    step: 1,\n    default: 0,\n  });\n\nconst stop = MultiStringConfigItem({\n  param: \"stop\",\n  title: CHAT_CONFIG.STOP(4).title,\n  description: CHAT_CONFIG.STOP(4).description,\n  max: 4,\n});\n\nconst topP = RangeConfigItem({\n  param: \"top_p\",\n  title: CHAT_CONFIG.TOP_P.title,\n  description: CHAT_CONFIG.TOP_P.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst frequencyPenalty = RangeConfigItem({\n  param: \"frequency_penalty\",\n  title: CHAT_CONFIG.FREQUENCY_PENALTY.title,\n  description: CHAT_CONFIG.FREQUENCY_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst presencePenalty = RangeConfigItem({\n  param: \"presence_penalty\",\n  title: CHAT_CONFIG.PRESENCE_PENALTY.title,\n  description: CHAT_CONFIG.PRESENCE_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst seed = RangeConfigItem({\n  param: \"seed\",\n  title: CHAT_CONFIG.SEED.title,\n  description: CHAT_CONFIG.SEED.description,\n  min: 0,\n  max: 1000000,\n  step: 1,\n  default: 0,\n});\n\nconst responseFormat = SelectStringConfigItem({\n  param: \"response_format\",\n  title: CHAT_CONFIG.RESPONSE_FORMAT.title,\n  description: CHAT_CONFIG.RESPONSE_FORMAT.description,\n  default: \"text\",\n  choices: [\"text\", \"json_object\"],\n});\n\nconst toolChoice = SelectStringConfigItem({\n  param: \"tool_choice\",\n  title: \"Tool choice\",\n  description:\n    \"Controls which (if any) tool is called by the model. \\\n    'none' means the model will not call a function. \\\n    'auto' means the model can pick between generating a message or calling a tool.\",\n  default: \"auto\",\n  choices: [\"auto\", \"required\", \"none\"],\n});\n\nexport { frequencyPenalty, maxTokens, presencePenalty, seed, stop, temperature, toolChoice, topP, responseFormat };\n","import { z } from \"zod\";\n\nimport {\n  frequencyPenalty,\n  maxTokens,\n  presencePenalty,\n  responseFormat,\n  seed,\n  stop,\n  temperature,\n  toolChoice,\n  topP,\n} from \"./common.config.chat-model.groq\";\n\nconst ChatModelBaseConfigSchema = (maxOutputTokens: number) =>\n  z.object({\n    temperature: temperature.schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop.schema,\n    topP: topP.schema,\n    frequencyPenalty: frequencyPenalty.schema,\n    presencePenalty: presencePenalty.schema,\n    seed: seed.schema.transform((value) => (value === 0 ? undefined : value)),\n    responseFormat: responseFormat.schema,\n    toolChoice: toolChoice.schema,\n  });\n\nconst ChatModelBaseConfigDef = (maxOutputTokens: number) =>\n  ({\n    temperature: temperature.def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop.def,\n    topP: topP.def,\n    frequencyPenalty: frequencyPenalty.def,\n    presencePenalty: presencePenalty.def,\n    seed: seed.def,\n    responseFormat: responseFormat.def,\n    toolChoice: toolChoice.def,\n  }) as const;\n\nexport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema };\n","import { ChatModelBaseConfigDef, ChatModelBaseConfigSchema } from \"./chat-model\";\n\nconst GroqChatModelConfigs = {\n  base: (maxOutputTokens: number) => ({\n    def: ChatModelBaseConfigDef(maxOutputTokens),\n    schema: ChatModelBaseConfigSchema(maxOutputTokens),\n  }),\n} as const;\n\nexport { GroqChatModelConfigs };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Gemma_7b_ITLiteral = \"gemma-7b-it\" as const;\n// https://huggingface.co/google/gemma-1.1-7b-it\nconst Gemma_7b_ITDescription =\n  \"Gemma is a family of lightweight, state-of-the-art open models from Google, \\\n  built from the same research and technology used to create the Gemini models.\";\n\nconst Gemma_7b_ITSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Gemma_7b_ITLiteral,\n  description: Gemma_7b_ITDescription,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst Gemma_7b_ITOptions = BaseChatModelOptions;\ntype Gemma_7b_ITOptionsType = z.infer<typeof Gemma_7b_ITOptions>;\n\nclass Gemma_7b_IT extends BaseChatModelGroq {\n  constructor(options: Gemma_7b_ITOptionsType) {\n    super(Gemma_7b_ITSchema, options);\n  }\n}\n\nexport { Gemma_7b_IT, Gemma_7b_ITOptions, Gemma_7b_ITSchema, Gemma_7b_ITLiteral, type Gemma_7b_ITOptionsType };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Gemma2_9b_ITLiteral = \"gemma2-9b-it\" as const;\n// https://huggingface.co/google/gemma-2-9b-it\nconst Gemma2_9b_ITDescription =\n  \"Gemma is a family of lightweight, state-of-the-art open models from Google, \\\n  built from the same research and technology used to create the Gemini models.\";\n\nconst Gemma2_9b_ITSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Gemma2_9b_ITLiteral,\n  description: Gemma2_9b_ITDescription,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst Gemma2_9b_ITOptions = BaseChatModelOptions;\ntype Gemma2_9b_ITOptionsType = z.infer<typeof Gemma2_9b_ITOptions>;\n\nclass Gemma2_9b_IT extends BaseChatModelGroq {\n  constructor(options: Gemma2_9b_ITOptionsType) {\n    super(Gemma2_9b_ITSchema, options);\n  }\n}\n\nexport { Gemma2_9b_IT, Gemma2_9b_ITOptions, Gemma2_9b_ITSchema, Gemma2_9b_ITLiteral, type Gemma2_9b_ITOptionsType };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_1_70bLiteral = \"llama-3.1-70b-versatile\" as const;\n// https://github.com/meta-llama/llama-models/blob/main/models/llama3_1/MODEL_CARD.md\nconst Llama_3_1_70bDescription =\n  \"The Llama 3.1 instruction tuned text only models (8B, 70B, 405B) are optimized for multilingual dialogue use cases and \\\n  outperform many of the available open source and closed chat models on common industry benchmarks.\";\n\nconst Llama_3_1_70bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_1_70bLiteral,\n  description: Llama_3_1_70bDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 8192,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(8192).def,\n    schema: GroqChatModelConfigs.base(8192).schema,\n  },\n});\n\nconst Llama_3_1_70b_Options = BaseChatModelOptions;\ntype Llama_3_1_70b_OptionsType = z.infer<typeof Llama_3_1_70b_Options>;\n\nclass Llama_3_1_70b extends BaseChatModelGroq {\n  constructor(options: Llama_3_1_70b_OptionsType) {\n    super(Llama_3_1_70bSchema, options);\n  }\n}\n\nexport { Llama_3_1_70b, Llama_3_1_70b_Options, Llama_3_1_70bSchema, Llama_3_1_70bLiteral, type Llama_3_1_70b_OptionsType };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_1_8bLiteral = \"llama-3.1-8b-instant\" as const;\n// https://github.com/meta-llama/llama-models/blob/main/models/llama3_1/MODEL_CARD.md\nconst Llama_3_1_8bDescription =\n  \"The Llama 3.1 instruction tuned text only models (8B, 70B, 405B) are optimized for multilingual dialogue use cases and \\\n  outperform many of the available open source and closed chat models on common industry benchmarks.\";\n\nconst Llama_3_1_8bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_1_8bLiteral,\n  description: Llama_3_1_8bDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 8192,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(8192).def,\n    schema: GroqChatModelConfigs.base(8192).schema,\n  },\n});\n\nconst Llama_3_1_8b_Options = BaseChatModelOptions;\ntype Llama_3_1_8b_OptionsType = z.infer<typeof Llama_3_1_8b_Options>;\n\nclass Llama_3_1_8b extends BaseChatModelGroq {\n  constructor(options: Llama_3_1_8b_OptionsType) {\n    super(Llama_3_1_8bSchema, options);\n  }\n}\n\nexport { Llama_3_1_8b, Llama_3_1_8b_Options, Llama_3_1_8bSchema, Llama_3_1_8bLiteral, type Llama_3_1_8b_OptionsType };\n","import { z } from \"zod\";\n\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_2_11b_VisionLiteral = \"llama-3.2-11b-vision-preview\" as const;\n// https://huggingface.co/meta-llama/Llama-3.2-11B-Vision\nconst Llama_3_2_11b_VisionDescription =\n  \"The Llama 3.2-Vision instruction-tuned models are optimized for visual recognition, image reasoning, captioning, \\\n  and answering general questions about an image. \\\n  The models outperform many of the available open source and closed multimodal models on common industry benchmarks.\";\n\nconst Llama_3_2_11b_VisionSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: Llama_3_2_11b_VisionLiteral,\n  description: Llama_3_2_11b_VisionDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 8192,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: GroqChatModelConfigs.base(8192).def,\n    schema: GroqChatModelConfigs.base(8192).schema,\n  },\n});\n\nconst Llama_3_2_11b_VisionOptions = BaseChatModelOptions;\ntype Llama_3_2_11b_VisionOptionsType = z.infer<typeof Llama_3_2_11b_VisionOptions>;\n\nclass Llama_3_2_11b_Vision extends BaseChatModelGroq {\n  constructor(options: Llama_3_2_11b_VisionOptionsType) {\n    super(Llama_3_2_11b_VisionSchema, options);\n  }\n}\n\nexport {\n  Llama_3_2_11b_Vision,\n  Llama_3_2_11b_VisionOptions,\n  Llama_3_2_11b_VisionSchema,\n  Llama_3_2_11b_VisionLiteral,\n  type Llama_3_2_11b_VisionOptionsType,\n};\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_2_1bLiteral = \"llama-3.2-1b-preview\" as const;\n// https://huggingface.co/meta-llama/Llama-3.2-1B\nconst Llama_3_2_1bDescription =\n  \"The Llama 3.2 instruction-tuned text only models are optimized for multilingual dialogue use cases, including agentic retrieval and \\\n  summarization tasks. They outperform many of the available open source and closed chat models on common industry benchmarks.\";\n\nconst Llama_3_2_1bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_2_1bLiteral,\n  description: Llama_3_2_1bDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 8192,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(8192).def,\n    schema: GroqChatModelConfigs.base(8192).schema,\n  },\n});\n\nconst Llama_3_2_1b_Options = BaseChatModelOptions;\ntype Llama_3_2_1b_OptionsType = z.infer<typeof Llama_3_2_1b_Options>;\n\nclass Llama_3_2_1b extends BaseChatModelGroq {\n  constructor(options: Llama_3_2_1b_OptionsType) {\n    super(Llama_3_2_1bSchema, options);\n  }\n}\n\nexport { Llama_3_2_1b, Llama_3_2_1b_Options, Llama_3_2_1bSchema, Llama_3_2_1bLiteral, type Llama_3_2_1b_OptionsType };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_2_3bLiteral = \"llama-3.2-3b-preview\" as const;\n// https://huggingface.co/meta-llama/Llama-3.2-3B\nconst Llama_3_2_3bDescription =\n  \"The Llama 3.2 instruction-tuned text only models are optimized for multilingual dialogue use cases, including agentic retrieval and \\\n  summarization tasks. They outperform many of the available open source and closed chat models on common industry benchmarks.\";\n\nconst Llama_3_2_3bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_2_3bLiteral,\n  description: Llama_3_2_3bDescription,\n  maxInputTokens: 128000,\n  maxOutputTokens: 8192,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(8192).def,\n    schema: GroqChatModelConfigs.base(8192).schema,\n  },\n});\n\nconst Llama_3_2_3b_Options = BaseChatModelOptions;\ntype Llama_3_2_3b_OptionsType = z.infer<typeof Llama_3_2_3b_Options>;\n\nclass Llama_3_2_3b extends BaseChatModelGroq {\n  constructor(options: Llama_3_2_3b_OptionsType) {\n    super(Llama_3_2_3bSchema, options);\n  }\n}\n\nexport { Llama_3_2_3b, Llama_3_2_3b_Options, Llama_3_2_3bSchema, Llama_3_2_3bLiteral, type Llama_3_2_3b_OptionsType };\n","import { z } from \"zod\";\n\nimport { OpenAIChatModelModalities, OpenAIChatModelModalitiesEnum, OpenAIChatModelRoles, OpenAIChatModelRolesMap } from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_2_90b_VisionLiteral = \"llama-3.2-90b-vision-preview\" as const;\n// https://huggingface.co/meta-llama/Llama-3.2-90B-Vision\nconst Llama_3_2_90b_VisionDescription =\n  \"The Llama 3.2-90B Vision instruction-tuned models are optimized for advanced visual recognition, \\\n  complex image reasoning, detailed captioning, and answering intricate questions about images. \\\n  These models achieve state-of-the-art results on multiple industry benchmarks for multimodal tasks.\";\n\nconst Llama_3_2_90b_VisionSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelModalitiesEnum).parse({\n  name: Llama_3_2_90b_VisionLiteral,\n  description: Llama_3_2_90b_VisionDescription,\n  maxInputTokens: 131072,\n  maxOutputTokens: 8192,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelModalities,\n  config: {\n    def: GroqChatModelConfigs.base(8192).def,\n    schema: GroqChatModelConfigs.base(8192).schema,\n  },\n});\n\nconst Llama_3_2_90b_VisionOptions = BaseChatModelOptions;\ntype Llama_3_2_90b_VisionOptionsType = z.infer<typeof Llama_3_2_90b_VisionOptions>;\n\nclass Llama_3_2_90b_Vision extends BaseChatModelGroq {\n  constructor(options: Llama_3_2_90b_VisionOptionsType) {\n    super(Llama_3_2_90b_VisionSchema, options);\n  }\n}\n\nexport {\n  Llama_3_2_90b_Vision,\n  Llama_3_2_90b_VisionLiteral,\n  Llama_3_2_90b_VisionOptions,\n  Llama_3_2_90b_VisionSchema,\n  type Llama_3_2_90b_VisionOptionsType,\n};\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_70b_Tool_UseLiteral = \"llama3-groq-70b-8192-tool-use-preview\" as const;\n// https://huggingface.co/Groq/Llama-3-Groq-70B-Tool-Use\nconst Llama_3_70b_Tool_UseDescription =\n  \"This is the 70B parameter version of the Llama 3 Groq Tool Use model, \\\n  specifically designed for advanced tool use and function calling tasks.\";\n\nconst Llama_3_70b_Tool_UseSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_70b_Tool_UseLiteral,\n  description: Llama_3_70b_Tool_UseDescription,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst Llama_3_70b_Tool_Use_Options = BaseChatModelOptions;\ntype Llama_3_70b_Tool_Use_OptionsType = z.infer<typeof Llama_3_70b_Tool_Use_Options>;\n\nclass Llama_3_70b_Tool_Use extends BaseChatModelGroq {\n  constructor(options: Llama_3_70b_Tool_Use_OptionsType) {\n    super(Llama_3_70b_Tool_UseSchema, options);\n  }\n}\n\nexport {\n  Llama_3_70b_Tool_Use,\n  Llama_3_70b_Tool_Use_Options,\n  Llama_3_70b_Tool_UseSchema,\n  Llama_3_70b_Tool_UseLiteral,\n  type Llama_3_70b_Tool_Use_OptionsType,\n};\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_70bLiteral = \"llama3-70b-8192\" as const;\n// https://huggingface.co/meta-llama/Meta-Llama-3-70B-Instruct\nconst Llama_3_70bDescription =\n  \"The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of \\\n  the available open source chat models on common industry benchmarks.\";\n\nconst Llama_3_70bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_70bLiteral,\n  description: Llama_3_70bDescription,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst Llama_3_70bOptions = BaseChatModelOptions;\ntype Llama_3_70bOptionsType = z.infer<typeof Llama_3_70bOptions>;\n\nclass Llama_3_70b extends BaseChatModelGroq {\n  constructor(options: Llama_3_70bOptionsType) {\n    super(Llama_3_70bSchema, options);\n  }\n}\n\nexport { Llama_3_70b, Llama_3_70bOptions, Llama_3_70bSchema, Llama_3_70bLiteral, type Llama_3_70bOptionsType };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_8b_Tool_UseLiteral = \"llama3-groq-8b-8192-tool-use-preview\" as const;\n// https://huggingface.co/Groq/Llama-3-Groq-8B-Tool-Use\nconst Llama_3_8b_Tool_UseDescription =\n  \"This is the 8B parameter version of the Llama 3 Groq Tool Use model, \\\n  specifically designed for advanced tool use and function calling tasks.\";\n\nconst Llama_3_8b_Tool_UseSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_8b_Tool_UseLiteral,\n  description: Llama_3_8b_Tool_UseDescription,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst Llama_3_8b_Tool_Use_Options = BaseChatModelOptions;\ntype Llama_3_8b_Tool_Use_OptionsType = z.infer<typeof Llama_3_8b_Tool_Use_Options>;\n\nclass Llama_3_8b_Tool_Use extends BaseChatModelGroq {\n  constructor(options: Llama_3_8b_Tool_Use_OptionsType) {\n    super(Llama_3_8b_Tool_UseSchema, options);\n  }\n}\n\nexport {\n  Llama_3_8b_Tool_Use,\n  Llama_3_8b_Tool_Use_Options,\n  Llama_3_8b_Tool_UseSchema,\n  Llama_3_8b_Tool_UseLiteral,\n  type Llama_3_8b_Tool_Use_OptionsType,\n};\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Llama_3_8bLiteral = \"llama3-8b-8192\" as const;\n// https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct\nconst Llama_3_8bDescription =\n  \"The Llama 3 instruction tuned models are optimized for dialogue use cases and outperform many of \\\n  the available open source chat models on common industry benchmarks.\";\n\nconst Llama_3_8bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Llama_3_8bLiteral,\n  description: Llama_3_8bDescription,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst Llama_3_8bOptions = BaseChatModelOptions;\ntype Llama_3_8bOptionsType = z.infer<typeof Llama_3_8bOptions>;\n\nclass Llama_3_8b extends BaseChatModelGroq {\n  constructor(options: Llama_3_8bOptionsType) {\n    super(Llama_3_8bSchema, options);\n  }\n}\n\nexport { Llama_3_8b, Llama_3_8bOptions, Llama_3_8bSchema, Llama_3_8bLiteral, type Llama_3_8bOptionsType };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst LlamaGuard_3_8bLiteral = \"llama-guard-3-8b\" as const;\n// https://huggingface.co/meta-llama/Llama-Guard-3-8B\nconst LlamaGuard_3_8bDescription = \"Llama Guard 3 is a Llama-3.1-8B pretrained model, fine-tuned for content safety classification.\";\n\nconst LlamaGuard_3_8bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: LlamaGuard_3_8bLiteral,\n  description: LlamaGuard_3_8bDescription,\n  maxInputTokens: 8192,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst LlamaGuard_3_8bOptions = BaseChatModelOptions;\ntype LlamaGuard_3_8bOptionsType = z.infer<typeof LlamaGuard_3_8bOptions>;\n\nclass LlamaGuard_3_8b extends BaseChatModelGroq {\n  constructor(options: LlamaGuard_3_8bOptionsType) {\n    super(LlamaGuard_3_8bSchema, options);\n  }\n}\n\nexport { LlamaGuard_3_8b, LlamaGuard_3_8bOptions, LlamaGuard_3_8bSchema, LlamaGuard_3_8bLiteral, type LlamaGuard_3_8bOptionsType };\n","import { z } from \"zod\";\n\nimport {\n  OpenAIChatModelRoles,\n  OpenAIChatModelRolesMap,\n  OpenAIChatModelTextToolModalities,\n  OpenAIChatModelTextToolModalitiesEnum,\n} from \"@adaline/openai\";\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GroqChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelGroq, BaseChatModelOptions } from \"./base-chat-model.groq\";\n\nconst Mixtral_8x7bLiteral = \"mixtral-8x7b-32768\" as const;\n// https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1\nconst Mixtral_8x7bDescription = \"The Mixtral-8x7B Large Language Model (LLM) is a pretrained generative Sparse Mixture of Experts.\";\n\nconst Mixtral_8x7bSchema = ChatModelSchema(OpenAIChatModelRoles, OpenAIChatModelTextToolModalitiesEnum).parse({\n  name: Mixtral_8x7bLiteral,\n  description: Mixtral_8x7bDescription,\n  maxInputTokens: 32768,\n  maxOutputTokens: 4096,\n  roles: OpenAIChatModelRolesMap,\n  modalities: OpenAIChatModelTextToolModalities,\n  config: {\n    def: GroqChatModelConfigs.base(4096).def,\n    schema: GroqChatModelConfigs.base(4096).schema,\n  },\n});\n\nconst Mixtral_8x7bOptions = BaseChatModelOptions;\ntype Mixtral_8x7bOptionsType = z.infer<typeof Mixtral_8x7bOptions>;\n\nclass Mixtral_8x7b extends BaseChatModelGroq {\n  constructor(options: Mixtral_8x7bOptionsType) {\n    super(Mixtral_8x7bSchema, options);\n  }\n}\n\nexport { Mixtral_8x7b, Mixtral_8x7bOptions, Mixtral_8x7bSchema, Mixtral_8x7bLiteral, type Mixtral_8x7bOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType, ChatModelV1, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderError, ProviderV1 } from \"@adaline/provider\";\n\nimport * as Models from \"../models\";\n\nconst ProviderLiteral = \"groq\";\nclass Groq<C extends Models.BaseChatModelOptionsType, E extends Record<string, any> = Record<string, any>> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n  static readonly baseUrl = \"https://api.groq.com/openai/v1\";\n\n  private readonly chatModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): ChatModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: ChatModelSchemaType;\n    }\n  > = {\n    [Models.Gemma_7b_ITLiteral]: {\n      model: Models.Gemma_7b_IT,\n      modelOptions: Models.Gemma_7b_ITOptions,\n      modelSchema: Models.Gemma_7b_ITSchema,\n    },\n    [Models.Gemma2_9b_ITLiteral]: {\n      model: Models.Gemma2_9b_IT,\n      modelOptions: Models.Gemma2_9b_ITOptions,\n      modelSchema: Models.Gemma2_9b_ITSchema,\n    },\n    [Models.LlamaGuard_3_8bLiteral]: {\n      model: Models.LlamaGuard_3_8b,\n      modelOptions: Models.LlamaGuard_3_8bOptions,\n      modelSchema: Models.LlamaGuard_3_8bSchema,\n    },\n    [Models.Llama_3_8bLiteral]: {\n      model: Models.Llama_3_8b,\n      modelOptions: Models.Llama_3_8bOptions,\n      modelSchema: Models.Llama_3_8bSchema,\n    },\n    [Models.Llama_3_70bLiteral]: {\n      model: Models.Llama_3_70b,\n      modelOptions: Models.Llama_3_70bOptions,\n      modelSchema: Models.Llama_3_70bSchema,\n    },\n    [Models.Llama_3_1_8bLiteral]: {\n      model: Models.Llama_3_1_8b,\n      modelOptions: Models.Llama_3_1_8b_Options,\n      modelSchema: Models.Llama_3_1_8bSchema,\n    },\n    [Models.Llama_3_8b_Tool_UseLiteral]: {\n      model: Models.Llama_3_8b_Tool_Use,\n      modelOptions: Models.Llama_3_8b_Tool_Use_Options,\n      modelSchema: Models.Llama_3_8b_Tool_UseSchema,\n    },\n    [Models.Llama_3_1_70bLiteral]: {\n      model: Models.Llama_3_1_70b,\n      modelOptions: Models.Llama_3_1_70b_Options,\n      modelSchema: Models.Llama_3_1_70bSchema,\n    },\n    [Models.Llama_3_70b_Tool_UseLiteral]: {\n      model: Models.Llama_3_70b_Tool_Use,\n      modelOptions: Models.Llama_3_70b_Tool_Use_Options,\n      modelSchema: Models.Llama_3_70b_Tool_UseSchema,\n    },\n    [Models.Llama_3_2_11b_VisionLiteral]: {\n      model: Models.Llama_3_2_11b_Vision,\n      modelOptions: Models.Llama_3_2_11b_VisionOptions,\n      modelSchema: Models.Llama_3_2_11b_VisionSchema,\n    },\n    [Models.Llama_3_2_90b_VisionLiteral]: {\n      model: Models.Llama_3_2_90b_Vision,\n      modelOptions: Models.Llama_3_2_90b_VisionOptions,\n      modelSchema: Models.Llama_3_2_90b_VisionSchema,\n    },\n    [Models.Llama_3_2_3bLiteral]: {\n      model: Models.Llama_3_2_3b,\n      modelOptions: Models.Llama_3_2_3b_Options,\n      modelSchema: Models.Llama_3_2_3bSchema,\n    },\n    [Models.Llama_3_2_1bLiteral]: {\n      model: Models.Llama_3_2_1b,\n      modelOptions: Models.Llama_3_2_1b_Options,\n      modelSchema: Models.Llama_3_2_1bSchema,\n    },\n    [Models.Mixtral_8x7bLiteral]: {\n      model: Models.Mixtral_8x7b,\n      modelOptions: Models.Mixtral_8x7bOptions,\n      modelSchema: Models.Mixtral_8x7bSchema,\n    },\n  };\n\n  private readonly embeddingModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): EmbeddingModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: EmbeddingModelSchemaType;\n    }\n  > = {};\n\n  chatModelLiterals(): string[] {\n    return Object.keys(this.chatModelFactories);\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return Object.keys(this.chatModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.chatModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, ChatModelSchemaType>\n    );\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.chatModelFactories)) {\n      throw new ProviderError({\n        info: `Groq chat model: ${modelName} not found`,\n        cause: new Error(`Groq chat model: ${modelName} not found, available chat models: \n          ${this.chatModelLiterals().join(\", \")}`),\n      });\n    }\n\n    const model = this.chatModelFactories[modelName].model;\n    const parsedOptions = this.chatModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return Object.keys(this.embeddingModelFactories);\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return Object.keys(this.embeddingModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.embeddingModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, EmbeddingModelSchemaType>\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  embeddingModel(options: E): EmbeddingModelV1 {\n    throw new ProviderError({\n      info: \"Groq does not support embedding models yet\",\n      cause: new Error(\"Groq does not support embedding models yet\"),\n    });\n  }\n}\n\nexport { Groq };\n"]}