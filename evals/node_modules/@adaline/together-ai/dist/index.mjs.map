{"version":3,"sources":["../src/configs/chat-model/base.config.chat-model.together-ai.ts","../../../../packages/types/src/errors/gateway-base.error.ts","../../../../packages/types/src/message/roles.ts","../../../../packages/types/src/message/content/image-content.ts","../../../../packages/types/src/message/content/text-content.ts","../../../../packages/types/src/message/content/tool-call-content.ts","../../../../packages/types/src/message/content/tool-response-content.ts","../../../../packages/types/src/message/content/content.ts","../../../../packages/types/src/message/message.ts","../../../../packages/types/src/utils/create-message.ts","../../../../packages/types/src/config/config.ts","../../../../packages/types/src/config/response-schema.config.ts","../../../../packages/types/src/tool/function-tool.ts","../../../../packages/types/src/tool/tool.ts","../../../../packages/types/src/embedding/embedding-requests.ts","../../../../packages/types/src/embedding/embedding-response.ts","../../../../packages/types/src/chat/chat-response.ts","../../../../packages/provider/src/errors/model-response.error.ts","../../../../packages/provider/src/errors/invalid-model-request.error.ts","../../../../packages/provider/src/errors/invalid-config.error.ts","../../../../packages/provider/src/errors/invalid-messages.error.ts","../../../../packages/provider/src/errors/invalid-tools.error.ts","../../../../packages/provider/src/errors/invalid-embedding-requests.error.ts","../../../../packages/provider/src/types/config/multi-string-config-item.ts","../../../../packages/provider/src/types/config/object-schema-config-item.ts","../../../../packages/provider/src/types/config/range-config-item.ts","../../../../packages/provider/src/types/config/select-boolean-config-item.ts","../../../../packages/provider/src/types/config/select-string-config-item.ts","../../../../packages/provider/src/types/config/config-item.ts","../../../../packages/provider/src/model/chat-model/chat-model.schema.v1.ts","../../../../packages/provider/src/model/embedding-model/embedding-model.schema.v1.ts","../../../../packages/provider/src/types/headers.ts","../../../../packages/provider/src/types/params.ts","../../../../packages/provider/src/types/url.ts","../../../../packages/provider/src/utils/common-config.def.chat-model.ts","../../../../packages/provider/src/utils/remove-undefined-entries.ts","../../../../packages/provider/src/utils/url.ts","../src/configs/chat-model/common.config.chat-model.together-ai.ts","../src/configs/configs.together-ai.ts","../src/models/chat-models/types/roles.chat-model.together-ai.ts","../src/models/chat-models/types/modalities.chat-model.together-ai.ts","../src/models/chat-models/types/response.chat-model.together-ai.ts","../src/models/chat-models/types/request.chat-model.together-ai.ts","../src/models/chat-models/base-chat-model-schema.together-ai.ts","../src/provider/provider.together-ai.ts","../src/models/chat-models/base-chat-model.together-ai.ts","../src/models/embedding-models/types/modalities.embedding-model.together-ai.ts","../src/models/embedding-models/types/response.embedding-model.together-ai.ts","../src/models/embedding-models/types/request.embedding-model.together-ai.ts","../src/models/embedding-models/base-embedding-model.together-ai.ts","../src/models/embedding-models/base-embedding-model-schema.together-ai.ts"],"names":["safeStringify","obj","seen","key","value","getErrorMessage","error","GatewayBaseErrorLiteral","GatewayBaseError","_GatewayBaseError","info","cause","name","SystemRoleLiteral","UserRoleLiteral","AssistantRoleLiteral","ToolRoleLiteral","RoleLiterals","RoleEnum","z","PartialRoleLiterals","PartialRoleEnum","ImageModalityLiteral","Base64ImageContentTypeLiteral","Base64ImageContentMediaTypeLiterals","Base64ImageContentValue","UrlImageContentTypeLiteral","UrlImageContentValue","ImageContentValue","ImageContentDetails","ImageContentDetailsLiteral","ImageContent","Metadata","TextModalityLiteral","TextContent","PartialTextModalityLiteral","PartialTextContent","ToolCallModalityLiteral","ToolCallContent","PartialToolCallModalityLiteral","PartialToolCallContent","ToolResponseModalityLiteral","ToolResponseContent","ModalityLiterals","ModalityEnum","Content","TextContentMetadata","ImageContentMetadata","ToolCallContentMetadata","ToolResponseContentMetadata","PartialModalityLiterals","PartialContent","PartialTextContentMetadata","PartialToolCallContentMetadata","Message","Role","MessageMetadata","PartialMessage","createTextContent","content","createToolCallContent","index","id","args","createPartialTextMessage","role","createPartialToolCallMessage","Config","ResponseSchemaTypes","ResponseSchemaTypesLiteral","ResponseSchemaProperty","ResponseSchemaStructure","ResponseSchema","FunctionToolLiteral","FunctionParameterTypesLiteral","FunctionParameter","FunctionParameters","Function","ToolTypesLiteral","FunctionTool","ToolLiterals","ToolEnum","Tool","FunctionToolMetadata","EmbeddingTextModalityLiteral","EmbeddingTokenModalityLiteral","EmbeddingModalityLiterals","EmbeddingModalityEnum","TextEmbeddingRequests","TokenEmbeddingRequests","EmbeddingRequests","FloatEmbeddingLiteral","FloatEmbedding","Base64EmbeddingLiteral","Base64Embedding","EmbeddingsUsage","ChatUsage","ChatBaseLogProb","ChatLogProb","ChatLogProbs","ChatResponse","ModelResponseErrorLiteral","ModelResponseError","_ModelResponseError","InvalidModelRequestErrorLiteral","InvalidModelRequestError","_InvalidModelRequestError","InvalidConfigErrorLiteral","InvalidConfigError","_InvalidConfigError","InvalidMessagesErrorLiteral","InvalidMessagesError","_InvalidMessagesError","InvalidToolsErrorLiteral","InvalidToolsError","_InvalidToolsError","InvalidEmbeddingRequestsErrorLiteral","InvalidEmbeddingRequestsError","_InvalidEmbeddingRequestsError","MultiStringConfigItemTypeLiteral","MultiStringConfigItemDef","MultiStringConfigItemSchema","max","MultiStringConfigItem","data","__spreadValues","ObjectSchemaConfigItemTypeLiteral","ObjectSchemaConfigItemDef","ObjectSchemaConfigItemSchema","schema","ObjectSchemaConfigItem","RangeConfigItemTypeLiteral","RangeConfigItemDef","RangeConfigItemSchema","min","step","defaultValue","RangeConfigItem","SelectBooleanConfigItemTypeLiteral","SelectBooleanConfigItemDef","SelectBooleanConfigItemSchema","SelectBooleanConfigItem","SelectStringConfigItemTypeLiteral","SelectStringConfigItemDef","SelectStringConfigItemSchema","choices","SelectStringConfigItem","ConfigItemLiterals","ConfigItemEnum","ConfigItemDef","ChatModelSchema","Roles","Modalities","config","_a","_b","defKeys","schemaKeys","EmbeddingModelSchema","TEMPERATURE","MAX_TOKENS","STOP","TOP_A","TOP_P","TOP_K","MIN_P","FREQUENCY_PENALTY","PRESENCE_PENALTY","SEED","REPETITION_PENALTY","LOG_PROBS","TOP_LOG_PROBS","ECHO","RESPONSE_FORMAT","RESPONSE_FORMAT_WITH_SCHEMA","RESPONSE_SCHEMA","CHAT_CONFIG","removeUndefinedEntries","record","_","urlWithoutTrailingSlash","url","temperature","at","Kt","maxTokens","maxOutputTokens","stop","maxSequences","Ve","topK","topP","minP","frequencyPenalty","presencePenalty","repetitionPenalty","seed","logProbs","lt","toolChoice","dt","responseFormat","responseSchema","ot","kt","ChatModelBaseConfigSchema","ChatModelBaseConfigDef","TogetherAIChatModelConfigs","TogetherAIChatModelRoles","oe","ae","ie","TogetherAIChatModelRolesMap","TogetherAIChatModelModalities","M","g","h","TogetherAIChatModelModalitiesEnum","TogetherAILogProbs","TogetherAIToolCallsCompleteChatResponse","TogetherAICompleteChatResponse","TogetherAIToolCallsStreamChatResponse","TogetherAIStreamChatResponse","TogetherAIChatRequestTool","TogetherAIChatRequestToolChoiceEnum","TogetherAIChatRequestToolChoiceFunction","TogetherAIChatRequestResponseFormat","TogetherAIChatRequestTextContent","TogetherAIChatRequestToolCallContent","TogetherAIChatRequestSystemMessage","TogetherAIChatRequestUserMessage","TogetherAIChatRequestAssistantMessage","TogetherAIChatRequestToolMessage","TogetherAIChatRequestMessage","TogetherAIChatRequest","BaseChatModelSchema","ProviderLiteral","TogetherAI","options","model","BaseChatModel","parsedOptions","BaseChatModelOptions","BaseEmbeddingModelSchema","BaseEmbeddingModel","BaseEmbeddingModelOptions","modelSchema","an","responseHeaders","messages","acc","message","request","safeRequest","parsedRequest","modelName","_config","It","Qt","toolCallMap","assistantContent","toolCall","toolCallContent","toolResponse","tools","tool","_toolChoice","_parsedConfig","parsedConfig","transformedConfig","def","paramKey","paramValue","configToolChoice","parsedMessages","parsedMessage","b","q","textContent","toolCalls","Z","parsedTool","Gt","__async","resolve","transformedMessages","transformedTools","response","safe","B","parsedResponse","yt","mt","usage","_logProbs","token","chunk","buffer","__asyncGenerator","lines","line","structuredLine","partialResponse","ft","Mt","TogetherAIEmbeddingModelModalities","H","TogetherAIEmbeddingModelModalitiesEnum","TogetherAIGetEmbeddingsResponse","TogetherAIEmbeddingRequestInput","TogetherAIEmbeddingRequest","requests","embeddingRequests","_parsedRequests","Wt","K","embeddings","item","Ue","Dt"],"mappings":"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","file":"index.mjs","sourcesContent":["import { z } from \"zod\";\n\nimport {\n  frequencyPenalty,\n  logProbs,\n  maxTokens,\n  minP,\n  presencePenalty,\n  repetitionPenalty,\n  responseFormat,\n  responseSchema,\n  seed,\n  stop,\n  temperature,\n  toolChoice,\n  topK,\n  topP,\n} from \"./common.config.chat-model.together-ai\";\n\nconst ChatModelBaseConfigSchema = (maxOutputTokens: number, maxSequences: number) =>\n  z.object({\n    temperature: temperature.schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP.schema,\n    topK: topK.schema,\n    minP: minP.schema,\n    frequencyPenalty: frequencyPenalty.schema,\n    presencePenalty: presencePenalty.schema,\n    repetitionPenalty: repetitionPenalty.schema,\n    seed: seed.schema.transform((value) => (value === 0 ? undefined : value)),\n    logProbs: logProbs.schema,\n    toolChoice: toolChoice.schema,\n    responseSchema: responseSchema.schema,\n    responseFormat: responseFormat.schema,\n  });\n\nconst ChatModelBaseConfigDef = (maxOutputTokens: number, maxSequences: number) =>\n  ({\n    temperature: temperature.def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP.def,\n    topK: topK.def,\n    minP: minP.def,\n    frequencyPenalty: frequencyPenalty.def,\n    presencePenalty: presencePenalty.def,\n    repetitionPenalty: repetitionPenalty.def,\n    seed: seed.def,\n    logProbs: logProbs.def,\n    toolChoice: toolChoice.def,\n    responseSchema: responseSchema.def,\n    responseFormat: responseFormat.def,\n  }) as const;\n\nexport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema };\n","const safeStringify = (obj: unknown) => {\n  const seen = new WeakSet();\n  return JSON.stringify(obj, (key, value) => {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return; // Skip circular reference\n      }\n      seen.add(value);\n    }\n    return value;\n  });\n};\n\nconst getErrorMessage = (error: unknown | undefined): string => {\n  if (error == null) return \"unknown error\";\n  if (typeof error === \"string\") return error;\n  if (error instanceof Error) return error.message;\n  return safeStringify(error);\n};\n\nconst GatewayBaseErrorLiteral = \"GatewayBaseError\" as const;\nclass GatewayBaseError extends Error {\n  readonly name: string = GatewayBaseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }, name?: string) {\n    super(`[${name ?? GatewayBaseErrorLiteral}]: ${info}\\nMessage: ${getErrorMessage(cause)}`);\n    this.info = info;\n    this.cause = cause;\n    this.name = name ?? GatewayBaseErrorLiteral;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isGatewayBaseError(error: unknown): error is GatewayBaseError {\n    return error instanceof GatewayBaseError;\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      info: this.info,\n      cause: this.cause,\n      message: this.message,\n      stack: this.stack,\n    };\n  }\n}\n\nexport { GatewayBaseError };\n","import { z } from \"zod\";\n\nconst SystemRoleLiteral = \"system\" as const;\nconst UserRoleLiteral = \"user\" as const;\nconst AssistantRoleLiteral = \"assistant\" as const;\nconst ToolRoleLiteral = \"tool\" as const;\n\nconst RoleLiterals = [SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral] as const;\nconst RoleEnum = z.enum(RoleLiterals);\ntype RoleEnumType = z.infer<typeof RoleEnum>;\n\nconst PartialRoleLiterals = [AssistantRoleLiteral] as const;\nconst PartialRoleEnum = z.enum(PartialRoleLiterals);\ntype PartialRoleEnumType = z.infer<typeof PartialRoleEnum>;\n\nexport {\n  UserRoleLiteral,\n  ToolRoleLiteral,\n  SystemRoleLiteral,\n  AssistantRoleLiteral,\n  RoleEnum,\n  RoleLiterals,\n  PartialRoleEnum,\n  PartialRoleLiterals,\n  type RoleEnumType,\n  type PartialRoleEnumType,\n};\n","import { z } from \"zod\";\n\nconst ImageModalityLiteral = \"image\" as const;\n\nconst Base64ImageContentTypeLiteral = \"base64\" as const;\nconst Base64ImageContentMediaTypeLiterals = [\"png\", \"jpeg\", \"webp\", \"gif\"] as const;\nconst Base64ImageContentValue = z.object({\n  type: z.literal(Base64ImageContentTypeLiteral),\n  base64: z.string(),\n  media_type: z.enum(Base64ImageContentMediaTypeLiterals),\n});\ntype Base64ImageContentValueType = z.infer<typeof Base64ImageContentValue>;\n\nconst UrlImageContentTypeLiteral = \"url\" as const;\nconst UrlImageContentValue = z.object({\n  type: z.literal(UrlImageContentTypeLiteral),\n  url: z.string(),\n});\ntype UrlImageContentValueType = z.infer<typeof UrlImageContentValue>;\n\nconst ImageContentValue = z.discriminatedUnion(\"type\", [Base64ImageContentValue, UrlImageContentValue]);\ntype ImageContentValueType = z.infer<typeof ImageContentValue>;\n\nconst ImageContentDetails = [\"low\", \"medium\", \"high\", \"auto\"] as const;\nconst ImageContentDetailsLiteral = z.enum(ImageContentDetails);\ntype ImageContentDetailsLiteralType = z.infer<typeof ImageContentDetailsLiteral>;\nconst ImageContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ImageModalityLiteral),\n    detail: ImageContentDetailsLiteral,\n    value: ImageContentValue,\n    metadata: Metadata,\n  });\ntype ImageContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ImageContent<M>>>;\n\nexport {\n  Base64ImageContentValue,\n  ImageContent,\n  ImageContentDetails,\n  ImageContentDetailsLiteral,\n  ImageModalityLiteral,\n  UrlImageContentValue,\n  UrlImageContentTypeLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentMediaTypeLiterals,\n  type Base64ImageContentValueType,\n  type ImageContentDetailsLiteralType,\n  type ImageContentType,\n  type ImageContentValueType,\n  type UrlImageContentValueType,\n};\n","import { z } from \"zod\";\n\nconst TextModalityLiteral = \"text\" as const;\n\nconst TextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(TextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype TextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TextContent<M>>>;\n\nconst PartialTextModalityLiteral = \"partial-text\" as const;\n\n// text value can already be an empty string, so we don't need to make it optional\n// const PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n//   TextContent(Metadata).merge(z.object({\n//     modality: z.literal(PartialTextModalityLiteral),\n//   }));\nconst PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialTextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype PartialTextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialTextContent<M>>>;\n\nexport {\n  TextContent,\n  PartialTextContent,\n  TextModalityLiteral,\n  PartialTextModalityLiteral,\n  type TextContentType,\n  type PartialTextContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolCallModalityLiteral = \"tool-call\" as const;\n\nconst ToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    arguments: z.string(),\n    metadata: Metadata,\n  });\ntype ToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolCallContent<M>>>;\n\nconst PartialToolCallModalityLiteral = \"partial-tool-call\" as const;\n\n// const PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n//   ToolCallContent(Metadata).partial({\n//     id: true,\n//     name: true,\n//     arguments: true,\n//   }).merge(z.object({\n//     modality: z.literal(PartialToolCallModalityLiteral),\n//   }));\nconst PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().optional(),\n    name: z.string().optional(),\n    arguments: z.string().optional(),\n    metadata: Metadata,\n  });\ntype PartialToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialToolCallContent<M>>>;\n\nexport {\n  ToolCallContent,\n  PartialToolCallContent,\n  ToolCallModalityLiteral,\n  PartialToolCallModalityLiteral,\n  type ToolCallContentType,\n  type PartialToolCallContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolResponseModalityLiteral = \"tool-response\" as const;\n\nconst ToolResponseContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolResponseModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    data: z.string(),\n    metadata: Metadata,\n  });\ntype ToolResponseContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolResponseContent<M>>>;\n\nexport { ToolResponseContent, ToolResponseModalityLiteral, type ToolResponseContentType };\n","import { z } from \"zod\";\n\nimport { ImageContent, ImageModalityLiteral } from \"./image-content\";\nimport { PartialTextContent, PartialTextModalityLiteral, TextContent, TextModalityLiteral } from \"./text-content\";\nimport { PartialToolCallContent, PartialToolCallModalityLiteral, ToolCallContent, ToolCallModalityLiteral } from \"./tool-call-content\";\nimport { ToolResponseContent, ToolResponseModalityLiteral } from \"./tool-response-content\";\n\nconst ModalityLiterals = [TextModalityLiteral, ImageModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral] as const;\nconst ModalityEnum = z.enum(ModalityLiterals);\ntype ModalityEnumType = z.infer<typeof ModalityEnum>;\n\nconst Content = <\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    TextContent(TextContentMetadata),\n    ImageContent(ImageContentMetadata),\n    ToolCallContent(ToolCallContentMetadata),\n    ToolResponseContent(ToolResponseContentMetadata),\n  ]);\ntype ContentType<\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Content<TCM, ICM, CCM, RCM>>>;\n\nconst PartialModalityLiterals = [PartialTextModalityLiteral, PartialToolCallModalityLiteral] as const;\nconst PartialModalityEnum = z.enum(PartialModalityLiterals);\ntype PartialModalityEnumType = z.infer<typeof PartialModalityEnum>;\n\nconst PartialContent = <TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined>(\n  PartialTextContentMetadata: TCM = z.undefined() as TCM,\n  PartialToolCallContentMetadata: CCM = z.undefined() as CCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    PartialTextContent(PartialTextContentMetadata),\n    PartialToolCallContent(PartialToolCallContentMetadata),\n  ]);\ntype PartialContentType<TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<\n  ReturnType<typeof PartialContent<TCM, CCM>>\n>;\n\nexport {\n  Content,\n  ModalityEnum,\n  ModalityLiterals,\n  type ContentType,\n  type ModalityEnumType,\n  PartialContent,\n  PartialModalityEnum,\n  PartialModalityLiterals,\n  type PartialContentType,\n  type PartialModalityEnumType,\n};\n","import { z } from \"zod\";\n\nimport { Content, PartialContent } from \"./content\";\nimport { PartialRoleEnum, RoleEnum } from \"./roles\";\n\nconst Message = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = RoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    content: z.array(Content(TextContentMetadata, ImageContentMetadata, ToolCallContentMetadata, ToolResponseContentMetadata)),\n    metadata: MessageMetadata,\n  });\ntype MessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Message<R, TCM, ICM, CCM, RCM, MM>>>;\n\n// const PartialMessage = <\n//   R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n//   TCM extends z.ZodTypeAny = z.ZodUndefined,\n//   CCM extends z.ZodTypeAny = z.ZodUndefined,\n//   MM extends z.ZodTypeAny = z.ZodUndefined,\n// >(\n//   Role: R = PartialRoleEnum as unknown as R,\n//   TextContentMetadata: TCM = z.undefined() as TCM,\n//   ToolCallContentMetadata: CCM = z.undefined() as CCM,\n//   MessageMetadata: MM = z.undefined() as MM,\n// ) => Message(\n//   Role,\n//   TextContentMetadata,\n//   undefined,\n//   ToolCallContentMetadata,\n//   undefined,\n//   MessageMetadata\n// ).omit({ content: true }).merge(z.object({\n//   partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n// }));\nconst PartialMessage = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = PartialRoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n    metadata: MessageMetadata,\n  });\ntype PartialMessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof PartialMessage<R, TCM, CCM, MM>>>;\n\nexport { Message, PartialMessage, type MessageType, type PartialMessageType };\n","import {\n  Base64ImageContentTypeLiteral,\n  ContentType,\n  ImageContent,\n  ImageContentDetailsLiteralType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialMessage,\n  PartialMessageType,\n  PartialTextContent,\n  PartialTextModalityLiteral,\n  PartialToolCallContent,\n  PartialToolCallModalityLiteral,\n  RoleEnumType,\n  TextContent,\n  TextModalityLiteral,\n  ToolCallContent,\n  ToolCallModalityLiteral,\n  ToolResponseContent,\n  ToolResponseModalityLiteral,\n  UrlImageContentTypeLiteral,\n} from \"./../message\";\n\nconst createTextContent = (content: string): ContentType => {\n  return TextContent().parse({\n    modality: TextModalityLiteral,\n    value: content,\n  });\n};\n\nconst createToolCallContent = (index: number, id: string, name: string, args: string): ContentType => {\n  return ToolCallContent().parse({\n    modality: ToolCallModalityLiteral,\n    index: index,\n    id: id,\n    name: name,\n    arguments: args,\n  });\n};\n\nconst createTextMessage = (role: RoleEnumType, content: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      TextContent().parse({\n        modality: TextModalityLiteral,\n        value: content,\n      }),\n    ],\n  });\n};\n\nconst createUrlImageMessage = (role: RoleEnumType, url: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: UrlImageContentTypeLiteral,\n          url: url,\n        },\n      }),\n    ],\n  });\n};\n\nconst createBase64ImageMessage = (role: RoleEnumType, base64: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: Base64ImageContentTypeLiteral,\n          base64: base64,\n        },\n      }),\n    ],\n  });\n};\n\nconst createToolCallMessage = (role: RoleEnumType, index: number, id: string, name: string, args: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolCallContent().parse({\n        modality: ToolCallModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        arguments: args,\n      }),\n    ],\n  });\n};\n\nconst createToolResponseMessage = (role: RoleEnumType, index: number, id: string, name: string, data: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolResponseContent().parse({\n        modality: ToolResponseModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        data: data,\n      }),\n    ],\n  });\n};\n\nconst createPartialTextMessage = (role: RoleEnumType, content: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialTextContent().parse({\n      modality: PartialTextModalityLiteral,\n      value: content,\n    }),\n  });\n};\n\nconst createPartialToolCallMessage = (role: RoleEnumType, index: number, id?: string, name?: string, args?: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialToolCallContent().parse({\n      modality: PartialToolCallModalityLiteral,\n      index: index,\n      id: id,\n      name: name,\n      arguments: args,\n    }),\n  });\n};\n\nexport {\n  createTextContent,\n  createTextMessage,\n  createUrlImageMessage,\n  createBase64ImageMessage,\n  createToolCallContent,\n  createToolCallMessage,\n  createToolResponseMessage,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n};\n","import { z } from \"zod\";\n\nconst Config = <C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>>(\n  Config: C = z.record(z.string(), z.any()).optional() as unknown as C\n) => Config;\ntype ConfigType<C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>> = z.infer<ReturnType<typeof Config<C>>>;\n\nexport { Config, type ConfigType };\n","import { z } from \"zod\";\n\n// TODO: move to json schema 7 type and validator when implemented for tool types\nconst ResponseSchemaTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"enum\"] as const;\nconst ResponseSchemaTypesLiteral = z.enum(ResponseSchemaTypes);\ntype ResponseSchemaTypesType = z.infer<typeof ResponseSchemaTypesLiteral>;\n\nconst ResponseSchemaProperty = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: z.union([ResponseSchemaTypesLiteral, z.array(z.union([ResponseSchemaTypesLiteral, z.literal(\"null\")]))]).optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n  $ref: z.string().optional(), // Reference to another schema\n});\ntype ResponseSchemaPropertyType = z.infer<typeof ResponseSchemaProperty>;\n\nconst ResponseSchemaStructure = z.object({\n  type: z.enum([\"object\"]),\n  required: z.array(z.string()),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(ResponseSchemaProperty),\n  additionalProperties: z.literal(false),\n});\ntype ResponseSchemaStructureType = z.infer<typeof ResponseSchemaStructure>;\n\nconst ResponseSchema = z\n  .object({\n    name: z\n      .string()\n      .regex(/^[a-zA-Z0-9_]{1,64}$/)\n      .max(64),\n    description: z.string().max(4096),\n    strict: z.boolean().optional(),\n    schema: ResponseSchemaStructure,\n  })\n  .optional();\ntype ResponseSchemaType = z.infer<typeof ResponseSchema>;\n\nexport {\n  ResponseSchema,\n  ResponseSchemaProperty,\n  ResponseSchemaStructure,\n  ResponseSchemaTypes,\n  ResponseSchemaTypesLiteral,\n  type ResponseSchemaTypesType,\n  type ResponseSchemaType,\n  type ResponseSchemaPropertyType,\n  type ResponseSchemaStructureType,\n};\n","// import { JSONSchema7 } from \"json-schema\";\n// import { Validator } from \"jsonschema\";\nimport { z } from \"zod\";\n\nconst FunctionToolLiteral = \"function\" as const;\n\n// TODO: fix 'name' property not allowed in JSONSchema7\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}).refine((schema) => {\n//       const validator = new Validator();\n//       return validator.validate(schema, { type: \"object\" }).valid;\n//     }),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n// type FunctionToolType = z.infer<typeof FunctionTool>;\n\nconst FunctionParameterTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"];\nconst FunctionParameterTypesLiteral = z.enum([\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"]);\ntype FunctionParameterTypesType = z.infer<typeof FunctionParameterTypesLiteral>;\n\n// TODO: make a proper fix here\nconst FunctionParameter = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: FunctionParameterTypesLiteral.optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n});\ntype FunctionParameterType = z.infer<typeof FunctionParameter>;\n\nconst FunctionParameters = z.object({\n  type: z.enum([\"object\"]),\n  title: z.string().optional(),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(FunctionParameter).optional(),\n  required: z.array(z.string()).optional(),\n});\ntype FunctionParametersType = z.infer<typeof FunctionParameters>;\n\nconst Function = z.object({\n  name: z\n    .string()\n    .regex(/^[a-zA-Z0-9_]{1,64}$/)\n    .max(64),\n  description: z.string().max(4096),\n  parameters: z.any(),\n  strict: z.boolean().optional(),\n});\ntype FunctionType = z.infer<typeof Function>;\n\nconst ToolTypes = [\"function\"];\nconst ToolTypesLiteral = z.enum([\"function\"]);\ntype ToolTypesType = z.infer<typeof ToolTypesLiteral>;\n\nconst FunctionTool = z.object({\n  type: ToolTypesLiteral,\n  definition: z.object({\n    schema: Function, // TODO: convert to union with more tool types\n  }),\n});\ntype FunctionToolType = z.infer<typeof FunctionTool>;\n\n// const Tools = z.array(Tool).nonempty().optional();\n// type ToolsType = z.infer<typeof Tools>;\n\nexport {\n  Function,\n  FunctionParameter,\n  FunctionParameters,\n  FunctionParameterTypes,\n  FunctionParameterTypesLiteral,\n  ToolTypes,\n  ToolTypesLiteral,\n  type FunctionParametersType,\n  type FunctionParameterType,\n  type FunctionParameterTypesType,\n  type FunctionType,\n  type ToolTypesType,\n};\n\nexport { FunctionTool, FunctionToolLiteral, type FunctionToolType };\n","import { z } from \"zod\";\n\nimport { FunctionTool, FunctionToolLiteral } from \"./function-tool\";\n\nconst ToolLiterals = [FunctionToolLiteral] as const;\nconst ToolEnum = z.enum(ToolLiterals);\ntype ToolEnumType = z.infer<typeof ToolEnum>;\n\nconst Tool = <FTM extends z.ZodTypeAny>(FunctionToolMetadata: FTM = z.undefined() as FTM) =>\n  z.discriminatedUnion(\"type\", [FunctionTool.extend({ metadata: FunctionToolMetadata })]);\ntype ToolType<FTM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Tool<FTM>>>;\n\nexport { Tool, ToolEnum, ToolLiterals, type ToolEnumType, type ToolType };\n","import { z } from \"zod\";\n\nconst EmbeddingTextModalityLiteral = \"text\" as const;\nconst EmbeddingTokenModalityLiteral = \"token\" as const;\n\nconst EmbeddingModalityLiterals = [EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral] as const;\nconst EmbeddingModalityEnum = z.enum(EmbeddingModalityLiterals);\ntype EmbeddingModalityEnumType = z.infer<typeof EmbeddingModalityEnum>;\n\nconst TextEmbeddingRequests = z.array(z.string().min(1));\ntype TextEmbeddingRequestsType = z.infer<typeof TextEmbeddingRequests>;\n\nconst TokenEmbeddingRequests = z.array(z.array(z.number().int().nonnegative()));\ntype TokenEmbeddingRequestsType = z.infer<typeof TokenEmbeddingRequests>;\n\nconst EmbeddingRequests = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.discriminatedUnion(\"modality\", [\n    z.object({\n      modality: z.literal(EmbeddingTextModalityLiteral),\n      metadata: Metadata,\n      requests: TextEmbeddingRequests,\n    }),\n    z.object({\n      modality: z.literal(EmbeddingTokenModalityLiteral),\n      metadata: Metadata,\n      requests: TokenEmbeddingRequests,\n    }),\n  ]);\ntype EmbeddingRequestsType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof EmbeddingRequests<M>>>;\n\nexport {\n  EmbeddingTextModalityLiteral,\n  EmbeddingTokenModalityLiteral,\n  EmbeddingModalityLiterals,\n  EmbeddingModalityEnum,\n  TextEmbeddingRequests,\n  TokenEmbeddingRequests,\n  EmbeddingRequests,\n  type EmbeddingRequestsType,\n  type EmbeddingModalityEnumType,\n  type TextEmbeddingRequestsType,\n  type TokenEmbeddingRequestsType,\n};\n","import { z } from \"zod\";\n\nconst FloatEmbeddingLiteral = \"float\" as const;\nconst FloatEmbedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.array(z.number()),\n});\ntype FloatEmbeddingType = z.infer<typeof FloatEmbedding>;\n\nconst Base64EmbeddingLiteral = \"base64\" as const;\nconst Base64Embedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.string().base64(),\n});\ntype Base64EmbeddingType = z.infer<typeof Base64Embedding>;\n\nconst EmbeddingsUsage = z.object({\n  totalTokens: z.number().int().nonnegative(),\n});\ntype EmbeddingsUsageType = z.infer<typeof EmbeddingsUsage>;\n\nconst EmbeddingResponse = z.discriminatedUnion(\"encodingFormat\", [\n  z.object({\n    encodingFormat: z.literal(FloatEmbeddingLiteral),\n    embeddings: z.array(FloatEmbedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n  z.object({\n    encodingFormat: z.literal(Base64EmbeddingLiteral),\n    embeddings: z.array(Base64Embedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n]);\ntype EmbeddingResponseType = z.infer<typeof EmbeddingResponse>;\n\nexport {\n  FloatEmbeddingLiteral,\n  Base64EmbeddingLiteral,\n  FloatEmbedding,\n  Base64Embedding,\n  EmbeddingsUsage,\n  EmbeddingResponse,\n  type FloatEmbeddingType,\n  type Base64EmbeddingType,\n  type EmbeddingsUsageType,\n  type EmbeddingResponseType,\n};\n","import { z } from \"zod\";\n\nimport { Message, PartialMessage } from \"./../message\";\n\nconst ChatUsage = z.object({\n  promptTokens: z.number().nonnegative(),\n  completionTokens: z.number().nonnegative(),\n  totalTokens: z.number().nonnegative(),\n});\ntype ChatUsageType = z.infer<typeof ChatUsage>;\n\nconst ChatBaseLogProb = z.object({\n  token: z.string(),\n  logProb: z.number(),\n  bytes: z.array(z.number().int()).nullable(),\n});\ntype ChatBaseLogProbType = z.infer<typeof ChatBaseLogProb>;\n\nconst ChatLogProb = ChatBaseLogProb.extend({\n  topLogProbs: z.array(ChatBaseLogProb),\n});\ntype ChatLogProbType = z.infer<typeof ChatLogProb>;\n\nconst ChatLogProbs = z.array(ChatLogProb);\ntype ChatLogProbsType = z.infer<typeof ChatLogProbs>;\n\nconst ChatResponse = z.object({\n  messages: z.array(Message()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype ChatResponseType = z.infer<typeof ChatResponse>;\n\nconst PartialChatResponse = z.object({\n  partialMessages: z.array(PartialMessage()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype PartialChatResponseType = z.infer<typeof PartialChatResponse>;\n\nexport {\n  ChatUsage,\n  ChatBaseLogProb,\n  ChatLogProb,\n  ChatLogProbs,\n  ChatResponse,\n  PartialChatResponse,\n  type ChatUsageType,\n  type ChatBaseLogProbType,\n  type ChatLogProbType,\n  type ChatLogProbsType,\n  type ChatResponseType,\n  type PartialChatResponseType,\n};\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelResponseErrorLiteral = \"ModelResponseError\" as const;\nexport class ModelResponseError extends GatewayBaseError {\n  readonly name = ModelResponseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelResponseErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n  }\n\n  static isModelResponseError(error: unknown): error is ModelResponseError {\n    return error instanceof ModelResponseError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidModelRequestErrorLiteral = \"InvalidModelRequestError\" as const;\nexport class InvalidModelRequestError extends GatewayBaseError {\n  readonly name = InvalidModelRequestErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidModelRequestErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidModelRequestError(error: unknown): error is InvalidModelRequestError {\n    return error instanceof InvalidModelRequestError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidConfigErrorLiteral = \"InvalidConfigError\" as const;\nexport class InvalidConfigError extends GatewayBaseError {\n  readonly name = InvalidConfigErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidConfigErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidConfigError(error: unknown): error is InvalidConfigError {\n    return error instanceof InvalidConfigError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidMessagesErrorLiteral = \"InvalidMessagesError\" as const;\nexport class InvalidMessagesError extends GatewayBaseError {\n  readonly name = InvalidMessagesErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidMessagesErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidMessagesError(error: unknown): error is InvalidMessagesError {\n    return error instanceof InvalidMessagesError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidToolsErrorLiteral = \"InvalidToolsError\" as const;\nexport class InvalidToolsError extends GatewayBaseError {\n  readonly name = InvalidToolsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidToolsErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidToolsError(error: unknown): error is InvalidToolsError {\n    return error instanceof InvalidToolsError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidEmbeddingRequestsErrorLiteral = \"InvalidEmbeddingRequestsError\" as const;\nexport class InvalidEmbeddingRequestsError extends GatewayBaseError {\n  readonly name = InvalidEmbeddingRequestsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidEmbeddingRequestsErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidEmbeddingRequestsError(error: unknown): error is InvalidEmbeddingRequestsError {\n    return error instanceof InvalidEmbeddingRequestsError;\n  }\n}\n","import { z } from \"zod\";\n\nconst MultiStringConfigItemTypeLiteral = \"multi-string\" as const;\n\nconst MultiStringConfigItemDef = z.object({\n  type: z.literal(MultiStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  max: z.number().int().positive(),\n});\ntype MultiStringConfigItemType = z.infer<typeof MultiStringConfigItemDef>;\n\nconst MultiStringConfigItemSchema = (max: number) => z.array(z.string()).max(max).default([]).optional();\ntype MultiStringConfigItemSchemaType = z.infer<ReturnType<typeof MultiStringConfigItemSchema>>;\n\nconst MultiStringConfigItem = (data: Omit<MultiStringConfigItemType, \"type\">) => {\n  return {\n    def: MultiStringConfigItemDef.parse({\n      type: MultiStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: MultiStringConfigItemSchema(data.max),\n  };\n};\n\nexport {\n  MultiStringConfigItem,\n  MultiStringConfigItemDef,\n  MultiStringConfigItemSchema,\n  MultiStringConfigItemTypeLiteral,\n  type MultiStringConfigItemSchemaType,\n  type MultiStringConfigItemType,\n};\n","import { z } from \"zod\";\n\nconst ObjectSchemaConfigItemTypeLiteral = \"object-schema\" as const;\n\nconst ObjectSchemaConfigItemDef = z.object({\n  type: z.literal(ObjectSchemaConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  objectSchema: z.any(),\n});\ntype ObjectSchemaConfigItemType = z.infer<typeof ObjectSchemaConfigItemDef>;\n\nconst ObjectSchemaConfigItemSchema = <S extends z.ZodRawShape>(schema: z.ZodObject<S>) => schema.optional();\ntype ObjectSchemaConfigItemSchemaType<S extends z.ZodRawShape = z.ZodRawShape> = z.infer<\n  ReturnType<typeof ObjectSchemaConfigItemSchema<S>>\n>;\n\nconst ObjectSchemaConfigItem = (data: Omit<ObjectSchemaConfigItemType, \"type\">) => {\n  return {\n    def: ObjectSchemaConfigItemDef.parse({\n      type: ObjectSchemaConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: ObjectSchemaConfigItemSchema(data.objectSchema),\n  };\n};\n\nexport {\n  ObjectSchemaConfigItem,\n  ObjectSchemaConfigItemDef,\n  ObjectSchemaConfigItemSchema,\n  ObjectSchemaConfigItemTypeLiteral,\n  type ObjectSchemaConfigItemType,\n  type ObjectSchemaConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst RangeConfigItemTypeLiteral = \"range\" as const;\n\nconst RangeConfigItemDef = z.object({\n  type: z.literal(RangeConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  min: z.number().int(),\n  max: z.number().int(),\n  step: z.number().positive(),\n  default: z.number(),\n});\ntype RangeConfigItemDefType = z.infer<typeof RangeConfigItemDef>;\n\nconst RangeConfigItemSchema = (min: number, max: number, step: number, defaultValue: number) =>\n  z.number().min(min).max(max).step(step).default(defaultValue).optional();\ntype RangeConfigItemSchemaType = z.infer<ReturnType<typeof RangeConfigItemSchema>>;\n\nconst RangeConfigItem = (data: Omit<RangeConfigItemDefType, \"type\">) => {\n  return {\n    def: RangeConfigItemDef.parse({\n      type: RangeConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: RangeConfigItemSchema(data.min, data.max, data.step, data.default),\n  };\n};\n\nexport {\n  RangeConfigItem,\n  RangeConfigItemDef,\n  RangeConfigItemSchema,\n  RangeConfigItemTypeLiteral,\n  type RangeConfigItemDefType,\n  type RangeConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectBooleanConfigItemTypeLiteral = \"select-boolean\" as const;\n\nconst SelectBooleanConfigItemDef = z.object({\n  type: z.literal(SelectBooleanConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.boolean().nullable(),\n});\ntype SelectBooleanConfigItemDefType = z.infer<typeof SelectBooleanConfigItemDef>;\n\nconst SelectBooleanConfigItemSchema = (defaultValue: boolean | null) => z.boolean().nullable().default(defaultValue).optional();\ntype SelectBooleanConfigItemSchemaType = z.infer<ReturnType<typeof SelectBooleanConfigItemSchema>>;\n\nconst SelectBooleanConfigItem = (data: Omit<SelectBooleanConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectBooleanConfigItemDef.parse({\n      type: SelectBooleanConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectBooleanConfigItemSchema(data.default),\n  };\n};\n\nexport {\n  SelectBooleanConfigItem,\n  SelectBooleanConfigItemDef,\n  SelectBooleanConfigItemSchema,\n  SelectBooleanConfigItemTypeLiteral,\n  type SelectBooleanConfigItemDefType,\n  type SelectBooleanConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectStringConfigItemTypeLiteral = \"select-string\" as const;\n\nconst SelectStringConfigItemDef = z.object({\n  type: z.literal(SelectStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.string().min(1).nullable(),\n  choices: z.array(z.string().min(1)),\n});\ntype SelectStringConfigItemDefType = z.infer<typeof SelectStringConfigItemDef>;\n\nconst SelectStringConfigItemSchema = (defaultValue: string | null, choices: string[]) =>\n  z\n    .enum(choices as [string, ...string[]])\n    .nullable()\n    .default(defaultValue)\n    .optional();\ntype SelectStringConfigItemSchemaType = z.infer<ReturnType<typeof SelectStringConfigItemSchema>>;\n\nconst SelectStringConfigItem = (data: Omit<SelectStringConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectStringConfigItemDef.parse({\n      type: SelectStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectStringConfigItemSchema(data.default, data.choices),\n  };\n};\n\nexport {\n  SelectStringConfigItem,\n  SelectStringConfigItemDef,\n  SelectStringConfigItemSchema,\n  SelectStringConfigItemTypeLiteral,\n  type SelectStringConfigItemDefType,\n  type SelectStringConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nimport { MultiStringConfigItemDef, MultiStringConfigItemTypeLiteral } from \"./multi-string-config-item\";\nimport { ObjectSchemaConfigItemDef, ObjectSchemaConfigItemTypeLiteral } from \"./object-schema-config-item\";\nimport { RangeConfigItemDef, RangeConfigItemTypeLiteral } from \"./range-config-item\";\nimport { SelectBooleanConfigItemDef, SelectBooleanConfigItemTypeLiteral } from \"./select-boolean-config-item\";\nimport { SelectStringConfigItemDef, SelectStringConfigItemTypeLiteral } from \"./select-string-config-item\";\n\nconst ConfigItemLiterals = [\n  RangeConfigItemTypeLiteral,\n  MultiStringConfigItemTypeLiteral,\n  SelectStringConfigItemTypeLiteral,\n  ObjectSchemaConfigItemTypeLiteral,\n  SelectBooleanConfigItemTypeLiteral,\n] as const;\nconst ConfigItemEnum = z.enum(ConfigItemLiterals);\ntype ConfigItemEnumType = z.infer<typeof ConfigItemEnum>;\n\nconst ConfigItemDef = z.discriminatedUnion(\"type\", [\n  RangeConfigItemDef,\n  MultiStringConfigItemDef,\n  SelectStringConfigItemDef,\n  SelectBooleanConfigItemDef,\n  ObjectSchemaConfigItemDef,\n]);\ntype ConfigItemDefType = z.infer<typeof ConfigItemDef>;\n\nexport { ConfigItemDef, ConfigItemEnum, ConfigItemLiterals, type ConfigItemDefType, type ConfigItemEnumType };\n","import { z } from \"zod\";\n\nimport { ModalityEnum, RoleEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\nconst ChatModelSchema = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n>(\n  Roles: R = RoleEnum as unknown as R,\n  Modalities: M = ModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    roles: z.record(Roles, z.string().min(1).optional()),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n  });\ntype ChatModelSchemaType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n> = z.infer<ReturnType<typeof ChatModelSchema<R, M>>>;\n\nexport { ChatModelSchema, type ChatModelSchemaType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModalityEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\n// TODO: add embedding model properties (dimensions, etc)\nconst EmbeddingModelSchema = <M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum>(\n  Modalities: M = EmbeddingModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n  });\ntype EmbeddingModelSchemaType<M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum> = z.infer<\n  ReturnType<typeof EmbeddingModelSchema<M>>\n>;\n\nexport { EmbeddingModelSchema, type EmbeddingModelSchemaType };\n","import { z } from \"zod\";\n\nconst Headers = z.record(z.string());\ntype HeadersType = z.infer<typeof Headers>;\n\nexport { Headers, type HeadersType };\n","import { z } from \"zod\";\n\nconst Params = z.record(\n  z.union([\n    z.boolean(),\n    z.string(),\n    z.number(),\n    z.object({}),\n    z.array(z.any()),\n    z.null(),\n    z.undefined(),\n  ])\n);\ntype ParamsType = z.infer<typeof Params>;\n\nexport { Params, type ParamsType };\n","import { z } from \"zod\";\n\nconst Url = z.string().url();\ntype UrlType = z.infer<typeof Url>;\n\nexport { Url, type UrlType };\n","const TEMPERATURE = {\n  type: \"range\",\n  title: \"Temperature\",\n  description:\n    \"Adjusts the model's creativity level. With a setting of 0, the model strictly picks the most probable next word. \\\n    For endeavors that benefit from a dash of inventiveness, consider dialing it up to 0.7 or higher, enabling the model to produce text \\\n    that's unexpectedly fresh.\",\n} as const;\n\nconst MAX_TOKENS = {\n  type: \"range\",\n  title: \"Max tokens\",\n  description:\n    \"Specify the total tokens for generation, where one token approximates four English characters. \\\n    Setting this to 0 defaults to the model's maximum capacity.\",\n} as const;\n\nconst STOP = (max: number) =>\n  ({\n    type: \"multi\",\n    title: \"Stop sequence\",\n    description: `Enter up to ${max} sequences that will halt additional text output. \\\n      The generated text will exclude these sequences.`,\n  }) as const;\n\nconst TOP_A = {\n  type: \"range\",\n  title: \"Top A\",\n  description:\n    \"Considers only the top tokens that have 'sufficiently high' probabilities relative to the most likely token, \\\n    functioning like a dynamic Top-P. \\\n    A lower Top-A value narrows down the token choices based on the highest probability token, \\\n    while a higher Top-A value refines the filtering without necessarily impacting the creativity of the output.\",\n} as const;\n\nconst TOP_P = {\n  type: \"range\",\n  title: \"Top P\",\n  description:\n    \"Selects a subset of likely tokens for generation, restricting choices to the top-P fraction of possibilities, \\\n    such as the top 10% when P=0.1. \\\n    This approach can limit the variety of the output. By default, it's set to 1, indicating no restriction. \\\n    It's advised to adjust this parameter or temperature to modulate output diversity, but not to modify both simultaneously.\",\n} as const;\n\nconst TOP_K = {\n  type: \"range\",\n  title: \"Top K\",\n  description:\n    \"Select only from the highest K probabilities for each following word, effectively eliminating the less likely 'long tail' options.\",\n} as const;\n\nconst MIN_P = {\n  type: \"range\",\n  title: \"Min P\",\n  description:\n    \"Specifies the minimum probability a token must have to be considered, in relation to the probability of the most likely token. \\\n    (This value varies based on the confidence level of the top token.) \\\n    For example, if Min-P is set to 0.1, only tokens with at least 1/10th the probability of the highest-ranked token will be considered.\",\n} as const;\n\nconst FREQUENCY_PENALTY = {\n  type: \"range\",\n  title: \"Frequency penalty\",\n  description:\n    \"Minimize redundancy.\\\n    By assigning a penalty to frequently used tokens within the text, the likelihood of repeating identical phrases is reduced. \\\n    The default setting for this penalty is zero.\",\n} as const;\n\nconst PRESENCE_PENALTY = {\n  type: \"range\",\n  title: \"Presence penalty\",\n  description:\n    \"Enhance the introduction of novel subjects by reducing the preference for tokens that have already appeared in the text, \\\n    thus boosting the chances of exploring fresh topics. \\\n    The standard setting for this is zero.\",\n} as const;\n\nconst SEED = {\n  type: \"range\",\n  title: \"Seed\",\n  description:\n    \"When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. \\\n    Deterministic output isn't guaranteed. \\\n    Also, changing the model or parameter settings, such as the temperature, \\\n    can cause variations in the response even when you use the same seed value. \\\n    By default, a random seed value is used.\",\n} as const;\n\nconst REPETITION_PENALTY = {\n  type: \"range\",\n  title: \"Repetition penalty\",\n  description:\n    \"Reduces the likelihood of repeating tokens from the input. \\\n    Increasing this value makes the model less prone to repetition, but setting it too high may lead to less coherent output, \\\n    often resulting in run-on sentences missing smaller words. \\\n    The token penalty is scaled according to the original token's probability.\",\n} as const;\n\nconst LOG_PROBS = {\n  type: \"boolean\",\n  title: \"Log probs\",\n  description:\n    \"Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.\",\n} as const;\n\nconst TOP_LOG_PROBS = {\n  type: \"range\",\n  title: \"Top log probs\",\n  description:\n    \"The number of most likely tokens to return at each token position, each with an associated log probability. \\\n    'logprobs' must be set to true if this parameter is used.\",\n} as const;\n\nconst ECHO = {\n  type: \"boolean\",\n  title: \"Echo\",\n  description: \"If true, the response will contain the prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. For JSON, you must include the string 'JSON' in some form within your system / user prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT_WITH_SCHEMA = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. 'json_object' colloquially known as JSON mode, instructs the model to respond with a valid \\\n  JSON (must include the term 'json' in prompt). 'json_schema' colloquially known as structured outputs, allows you to specify a strict \\\n  response schema that the model will adhere to.\",\n} as const;\n\nconst RESPONSE_SCHEMA = {\n  type: \"object\",\n  title: \"Response schema\",\n  description: \"When response format is set to 'json_schema', the model will return a JSON object of the specified schema.\",\n} as const;\n\nconst CHAT_CONFIG = {\n  TEMPERATURE,\n  MAX_TOKENS,\n  STOP,\n  TOP_A,\n  TOP_P,\n  TOP_K,\n  MIN_P,\n  FREQUENCY_PENALTY,\n  PRESENCE_PENALTY,\n  REPETITION_PENALTY,\n  SEED,\n  LOG_PROBS,\n  TOP_LOG_PROBS,\n  ECHO,\n  RESPONSE_FORMAT,\n  RESPONSE_FORMAT_WITH_SCHEMA,\n  RESPONSE_SCHEMA,\n};\n\nexport { CHAT_CONFIG };\n","const removeUndefinedEntries = <T = unknown>(record: Record<string, T | undefined>): Record<string, T> => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return Object.fromEntries(Object.entries(record).filter(([_, value]) => value != null)) as Record<string, T>;\n};\n\nexport { removeUndefinedEntries };\n","const urlWithoutTrailingSlash = (url: string): string => {\n  return url?.replace(/\\/$/, \"\");\n};\n\nexport { urlWithoutTrailingSlash };\n","import {\n  CHAT_CONFIG,\n  MultiStringConfigItem,\n  ObjectSchemaConfigItem,\n  RangeConfigItem,\n  SelectBooleanConfigItem,\n  SelectStringConfigItem,\n} from \"@adaline/provider\";\nimport { ResponseSchema } from \"@adaline/types\";\n\nconst temperature = RangeConfigItem({\n  param: \"temperature\",\n  title: CHAT_CONFIG.TEMPERATURE.title,\n  description: CHAT_CONFIG.TEMPERATURE.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst maxTokens = (maxOutputTokens: number) =>\n  RangeConfigItem({\n    param: \"max_tokens\",\n    title: CHAT_CONFIG.MAX_TOKENS.title,\n    description: CHAT_CONFIG.MAX_TOKENS.description,\n    min: 0,\n    max: maxOutputTokens,\n    step: 1,\n    default: 0,\n  });\n\nconst stop = (maxSequences: number) =>\n  MultiStringConfigItem({\n    param: \"stop\",\n    title: CHAT_CONFIG.STOP(maxSequences).title,\n    description: CHAT_CONFIG.STOP(maxSequences).description,\n    max: maxSequences,\n  });\n\nconst topK = RangeConfigItem({\n  param: \"top_k\",\n  title: CHAT_CONFIG.TOP_K.title,\n  description: CHAT_CONFIG.TOP_K.description,\n  min: 0,\n  max: 10000,\n  step: 1,\n  default: 0,\n});\n\nconst topP = RangeConfigItem({\n  param: \"top_p\",\n  title: CHAT_CONFIG.TOP_P.title,\n  description: CHAT_CONFIG.TOP_P.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst minP = RangeConfigItem({\n  param: \"min_p\",\n  title: CHAT_CONFIG.MIN_P.title,\n  description: CHAT_CONFIG.MIN_P.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 0,\n});\n\nconst frequencyPenalty = RangeConfigItem({\n  param: \"frequency_penalty\",\n  title: CHAT_CONFIG.FREQUENCY_PENALTY.title,\n  description: CHAT_CONFIG.FREQUENCY_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst presencePenalty = RangeConfigItem({\n  param: \"presence_penalty\",\n  title: CHAT_CONFIG.PRESENCE_PENALTY.title,\n  description: CHAT_CONFIG.PRESENCE_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst repetitionPenalty = RangeConfigItem({\n  param: \"repetition_penalty\",\n  title: CHAT_CONFIG.REPETITION_PENALTY.title,\n  description: CHAT_CONFIG.REPETITION_PENALTY.description,\n  min: 0,\n  max: 10000,\n  step: 0.01,\n  default: 0,\n});\n\nconst seed = RangeConfigItem({\n  param: \"seed\",\n  title: CHAT_CONFIG.SEED.title,\n  description: CHAT_CONFIG.SEED.description,\n  min: 0,\n  max: 1000000,\n  step: 1,\n  default: 0,\n});\n\nconst logProbs = SelectBooleanConfigItem({\n  param: \"logprobs\",\n  title: CHAT_CONFIG.LOG_PROBS.title,\n  description: CHAT_CONFIG.LOG_PROBS.description,\n  default: false,\n});\n\nconst toolChoice = SelectStringConfigItem({\n  param: \"tool_choice\",\n  title: \"Tool choice\",\n  description:\n    \"Controls which (if any) tool is called by the model. \\\n    'none' means the model will not call a function. \\\n    'auto' means the model can pick between generating a message or calling a tool.\",\n  default: \"auto\",\n  choices: [\"auto\", \"required\", \"none\"],\n});\n\nconst responseFormat = SelectStringConfigItem({\n  param: \"response_format\",\n  title: CHAT_CONFIG.RESPONSE_FORMAT.title,\n  description: CHAT_CONFIG.RESPONSE_FORMAT.description,\n  default: \"text\",\n  choices: [\"text\", \"json_object\"],\n});\n\nconst responseSchema = ObjectSchemaConfigItem({\n  param: \"response_schema\",\n  title: CHAT_CONFIG.RESPONSE_SCHEMA.title,\n  description: CHAT_CONFIG.RESPONSE_SCHEMA.description,\n  objectSchema: ResponseSchema,\n});\n\nexport {\n  frequencyPenalty,\n  logProbs,\n  maxTokens,\n  presencePenalty,\n  repetitionPenalty,\n  seed,\n  stop,\n  temperature,\n  toolChoice,\n  topP,\n  topK,\n  minP,\n  responseFormat,\n  responseSchema,\n};\n","import { ChatModelBaseConfigDef, ChatModelBaseConfigSchema } from \"./chat-model\";\n\nconst TogetherAIChatModelConfigs = {\n  base: (maxOutputTokens: number, maxSequences: number) => ({\n    def: ChatModelBaseConfigDef(maxOutputTokens, maxSequences),\n    schema: ChatModelBaseConfigSchema(maxOutputTokens, maxSequences),\n  }),\n} as const;\n\nexport { TogetherAIChatModelConfigs };\n","import { z } from \"zod\";\n\nimport { AssistantRoleLiteral, SystemRoleLiteral, ToolRoleLiteral, UserRoleLiteral } from \"@adaline/types\";\n\nconst TogetherAIChatModelRoles = z.enum([SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral]);\n\nconst TogetherAIChatModelRolesMap = {\n  system: SystemRoleLiteral,\n  user: UserRoleLiteral,\n  assistant: AssistantRoleLiteral,\n  tool: ToolRoleLiteral,\n} as const;\n\nexport { TogetherAIChatModelRoles, TogetherAIChatModelRolesMap };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType } from \"@adaline/provider\";\nimport { TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral } from \"@adaline/types\";\n\nconst TogetherAIChatModelModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst TogetherAIChatModelModalitiesEnum = z.enum([TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral]);\n\nexport { TogetherAIChatModelModalitiesEnum, TogetherAIChatModelModalities };\n","import { z } from \"zod\";\n\nconst TogetherAILogProbs = z.object({\n  token_ids: z.array(z.number()),\n  tokens: z.array(z.string()),\n  token_logprobs: z.array(z.number()),\n});\n\nconst TogetherAIToolCallsCompleteChatResponse = z.array(\n  z.object({\n    id: z.string().min(1),\n    type: z.enum([\"function\"]),\n    function: z.object({\n      name: z.string(),\n      arguments: z.string(),\n    }),\n  })\n);\n\nconst TogetherAICompleteChatResponse = z.object({\n  id: z.string(),\n  object: z.literal(\"chat.completion\"),\n  created: z.number(),\n  model: z.string(),\n  prompt: z.any(), // can be stricter but we don't maintain our own original prompt\n  choices: z.array(\n    z.object({\n      index: z.number(),\n      message: z.object({\n        role: z.string(),\n        content: z.string().nullable().optional(),\n        tool_calls: TogetherAIToolCallsCompleteChatResponse.optional(),\n      }),\n      logprobs: TogetherAILogProbs.nullable().optional(),\n      seed: z.number().nullable().optional(),\n      finish_reason: z.string(),\n    })\n  ),\n  usage: z\n    .object({\n      prompt_tokens: z.number(),\n      completion_tokens: z.number(),\n      total_tokens: z.number(),\n    })\n    .nullable()\n    .optional(),\n});\ntype TogetherAICompleteChatResponseType = z.infer<typeof TogetherAICompleteChatResponse>;\n\nconst TogetherAIToolCallsStreamChatResponse = z.array(\n  z.object({\n    index: z.number().int(),\n    id: z.string().min(1).optional(),\n    type: z.enum([\"function\"]).optional(),\n    function: z\n      .object({\n        name: z.string().min(1).optional(),\n        arguments: z.string().optional(),\n      })\n      .optional(),\n  })\n);\n\nconst TogetherAIStreamChatResponse = z.object({\n  id: z.string(),\n  object: z.string(),\n  created: z.number(),\n  model: z.string(),\n  choices: z.array(\n    z.object({\n      index: z.number(),\n      delta: z\n        .object({\n          token_id: z.number().nullable().optional(),\n          role: z.string().nullable().optional(),\n          content: z.string().nullable().optional(),\n          tool_calls: TogetherAIToolCallsStreamChatResponse.optional(),\n        })\n        .or(z.object({})),\n      logprobs: z.any().nullable().optional(), // logprobs not supported in streaming\n      seed: z.number().nullable().optional(),\n      finish_reason: z.string().nullable(),\n      text: z.string().nullable().optional(),\n    })\n  ),\n  usage: z\n    .object({\n      prompt_tokens: z.number(),\n      completion_tokens: z.number(),\n      total_tokens: z.number(),\n    })\n    .nullable()\n    .optional(),\n});\ntype TogetherAIStreamChatResponseType = z.infer<typeof TogetherAIStreamChatResponse>;\n\nexport {\n  TogetherAIStreamChatResponse,\n  TogetherAICompleteChatResponse,\n  TogetherAIToolCallsStreamChatResponse,\n  TogetherAIToolCallsCompleteChatResponse,\n  type TogetherAIStreamChatResponseType,\n  type TogetherAICompleteChatResponseType,\n};\n","import { z } from \"zod\";\n\nconst TogetherAIChatRequestTool = z.object({\n  type: z.literal(\"function\"),\n  function: z.object({\n    name: z.string().min(1),\n    description: z.string().min(1).optional(),\n    strict: z.boolean().optional(),\n    parameters: z.any(),\n  }),\n});\ntype TogetherAIChatRequestToolType = z.infer<typeof TogetherAIChatRequestTool>;\n\nconst TogetherAIChatRequestToolChoiceEnum = z.enum([\"none\", \"auto\", \"required\"]);\ntype TogetherAIChatRequestToolChoiceEnumType = z.infer<typeof TogetherAIChatRequestToolChoiceEnum>;\n\nconst TogetherAIChatRequestToolChoiceFunction = z.object({\n  type: z.literal(\"function\"),\n  function: z.object({\n    name: z.string().min(1),\n  }),\n});\ntype TogetherAIChatRequestToolChoiceFunctionType = z.infer<typeof TogetherAIChatRequestToolChoiceFunction>;\n\n// TODO: fix this for together AI format\nconst TogetherAIChatRequestResponseFormat = z\n  .object({\n    type: z.enum([\"text\", \"json_object\"]),\n  })\n  .or(\n    z.object({\n      type: z.literal(\"json_schema\"),\n      json_schema: z.object({\n        name: z.string().min(1),\n        description: z.string().min(1).optional(),\n        strict: z.boolean().optional(),\n        schema: z.any(),\n      }),\n    })\n  );\ntype TogetherAIChatRequestResponseFormatType = z.infer<typeof TogetherAIChatRequestResponseFormat>;\n\nconst TogetherAIChatRequestTextContent = z.string();\ntype TogetherAIChatRequestTextContentType = z.infer<typeof TogetherAIChatRequestTextContent>;\n\nconst TogetherAIChatRequestToolCallContent = z.object({\n  id: z.string().min(1),\n  type: z.literal(\"function\"),\n  function: z.object({\n    name: z.string().min(1),\n    arguments: z.string().min(1),\n  }),\n});\ntype TogetherAIChatRequestToolCallContentType = z.infer<typeof TogetherAIChatRequestToolCallContent>;\n\nconst TogetherAIChatRequestSystemMessage = z.object({\n  role: z.literal(\"system\"),\n  content: TogetherAIChatRequestTextContent,\n});\ntype TogetherAIChatRequestSystemMessageType = z.infer<typeof TogetherAIChatRequestSystemMessage>;\n\nconst TogetherAIChatRequestUserMessage = z.object({\n  role: z.literal(\"user\"),\n  content: TogetherAIChatRequestTextContent,\n});\ntype TogetherAIChatRequestUserMessageType = z.infer<typeof TogetherAIChatRequestUserMessage>;\n\nconst TogetherAIChatRequestAssistantMessage = z.object({\n  role: z.literal(\"assistant\"),\n  content: TogetherAIChatRequestTextContent.optional(),\n  tool_calls: z.array(TogetherAIChatRequestToolCallContent).min(1).optional(),\n});\ntype TogetherAIChatRequestAssistantMessageType = z.infer<typeof TogetherAIChatRequestAssistantMessage>;\n\nconst TogetherAIChatRequestToolMessage = z.object({\n  role: z.literal(\"tool\"),\n  tool_call_id: z.string().min(1),\n  content: z.string().min(1),\n});\ntype TogetherAIChatRequestToolMessageType = z.infer<typeof TogetherAIChatRequestToolMessage>;\n\nconst TogetherAIChatRequestMessage = z.union([\n  TogetherAIChatRequestSystemMessage,\n  TogetherAIChatRequestUserMessage,\n  TogetherAIChatRequestAssistantMessage,\n  TogetherAIChatRequestToolMessage,\n]);\ntype TogetherAIChatRequestMessageType = z.infer<typeof TogetherAIChatRequestMessage>;\n\nconst TogetherAIChatRequest = z.object({\n  model: z.string().min(1).optional(),\n  messages: z.array(TogetherAIChatRequestMessage).min(1),\n  frequency_penalty: z.number().min(-2).max(2).nullable().optional(),\n  logprobs: z.number().min(0).max(1).nullable().optional(),\n  max_tokens: z.number().min(0).nullable().optional(),\n  presence_penalty: z.number().min(-2).max(2).nullable().optional(),\n  repetition_penalty: z.number().min(0).max(2).nullable().optional(),\n  response_format: TogetherAIChatRequestResponseFormat.optional(),\n  seed: z.number().optional(),\n  stop: z.string().or(z.array(z.string()).max(4)).nullable().optional(),\n  temperature: z.number().min(0).max(1).nullable().optional(),\n  top_p: z.number().min(0).max(1).nullable().optional(),\n  top_k: z.number().min(0).max(10000).nullable().optional(),\n  min_p: z.number().min(0).max(1).nullable().optional(),\n  echo: z.boolean().nullable().optional(),\n  tools: z.array(TogetherAIChatRequestTool).optional(),\n  tool_choice: TogetherAIChatRequestToolChoiceEnum.or(TogetherAIChatRequestToolChoiceFunction).optional(),\n});\ntype TogetherAIChatRequestType = z.infer<typeof TogetherAIChatRequest>;\n\nexport {\n  TogetherAIChatRequest,\n  TogetherAIChatRequestMessage,\n  TogetherAIChatRequestSystemMessage,\n  TogetherAIChatRequestUserMessage,\n  TogetherAIChatRequestAssistantMessage,\n  TogetherAIChatRequestToolMessage,\n  TogetherAIChatRequestTextContent,\n  TogetherAIChatRequestToolCallContent,\n  TogetherAIChatRequestTool,\n  TogetherAIChatRequestToolChoiceEnum,\n  TogetherAIChatRequestToolChoiceFunction,\n  TogetherAIChatRequestResponseFormat,\n  type TogetherAIChatRequestType,\n  type TogetherAIChatRequestMessageType,\n  type TogetherAIChatRequestSystemMessageType,\n  type TogetherAIChatRequestUserMessageType,\n  type TogetherAIChatRequestAssistantMessageType,\n  type TogetherAIChatRequestToolMessageType,\n  type TogetherAIChatRequestTextContentType,\n  type TogetherAIChatRequestToolCallContentType,\n  type TogetherAIChatRequestToolType,\n  type TogetherAIChatRequestToolChoiceEnumType,\n  type TogetherAIChatRequestToolChoiceFunctionType,\n  type TogetherAIChatRequestResponseFormatType,\n};\n","import { ChatModelSchema } from \"@adaline/provider\";\n\nimport { TogetherAIChatModelConfigs } from \"../../configs\";\nimport {\n  TogetherAIChatModelModalities,\n  TogetherAIChatModelModalitiesEnum,\n  TogetherAIChatModelRoles,\n  TogetherAIChatModelRolesMap,\n} from \"./types\";\n\nconst BaseChatModelSchema = ChatModelSchema(TogetherAIChatModelRoles, TogetherAIChatModelModalitiesEnum).parse({\n  name: \"__base__\",\n  description: \"Base chat model for Together AI\",\n  maxInputTokens: 128000,\n  maxOutputTokens: 128000,\n  roles: TogetherAIChatModelRolesMap,\n  modalities: TogetherAIChatModelModalities,\n  config: {\n    def: TogetherAIChatModelConfigs.base(128000, 4).def,\n    schema: TogetherAIChatModelConfigs.base(128000, 4).schema,\n  },\n});\n\nexport { BaseChatModelSchema };\n","import { \n  ChatModelSchemaType, \n  ChatModelV1, \n  EmbeddingModelSchemaType, \n  EmbeddingModelV1, \n  ProviderV1 \n} from \"@adaline/provider\";\n\nimport {\n  BaseChatModel,\n  BaseChatModelOptions,\n  BaseChatModelSchema,\n  BaseEmbeddingModel,\n  BaseEmbeddingModelOptions,\n  BaseEmbeddingModelSchema,\n  type BaseChatModelOptionsType,\n  type BaseEmbeddingModelOptionsType,\n} from \"../models\";\n\nconst ProviderLiteral = \"together-ai\";\nclass TogetherAI<\n  C extends BaseChatModelOptionsType,\n  E extends BaseEmbeddingModelOptionsType\n> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n  static readonly baseUrl = \"https://api.together.xyz/v1\";\n\n  chatModelLiterals(): string[] {\n    return [\"__base__\"];\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return {\n      \"__base__\": BaseChatModelSchema,\n    };\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const model = BaseChatModel;\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    return new model(BaseChatModelSchema, parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return [\"__base__\"];\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return {\n      \"__base__\": BaseEmbeddingModelSchema,\n    };\n  }\n\n  embeddingModel(options: E): EmbeddingModelV1 {\n    const model = BaseEmbeddingModel;\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    return new model(BaseEmbeddingModelSchema, parsedOptions);\n  }\n}\n\nexport { TogetherAI };\n","import { z } from \"zod\";\n\nimport {\n  ChatModelSchemaType,\n  ChatModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidMessagesError,\n  InvalidModelRequestError,\n  InvalidToolsError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  SelectStringConfigItemDefType,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  AssistantRoleLiteral,\n  ChatLogProbsType,\n  ChatResponseType,\n  ChatUsageType,\n  Config,\n  ConfigType,\n  ContentType,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n  createTextContent,\n  createToolCallContent,\n  Message,\n  MessageType,\n  PartialChatResponseType,\n  SystemRoleLiteral,\n  TextModalityLiteral,\n  Tool,\n  ToolCallContentType,\n  ToolCallModalityLiteral,\n  ToolResponseContentType,\n  ToolResponseModalityLiteral,\n  ToolRoleLiteral,\n  ToolType,\n  UserRoleLiteral,\n} from \"@adaline/types\";\n\nimport { TogetherAI } from \"../../provider/provider.together-ai\";\nimport {\n  TogetherAICompleteChatResponse,\n  TogetherAICompleteChatResponseType,\n  TogetherAIStreamChatResponse,\n  TogetherAIStreamChatResponseType,\n} from \"./types\";\nimport {\n  TogetherAIChatRequest,\n  TogetherAIChatRequestAssistantMessageType,\n  TogetherAIChatRequestSystemMessageType,\n  TogetherAIChatRequestToolCallContentType,\n  TogetherAIChatRequestToolMessageType,\n  TogetherAIChatRequestToolType,\n  TogetherAIChatRequestType,\n  TogetherAIChatRequestUserMessageType,\n} from \"./types/request.chat-model.together-ai\";\n\nconst BaseChatModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n});\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nclass BaseChatModel implements ChatModelV1<ChatModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: ChatModelSchemaType;\n\n  private readonly modelName: string;\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly streamChatUrl: string;\n  private readonly completeChatUrl: string;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(TogetherAI.baseUrl);\n    this.streamChatUrl = urlWithoutTrailingSlash(`${this.baseUrl}/chat/completions`);\n    this.completeChatUrl = urlWithoutTrailingSlash(`${this.baseUrl}/chat/completions`);\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      Authorization: `Bearer ${this.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelName,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    return { shouldRetry: true, delayMs: 0 };\n  }\n\n  getTokenCount(messages: MessageType[]): number {\n    return messages.reduce((acc, message) => {\n      return acc + message.content.map((content) => (content.modality === \"text\" ? content.value : \"\")).join(\" \").length;\n    }, 0);\n  }\n\n  transformModelRequest(request: TogetherAIChatRequestType): {\n    modelName: string | undefined;\n    config: ConfigType;\n    messages: MessageType[];\n    tools: ToolType[] | undefined;\n  } {\n    const safeRequest = TogetherAIChatRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    if (parsedRequest.tool_choice && (!parsedRequest.tools || parsedRequest.tools.length === 0)) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'tools' are required when 'tool_choice' is specified\"),\n      });\n    }\n\n    // TODO: fix this for together AI format\n    const _config: ConfigType = {};\n    if (parsedRequest.response_format) {\n      _config.responseFormat = parsedRequest.response_format.type;\n      if (parsedRequest.response_format.type === \"json_schema\") {\n        _config.responseSchema = {\n          name: parsedRequest.response_format.json_schema.name,\n          description: parsedRequest.response_format.json_schema.description || \"\",\n          strict: parsedRequest.response_format.json_schema.strict,\n          schema: parsedRequest.response_format.json_schema.schema,\n        };\n      }\n    }\n\n    if (parsedRequest.tool_choice) {\n      if (typeof parsedRequest.tool_choice === \"string\") {\n        _config.toolChoice = parsedRequest.tool_choice;\n      } else {\n        _config.toolChoice = parsedRequest.tool_choice.function.name;\n      }\n    }\n\n    _config.seed = parsedRequest.seed;\n    _config.maxTokens = parsedRequest.max_tokens;\n    _config.temperature = parsedRequest.temperature;\n    _config.topP = parsedRequest.top_p;\n    _config.minP = parsedRequest.min_p;\n    _config.topK = parsedRequest.top_k;\n    _config.repetitionPenalty = parsedRequest.repetition_penalty;\n    _config.presencePenalty = parsedRequest.presence_penalty;\n    _config.frequencyPenalty = parsedRequest.frequency_penalty;\n    _config.repetitionPenalty = parsedRequest.repetition_penalty;\n    _config.stop = parsedRequest.stop;\n    _config.logProbs = parsedRequest.logprobs === 0 ? false : true;\n    _config.echo = parsedRequest.echo;\n\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const messages: MessageType[] = [];\n    const toolCallMap: { [id: string]: ToolCallContentType } = {};\n    parsedRequest.messages.forEach((message) => {\n      const role = message.role;\n      switch (role) {\n        case \"system\":\n          {\n            messages.push({ role: role, content: [{ modality: TextModalityLiteral, value: message.content }] });\n          }\n          break;\n\n        case \"user\":\n          {\n            messages.push({ role: role, content: [{ modality: TextModalityLiteral, value: message.content }] });\n          }\n          break;\n\n        case \"assistant\":\n          {\n            const assistantContent: ContentType[] = [];\n\n            if (!message.content && !message.tool_calls) {\n              throw new InvalidModelRequestError({\n                info: `Invalid model request for model : '${this.modelName}'`,\n                cause: new Error(\"one of'content' or 'tool_calls' must be provided\"),\n              });\n            }\n\n            if (message.content) {\n              assistantContent.push({ modality: TextModalityLiteral, value: message.content });\n            }\n\n            if (message.tool_calls) {\n              const toolCalls = message.tool_calls;\n              toolCalls.forEach((toolCall, index) => {\n                const toolCallContent: ToolCallContentType = {\n                  modality: ToolCallModalityLiteral,\n                  id: toolCall.id,\n                  index: index,\n                  name: toolCall.function.name,\n                  arguments: toolCall.function.arguments,\n                };\n                assistantContent.push(toolCallContent);\n                toolCallMap[toolCallContent.id] = toolCallContent;\n              });\n            }\n            messages.push({ role: role, content: assistantContent });\n          }\n          break;\n\n        case \"tool\":\n          {\n            const toolResponse = message;\n            messages.push({\n              role: role,\n              content: [\n                {\n                  modality: ToolResponseModalityLiteral,\n                  id: toolResponse.tool_call_id,\n                  index: toolCallMap[toolResponse.tool_call_id].index,\n                  name: toolCallMap[toolResponse.tool_call_id].name,\n                  data: toolResponse.content,\n                },\n              ],\n            });\n          }\n          break;\n      }\n    });\n\n    const tools: ToolType[] = [];\n    if (parsedRequest.tools) {\n      parsedRequest.tools.forEach((tool: TogetherAIChatRequestToolType) => {\n        tools.push({\n          type: \"function\",\n          definition: {\n            schema: {\n              name: tool.function.name,\n              description: tool.function.description || \"\",\n              strict: tool.function.strict,\n              parameters: tool.function.parameters,\n            },\n          },\n        });\n      });\n    }\n\n    return {\n      modelName,\n      config,\n      messages,\n      tools: tools.length > 0 ? tools : undefined,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, messages?: MessageType[], tools?: ToolType[]): ParamsType {\n    const _toolChoice = config.toolChoice;\n    delete config.toolChoice; // can have a specific tool name that is not in the model schema, validated at transformation\n\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    if (_toolChoice !== undefined) {\n      parsedConfig.toolChoice = _toolChoice;\n    }\n\n    Object.keys(parsedConfig).forEach((key) => {\n      if (!(key in this.modelSchema.config.def)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = (parsedConfig as ConfigType)[key];\n\n      if (paramKey === \"max_tokens\" && def.type === \"range\" && paramValue === 0) {\n        acc[paramKey] = def.max;\n      } else if (paramKey === \"logprobs\" && def.type === \"select-boolean\") {\n        if (paramValue === true) {\n          acc[paramKey] = 1;\n        } else {\n          acc[paramKey] = 0;\n        }\n      } else {\n        acc[paramKey] = paramValue;\n      }\n\n      return acc;\n    }, {} as ParamsType);\n\n    if (transformedConfig.top_logprobs && !transformedConfig.logprobs) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: new Error(\"'logprobs' must be 'true' when 'top_logprobs' is specified\"),\n      });\n    }\n\n    if (\"tool_choice\" in transformedConfig && transformedConfig.tool_choice !== undefined) {\n      const toolChoice = transformedConfig.tool_choice as string;\n      if (!tools || (tools && tools.length === 0)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(\"'tools' are required when 'toolChoice' is specified\"),\n        });\n      } else if (tools && tools.length > 0) {\n        const configToolChoice = this.modelSchema.config.def.toolChoice as SelectStringConfigItemDefType;\n        if (!configToolChoice.choices.includes(toolChoice)) {\n          if (tools.map((tool) => tool.definition.schema.name).includes(toolChoice)) {\n            transformedConfig.tool_choice = { type: \"function\", function: { name: toolChoice } };\n          } else {\n            throw new InvalidConfigError({\n              info: `Invalid config for model : '${this.modelName}'`,\n              cause: new Error(`toolChoice : '${toolChoice}' is not part of provided 'tools' names or \n                one of [${configToolChoice.choices.join(\", \")}]`),\n            });\n          }\n        }\n      }\n    }\n\n    // TODO: fix this for together AI format\n    if (\"response_format\" in transformedConfig && transformedConfig.response_format !== undefined) {\n      const responseFormat = transformedConfig.response_format as string;\n      if (responseFormat === \"json_schema\") {\n        if (!(\"response_schema\" in transformedConfig)) {\n          throw new InvalidConfigError({\n            info: `Invalid config for model : '${this.modelName}'`,\n            cause: new Error(\"'responseSchema' is required in config when 'responseFormat' is 'json_schema'\"),\n          });\n        } else {\n          transformedConfig.response_format = {\n            type: \"json_schema\",\n            json_schema: transformedConfig.response_schema,\n          };\n          delete transformedConfig.response_schema;\n        }\n      } else {\n        transformedConfig.response_format = { type: responseFormat };\n      }\n    }\n\n    return transformedConfig;\n  }\n\n  transformMessages(messages: MessageType[]): ParamsType {\n    if (!messages || (messages && messages.length === 0)) {\n      return { messages: [] };\n    }\n\n    const parsedMessages = messages.map((message) => {\n      const parsedMessage = Message().safeParse(message);\n      if (!parsedMessage.success) {\n        throw new InvalidMessagesError({ info: \"Invalid messages\", cause: parsedMessage.error });\n      }\n      return parsedMessage.data;\n    });\n\n    parsedMessages.forEach((message) => {\n      message.content.forEach((content) => {\n        if (!this.modelSchema.modalities.includes(content.modality)) {\n          throw new InvalidMessagesError({\n            info: `Invalid message content for model : '${this.modelName}'`,\n            cause: new Error(`model : '${this.modelName}' does not support modality : '${content.modality}', \n              available modalities : [${this.modelSchema.modalities.join(\", \")}]`),\n          });\n        }\n      });\n    });\n\n    parsedMessages.forEach((message) => {\n      if (!Object.keys(this.modelSchema.roles).includes(message.role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message content for model : '${this.modelName}'`,\n          cause: new Error(`model : '${this.modelName}' does not support role : '${message.role}', \n            available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedMessages = parsedMessages.map((message) => {\n      switch (message.role) {\n        case SystemRoleLiteral: {\n          let textContent: TogetherAIChatRequestSystemMessageType[\"content\"] = \"\";\n          message.content.forEach((content) => {\n            if (content.modality === TextModalityLiteral) {\n              textContent += content.value + \"\\n\";\n            } else {\n              throw new InvalidMessagesError({\n                info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n              });\n            }\n          });\n\n          return {\n            role: this.modelSchema.roles[message.role],\n            content: textContent,\n          };\n        }\n\n        case AssistantRoleLiteral: {\n          let textContent: TogetherAIChatRequestAssistantMessageType[\"content\"] = \"\";\n          const toolCalls: TogetherAIChatRequestToolCallContentType[] = [];\n          message.content.forEach((content) => {\n            if (content.modality === TextModalityLiteral) {\n              textContent += content.value + \"\\n\";\n            } else if (content.modality === ToolCallModalityLiteral) {\n              toolCalls.push({\n                id: content.id,\n                type: \"function\",\n                function: { name: content.name, arguments: content.arguments },\n              });\n            } else {\n              throw new InvalidMessagesError({\n                info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n              });\n            }\n          });\n\n          return {\n            role: this.modelSchema.roles[message.role],\n            content: textContent,\n            ...(toolCalls.length > 0 ? { tool_calls: toolCalls } : {}),\n          };\n        }\n\n        case UserRoleLiteral: {\n          let textContent: TogetherAIChatRequestUserMessageType[\"content\"] = \"\";\n          message.content.forEach((content) => {\n            if (content.modality === TextModalityLiteral) {\n              textContent += content.value + \"\\n\";\n            } else {\n              throw new InvalidMessagesError({\n                info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n              });\n            }\n          });\n\n          return {\n            role: this.modelSchema.roles[message.role],\n            content: textContent,\n          };\n        }\n\n        case ToolRoleLiteral: {\n          if (message.content.length !== 1) {\n            throw new InvalidMessagesError({\n              info: `Invalid message for role : '${message.role}'`,\n              cause: new Error(`role : '${message.role}' must have exactly one content item`),\n            });\n          }\n\n          if (message.content[0].modality !== ToolResponseModalityLiteral) {\n            throw new InvalidMessagesError({\n              info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n              cause: new Error(`role : '${message.role}' must have content with modality : '${ToolResponseModalityLiteral}'`),\n            });\n          }\n\n          const toolResponse = message.content[0] as ToolResponseContentType;\n          const toolResponseMessage: TogetherAIChatRequestToolMessageType = {\n            role: this.modelSchema.roles[message.role] as TogetherAIChatRequestToolMessageType[\"role\"],\n            tool_call_id: toolResponse.id,\n            content: toolResponse.data,\n          };\n          return toolResponseMessage;\n        }\n\n        default: {\n          throw new InvalidMessagesError({\n            info: `Invalid message 'role' for model : ${this.modelName}`,\n            cause: new Error(`role : '${message.role}' is not supported, \n              available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n          });\n        }\n      }\n    });\n\n    return { messages: transformedMessages };\n  }\n\n  transformTools(tools: ToolType[]): ParamsType {\n    if (!this.modelSchema.modalities.includes(ToolCallModalityLiteral)) {\n      throw new InvalidToolsError({\n        info: `Invalid tool 'modality' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' does not support tool modality : '${ToolCallModalityLiteral}'`),\n      });\n    }\n\n    if (!tools || (tools && tools.length === 0)) {\n      return { tools: [] as ToolType[] };\n    }\n\n    const parsedTools = tools.map((tool) => {\n      const parsedTool = Tool().safeParse(tool);\n      if (!parsedTool.success) {\n        throw new InvalidToolsError({ info: \"Invalid tools\", cause: parsedTool.error });\n      }\n      return parsedTool.data;\n    });\n\n    const transformedTools = parsedTools.map((tool) => ({\n      type: \"function\",\n      function: tool.definition.schema,\n    }));\n\n    return { tools: transformedTools };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.completeChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getCompleteChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  transformCompleteChatResponse(response: any): ChatResponseType {\n    const safe = TogetherAICompleteChatResponse.safeParse(response);\n    if (safe.success) {\n      if (safe.data.choices.length === 0) {\n        throw new ModelResponseError({\n          info: \"Invalid response from model\",\n          cause: new Error(`No choices in response : ${JSON.stringify(safe.data)}`),\n        });\n      }\n\n      const parsedResponse: TogetherAICompleteChatResponseType = safe.data;\n      const messages: MessageType[] = [\n        {\n          role: AssistantRoleLiteral,\n          content: [],\n        },\n      ];\n      const message = parsedResponse.choices[0].message;\n      if (message.content) {\n        messages[0].content.push(createTextContent(message.content));\n      }\n\n      if (message.tool_calls) {\n        message.tool_calls.forEach((toolCall, index) => {\n          messages[0].content.push(\n            createToolCallContent(\n              index,\n              toolCall.id,\n              toolCall.function.name,\n              toolCall.function.arguments\n            )\n          );\n        });\n      }\n\n      let usage: ChatUsageType | undefined;\n      if (parsedResponse.usage) {\n        usage = {\n          promptTokens: parsedResponse.usage.prompt_tokens,\n          completionTokens: parsedResponse.usage.completion_tokens,\n          totalTokens: parsedResponse.usage.total_tokens,\n        };\n      }\n\n      const logProbs: ChatLogProbsType = [];\n      const _logProbs = parsedResponse.choices[0].logprobs;\n      if (_logProbs) {\n        _logProbs.tokens.forEach((token, index) => {\n          logProbs.push({\n            token: token,\n            logProb: _logProbs.token_logprobs[index],\n            bytes: null, // TODO: token_id is part of response, can be converted to bytes? or update ChatLogProbsType to include token_id\n            topLogProbs: [],\n          });\n        });\n      }\n\n      return {\n        messages: messages,\n        usage: usage,\n        logProbs: logProbs,\n      };\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.streamChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getStreamChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        stream: true,\n        stream_options: { include_usage: true },\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  async *transformStreamChatResponseChunk(\n    chunk: string,\n    buffer: string\n  ): AsyncGenerator<{ partialResponse: PartialChatResponseType; buffer: string }> {\n    // merge last buffer message and split into lines\n    const lines = (buffer + chunk).split(\"\\n\").filter((line) => line.trim() !== \"\");\n    for (const line of lines) {\n      if (line === \"data: [DONE]\") {\n        // end of stream\n        return;\n      } else if (line.startsWith(\"data: {\") && line.endsWith(\"}\")) {\n        // line contains message\n        let structuredLine: any;\n        try {\n          // remove the 'data :' prefix from string JSON\n          structuredLine = JSON.parse(line.substring(\"data: \".length));\n        } catch (error) {\n          // malformed JSON error\n          throw new ModelResponseError({\n            info: `Malformed JSON received in stream : ${structuredLine}`,\n            cause: error,\n          });\n        }\n\n        const safe = TogetherAIStreamChatResponse.safeParse(structuredLine);\n        if (safe.success) {\n          const partialResponse: PartialChatResponseType = { partialMessages: [] };\n          const parsedResponse: TogetherAIStreamChatResponseType = safe.data;\n          if (parsedResponse.choices.length > 0) {\n            const message = parsedResponse.choices[0].delta;\n            if (message !== undefined && Object.keys(message).length !== 0) {\n              if (\"content\" in message && message.content !== null) {\n                partialResponse.partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, message.content as string));\n              } else if (\"tool_calls\" in message && message.tool_calls) {\n                const toolCall = message.tool_calls.at(0)!;\n                partialResponse.partialMessages.push(\n                  createPartialToolCallMessage(\n                    AssistantRoleLiteral,\n                    toolCall.index,\n                    toolCall.id,\n                    toolCall.function?.name,\n                    toolCall.function?.arguments\n                  )\n                );\n              }\n            }\n          }\n\n          if (parsedResponse.usage) {\n            partialResponse.usage = {\n              promptTokens: parsedResponse.usage.prompt_tokens,\n              completionTokens: parsedResponse.usage.completion_tokens,\n              totalTokens: parsedResponse.usage.total_tokens,\n            };\n          }\n\n          yield { partialResponse: partialResponse, buffer: buffer };\n        } else {\n          throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n        }\n      } else {\n        // line starts with unknown event -- ignore\n      }\n    }\n  }\n}\n\nexport { BaseChatModel, BaseChatModelOptions, type BaseChatModelOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchemaType } from \"@adaline/provider\";\nimport { EmbeddingTextModalityLiteral } from \"@adaline/types\";\n\nconst TogetherAIEmbeddingModelModalities: EmbeddingModelSchemaType[\"modalities\"] = [EmbeddingTextModalityLiteral];\n\nconst TogetherAIEmbeddingModelModalitiesEnum = z.enum([EmbeddingTextModalityLiteral]);\n\nexport { TogetherAIEmbeddingModelModalitiesEnum, TogetherAIEmbeddingModelModalities };\n","import { z } from \"zod\";\n\nconst TogetherAIGetEmbeddingsResponse = z.object({\n  object: z.literal(\"list\"),\n  model: z.string(),\n  data: z.array(\n    z.object({\n      index: z.number(),\n      object: z.literal(\"embedding\"),\n      embedding: z.array(z.number()).or(z.string().base64()),\n    })\n  ),\n  usage: z\n    .object({\n      prompt_tokens: z.number().nonnegative(),\n      total_tokens: z.number().nonnegative(),\n    })\n    .optional(),\n});\n\nexport { TogetherAIGetEmbeddingsResponse };\n","import { z } from \"zod\";\n\nconst TogetherAIEmbeddingRequestInput = z\n  .string()\n  .min(1)\n  .or(z.array(z.string().min(1)).min(1));\ntype TogetherAIEmbeddingRequestInputType = z.infer<typeof TogetherAIEmbeddingRequestInput>;\n\nconst TogetherAIEmbeddingRequest = z.object({\n  model: z.string().min(1).optional(),\n  input: TogetherAIEmbeddingRequestInput,\n});\ntype TogetherAIEmbeddingRequestType = z.infer<typeof TogetherAIEmbeddingRequest>;\n\nexport {\n  TogetherAIEmbeddingRequest,\n  TogetherAIEmbeddingRequestInput,\n  type TogetherAIEmbeddingRequestType,\n  type TogetherAIEmbeddingRequestInputType,\n};\n","import { z } from \"zod\";\n\nimport {\n  EmbeddingModelSchemaType,\n  EmbeddingModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidEmbeddingRequestsError,\n  InvalidModelRequestError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  Config,\n  ConfigType,\n  EmbeddingRequests,\n  EmbeddingRequestsType,\n  EmbeddingResponseType,\n  EmbeddingTextModalityLiteral,\n  FloatEmbeddingLiteral,\n  FloatEmbeddingType,\n} from \"@adaline/types\";\n\nimport { TogetherAI } from \"../../provider/provider.together-ai\";\nimport { TogetherAIEmbeddingRequest, TogetherAIGetEmbeddingsResponse } from \"./types\";\n\nconst BaseEmbeddingModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n});\ntype BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;\n\nclass BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: EmbeddingModelSchemaType;\n\n  private readonly modelName: string;\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly getEmbeddingsUrl: string;\n\n  constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType) {\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(TogetherAI.baseUrl);\n    this.getEmbeddingsUrl = urlWithoutTrailingSlash(`${this.baseUrl}/embeddings`);\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      Authorization: `Bearer ${this.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelName,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    return { shouldRetry: true, delayMs: 0 };\n  }\n\n  getTokenCount(requests: EmbeddingRequestsType): number {\n    return requests.requests.reduce((acc, request) => acc + request.length, 0);\n  }\n\n  transformModelRequest(request: any): {\n    modelName: string | undefined;\n    config: ConfigType;\n    embeddingRequests: EmbeddingRequestsType;\n  } {\n    const safeRequest = TogetherAIEmbeddingRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    const _config = {};\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const embeddingRequests: EmbeddingRequestsType = {\n      modality: EmbeddingTextModalityLiteral,\n      requests: [...parsedRequest.input],\n    };\n\n    return {\n      modelName,\n      config,\n      embeddingRequests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType {\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    Object.keys(parsedConfig as ConfigType).forEach((key) => {\n      if (!this.modelSchema.config.def[key]) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = parsedConfig[key];\n      acc[paramKey] = paramValue;\n      return acc;\n    }, {} as ParamsType);\n\n    return transformedConfig;\n  }\n\n  transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType {\n    const _parsedRequests = EmbeddingRequests().safeParse(requests);\n    if (!_parsedRequests.success) {\n      throw new InvalidEmbeddingRequestsError({ info: \"Invalid embedding requests\", cause: _parsedRequests.error });\n    }\n\n    if (requests.modality !== EmbeddingTextModalityLiteral) {\n      throw new InvalidEmbeddingRequestsError({\n        info: `Invalid embedding requests for model : '${this.modelName}'`,\n        cause: new Error(`Only '${EmbeddingTextModalityLiteral}' modality is supported for model : '${this.modelName}'`),\n      });\n    }\n\n    const parsedRequests = _parsedRequests.data as EmbeddingRequestsType;\n    return {\n      input: parsedRequests.requests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.getEmbeddingsUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType> {\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...this.transformConfig(config, requests),\n        ...this.transformEmbeddingRequests(requests),\n      });\n    });\n  }\n\n  transformGetEmbeddingsResponse(response: any): EmbeddingResponseType {\n    const safe = TogetherAIGetEmbeddingsResponse.safeParse(response);\n    if (safe.success) {\n      const parsedResponse = safe.data;\n      const embeddings = parsedResponse.data.map((item) => {\n        return {\n          index: item.index,\n          embedding: item.embedding,\n        } as FloatEmbeddingType;\n      });\n\n      return {\n        encodingFormat: FloatEmbeddingLiteral,\n        embeddings: embeddings,\n        usage: {\n          totalTokens: parsedResponse.usage?.total_tokens,\n        },\n      } as EmbeddingResponseType;\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n}\n\nexport { BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { TogetherAIEmbeddingModelModalities, TogetherAIEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst BaseEmbeddingModelSchema = EmbeddingModelSchema(TogetherAIEmbeddingModelModalitiesEnum).parse({\n  name: \"__base__\",\n  description: \"Base embedding model for Together AI\",\n  maxInputTokens: 128000,\n  maxOutputTokens: 128000,\n  modalities: TogetherAIEmbeddingModelModalities,\n  config: {\n    def: {},\n    schema: z.object({}),\n  },\n});\n\nexport { BaseEmbeddingModelSchema };\n"]}