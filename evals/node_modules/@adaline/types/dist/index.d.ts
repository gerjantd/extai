import { z } from 'zod';

declare class GatewayBaseError extends Error {
    readonly name: string;
    readonly info: string;
    readonly cause: unknown;
    constructor({ info, cause }: {
        info: string;
        cause: unknown;
    }, name?: string);
    static isGatewayBaseError(error: unknown): error is GatewayBaseError;
    toJSON(): object;
}

declare const SystemRoleLiteral: "system";
declare const UserRoleLiteral: "user";
declare const AssistantRoleLiteral: "assistant";
declare const ToolRoleLiteral: "tool";
declare const RoleLiterals: readonly ["system", "user", "assistant", "tool"];
declare const RoleEnum: z.ZodEnum<["system", "user", "assistant", "tool"]>;
type RoleEnumType = z.infer<typeof RoleEnum>;
declare const PartialRoleLiterals: readonly ["assistant"];
declare const PartialRoleEnum: z.ZodEnum<["assistant"]>;
type PartialRoleEnumType = z.infer<typeof PartialRoleEnum>;

declare const Message: <R extends z.ZodEnum<[string, ...string[]]> = z.ZodEnum<["system", "user", "assistant", "tool"]>, TCM extends z.ZodTypeAny = z.ZodUndefined, ICM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined, RCM extends z.ZodTypeAny = z.ZodUndefined, MM extends z.ZodTypeAny = z.ZodUndefined>(Role?: R, TextContentMetadata?: TCM, ImageContentMetadata?: ICM, ToolCallContentMetadata?: CCM, ToolResponseContentMetadata?: RCM, MessageMetadata?: MM) => z.ZodObject<{
    role: R;
    content: z.ZodArray<z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>[k_1_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_3 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>[k_3]; }, { [k_1_2 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>[k_1_2]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }, "strip", z.ZodTypeAny, { [k_4 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>[k_4]; }, { [k_1_3 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>[k_1_3]; }>]>, "many">;
    metadata: MM;
}, "strip", z.ZodTypeAny, { [k_5 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    role: R;
    content: z.ZodArray<z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>[k_1_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_3 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>[k_3]; }, { [k_1_2 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>[k_1_2]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }, "strip", z.ZodTypeAny, { [k_4 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>[k_4]; }, { [k_1_3 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>[k_1_3]; }>]>, "many">;
    metadata: MM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    role: R;
    content: z.ZodArray<z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>[k_1_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_3 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>[k_3]; }, { [k_1_2 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>[k_1_2]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }, "strip", z.ZodTypeAny, { [k_4 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>[k_4]; }, { [k_1_3 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>[k_1_3]; }>]>, "many">;
    metadata: MM;
}>, any>[k_5]; }, { [k_1_4 in keyof z.baseObjectInputType<{
    role: R;
    content: z.ZodArray<z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>[k_1_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_3 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>[k_3]; }, { [k_1_2 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>[k_1_2]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }, "strip", z.ZodTypeAny, { [k_4 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>[k_4]; }, { [k_1_3 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>[k_1_3]; }>]>, "many">;
    metadata: MM;
}>]: z.baseObjectInputType<{
    role: R;
    content: z.ZodArray<z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"image">;
        detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
        value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"base64">;
            base64: z.ZodString;
            media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
        }, "strip", z.ZodTypeAny, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }, {
            type: "base64";
            base64: string;
            media_type: "png" | "jpeg" | "webp" | "gif";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"url">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "url";
            url: string;
        }, {
            type: "url";
            url: string;
        }>]>;
        metadata: ICM;
    }>[k_1_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_3 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>, any>[k_3]; }, { [k_1_2 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-call">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        arguments: z.ZodString;
        metadata: CCM;
    }>[k_1_2]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }, "strip", z.ZodTypeAny, { [k_4 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>, any>[k_4]; }, { [k_1_3 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"tool-response">;
        index: z.ZodNumber;
        id: z.ZodString;
        name: z.ZodString;
        data: z.ZodString;
        metadata: RCM;
    }>[k_1_3]; }>]>, "many">;
    metadata: MM;
}>[k_1_4]; }>;
type MessageType<R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum, TCM extends z.ZodTypeAny = z.ZodUndefined, ICM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined, RCM extends z.ZodTypeAny = z.ZodUndefined, MM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Message<R, TCM, ICM, CCM, RCM, MM>>>;
declare const PartialMessage: <R extends z.ZodEnum<[string, ...string[]]> = z.ZodEnum<["assistant"]>, TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined, MM extends z.ZodTypeAny = z.ZodUndefined>(Role?: R, TextContentMetadata?: TCM, ToolCallContentMetadata?: CCM, MessageMetadata?: MM) => z.ZodObject<{
    role: R;
    partialContent: z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>[k_1_1]; }>]>;
    metadata: MM;
}, "strip", z.ZodTypeAny, { [k_3 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    role: R;
    partialContent: z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>[k_1_1]; }>]>;
    metadata: MM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    role: R;
    partialContent: z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>[k_1_1]; }>]>;
    metadata: MM;
}>, any>[k_3]; }, { [k_1_2 in keyof z.baseObjectInputType<{
    role: R;
    partialContent: z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>[k_1_1]; }>]>;
    metadata: MM;
}>]: z.baseObjectInputType<{
    role: R;
    partialContent: z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-text">;
        value: z.ZodString;
        metadata: TCM;
    }>[k_1]; }>, z.ZodObject<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>]: z.baseObjectInputType<{
        modality: z.ZodLiteral<"partial-tool-call">;
        index: z.ZodNumber;
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
        arguments: z.ZodOptional<z.ZodString>;
        metadata: CCM;
    }>[k_1_1]; }>]>;
    metadata: MM;
}>[k_1_2]; }>;
type PartialMessageType<R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum, TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined, MM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialMessage<R, TCM, CCM, MM>>>;

declare const ModalityLiterals: readonly ["text", "image", "tool-call", "tool-response"];
declare const ModalityEnum: z.ZodEnum<["text", "image", "tool-call", "tool-response"]>;
type ModalityEnumType = z.infer<typeof ModalityEnum>;
declare const Content: <TCM extends z.ZodTypeAny = z.ZodUndefined, ICM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined, RCM extends z.ZodTypeAny = z.ZodUndefined>(TextContentMetadata?: TCM, ImageContentMetadata?: ICM, ToolCallContentMetadata?: CCM, ToolResponseContentMetadata?: RCM) => z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: TCM;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: TCM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: TCM;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: TCM;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: TCM;
}>[k_1]; }>, z.ZodObject<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: ICM;
}, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: ICM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: ICM;
}>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: ICM;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: ICM;
}>[k_1_1]; }>, z.ZodObject<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: CCM;
}, "strip", z.ZodTypeAny, { [k_3 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: CCM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: CCM;
}>, any>[k_3]; }, { [k_1_2 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: CCM;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: CCM;
}>[k_1_2]; }>, z.ZodObject<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: RCM;
}, "strip", z.ZodTypeAny, { [k_4 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: RCM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: RCM;
}>, any>[k_4]; }, { [k_1_3 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: RCM;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: RCM;
}>[k_1_3]; }>]>;
type ContentType<TCM extends z.ZodTypeAny = z.ZodUndefined, ICM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined, RCM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Content<TCM, ICM, CCM, RCM>>>;
declare const PartialModalityLiterals: readonly ["partial-text", "partial-tool-call"];
declare const PartialModalityEnum: z.ZodEnum<["partial-text", "partial-tool-call"]>;
type PartialModalityEnumType = z.infer<typeof PartialModalityEnum>;
declare const PartialContent: <TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined>(PartialTextContentMetadata?: TCM, PartialToolCallContentMetadata?: CCM) => z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: TCM;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: TCM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: TCM;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: TCM;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: TCM;
}>[k_1]; }>, z.ZodObject<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: CCM;
}, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: CCM;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: CCM;
}>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: CCM;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: CCM;
}>[k_1_1]; }>]>;
type PartialContentType<TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialContent<TCM, CCM>>>;

declare const ImageModalityLiteral: "image";
declare const Base64ImageContentTypeLiteral: "base64";
declare const Base64ImageContentMediaTypeLiterals: readonly ["png", "jpeg", "webp", "gif"];
declare const Base64ImageContentValue: z.ZodObject<{
    type: z.ZodLiteral<"base64">;
    base64: z.ZodString;
    media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
}, "strip", z.ZodTypeAny, {
    type: "base64";
    base64: string;
    media_type: "png" | "jpeg" | "webp" | "gif";
}, {
    type: "base64";
    base64: string;
    media_type: "png" | "jpeg" | "webp" | "gif";
}>;
type Base64ImageContentValueType = z.infer<typeof Base64ImageContentValue>;
declare const UrlImageContentTypeLiteral: "url";
declare const UrlImageContentValue: z.ZodObject<{
    type: z.ZodLiteral<"url">;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "url";
    url: string;
}, {
    type: "url";
    url: string;
}>;
type UrlImageContentValueType = z.infer<typeof UrlImageContentValue>;
declare const ImageContentValue: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"base64">;
    base64: z.ZodString;
    media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
}, "strip", z.ZodTypeAny, {
    type: "base64";
    base64: string;
    media_type: "png" | "jpeg" | "webp" | "gif";
}, {
    type: "base64";
    base64: string;
    media_type: "png" | "jpeg" | "webp" | "gif";
}>, z.ZodObject<{
    type: z.ZodLiteral<"url">;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "url";
    url: string;
}, {
    type: "url";
    url: string;
}>]>;
type ImageContentValueType = z.infer<typeof ImageContentValue>;
declare const ImageContentDetails: readonly ["low", "medium", "high", "auto"];
declare const ImageContentDetailsLiteral: z.ZodEnum<["low", "medium", "high", "auto"]>;
type ImageContentDetailsLiteralType = z.infer<typeof ImageContentDetailsLiteral>;
declare const ImageContent: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodObject<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: M;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: M;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: M;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: M;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"image">;
    detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
    value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"base64">;
        base64: z.ZodString;
        media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
    }, "strip", z.ZodTypeAny, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }, {
        type: "base64";
        base64: string;
        media_type: "png" | "jpeg" | "webp" | "gif";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"url">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "url";
        url: string;
    }, {
        type: "url";
        url: string;
    }>]>;
    metadata: M;
}>[k_1]; }>;
type ImageContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ImageContent<M>>>;

declare const TextModalityLiteral: "text";
declare const TextContent: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodObject<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: M;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: M;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: M;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: M;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"text">;
    value: z.ZodString;
    metadata: M;
}>[k_1]; }>;
type TextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TextContent<M>>>;
declare const PartialTextModalityLiteral: "partial-text";
declare const PartialTextContent: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodObject<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: M;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: M;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: M;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: M;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-text">;
    value: z.ZodString;
    metadata: M;
}>[k_1]; }>;
type PartialTextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialTextContent<M>>>;

declare const TokenModalityLiteral: "token";
declare const TokenContent: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodObject<{
    modality: z.ZodLiteral<"token">;
    value: z.ZodArray<z.ZodNumber, "many">;
    metadata: M;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"token">;
    value: z.ZodArray<z.ZodNumber, "many">;
    metadata: M;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"token">;
    value: z.ZodArray<z.ZodNumber, "many">;
    metadata: M;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"token">;
    value: z.ZodArray<z.ZodNumber, "many">;
    metadata: M;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"token">;
    value: z.ZodArray<z.ZodNumber, "many">;
    metadata: M;
}>[k_1]; }>;
type TokenContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TokenContent<M>>>;

declare const ToolCallModalityLiteral: "tool-call";
declare const ToolCallContent: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodObject<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: M;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: M;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: M;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: M;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-call">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    arguments: z.ZodString;
    metadata: M;
}>[k_1]; }>;
type ToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolCallContent<M>>>;
declare const PartialToolCallModalityLiteral: "partial-tool-call";
declare const PartialToolCallContent: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodObject<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: M;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: M;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: M;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: M;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"partial-tool-call">;
    index: z.ZodNumber;
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    arguments: z.ZodOptional<z.ZodString>;
    metadata: M;
}>[k_1]; }>;
type PartialToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialToolCallContent<M>>>;

declare const ToolResponseModalityLiteral: "tool-response";
declare const ToolResponseContent: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodObject<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: M;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: M;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: M;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: M;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"tool-response">;
    index: z.ZodNumber;
    id: z.ZodString;
    name: z.ZodString;
    data: z.ZodString;
    metadata: M;
}>[k_1]; }>;
type ToolResponseContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolResponseContent<M>>>;

declare const createTextContent: (content: string) => ContentType;
declare const createToolCallContent: (index: number, id: string, name: string, args: string) => ContentType;
declare const createTextMessage: (role: RoleEnumType, content: string) => MessageType;
declare const createUrlImageMessage: (role: RoleEnumType, url: string, detail: ImageContentDetailsLiteralType) => MessageType;
declare const createBase64ImageMessage: (role: RoleEnumType, base64: string, detail: ImageContentDetailsLiteralType) => MessageType;
declare const createToolCallMessage: (role: RoleEnumType, index: number, id: string, name: string, args: string) => MessageType;
declare const createToolResponseMessage: (role: RoleEnumType, index: number, id: string, name: string, data: string) => MessageType;
declare const createPartialTextMessage: (role: RoleEnumType, content: string) => PartialMessageType;
declare const createPartialToolCallMessage: (role: RoleEnumType, index: number, id?: string, name?: string, args?: string) => PartialMessageType;

declare const mergePartialMessages: (messages: MessageType[], partialMessages: PartialMessageType[]) => MessageType[];

declare const Config: <C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>>(Config?: C) => C;
type ConfigType<C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>> = z.infer<ReturnType<typeof Config<C>>>;

declare const ResponseSchemaTypes: readonly ["object", "array", "number", "string", "boolean", "enum"];
declare const ResponseSchemaTypesLiteral: z.ZodEnum<["object", "array", "number", "string", "boolean", "enum"]>;
type ResponseSchemaTypesType = z.infer<typeof ResponseSchemaTypesLiteral>;
declare const ResponseSchemaProperty: z.ZodObject<{
    anyOf: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    type: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["object", "array", "number", "string", "boolean", "enum"]>, z.ZodArray<z.ZodUnion<[z.ZodEnum<["object", "array", "number", "string", "boolean", "enum"]>, z.ZodLiteral<"null">]>, "many">]>>;
    default: z.ZodOptional<z.ZodAny>;
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    minItems: z.ZodOptional<z.ZodNumber>;
    maxItems: z.ZodOptional<z.ZodNumber>;
    items: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    enum: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>, "many">>;
    minimum: z.ZodOptional<z.ZodNumber>;
    maximum: z.ZodOptional<z.ZodNumber>;
    minLength: z.ZodOptional<z.ZodNumber>;
    maxLength: z.ZodOptional<z.ZodNumber>;
    $ref: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    minimum?: number | undefined;
    type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
    maximum?: number | undefined;
    default?: any;
    enum?: (string | number | boolean | null)[] | undefined;
    anyOf?: any[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    properties?: Record<string, any> | undefined;
    required?: string[] | undefined;
    minItems?: number | undefined;
    maxItems?: number | undefined;
    items?: Record<string, any> | undefined;
    minLength?: number | undefined;
    maxLength?: number | undefined;
    $ref?: string | undefined;
}, {
    minimum?: number | undefined;
    type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
    maximum?: number | undefined;
    default?: any;
    enum?: (string | number | boolean | null)[] | undefined;
    anyOf?: any[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    properties?: Record<string, any> | undefined;
    required?: string[] | undefined;
    minItems?: number | undefined;
    maxItems?: number | undefined;
    items?: Record<string, any> | undefined;
    minLength?: number | undefined;
    maxLength?: number | undefined;
    $ref?: string | undefined;
}>;
type ResponseSchemaPropertyType = z.infer<typeof ResponseSchemaProperty>;
declare const ResponseSchemaStructure: z.ZodObject<{
    type: z.ZodEnum<["object"]>;
    required: z.ZodArray<z.ZodString, "many">;
    $defs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    properties: z.ZodRecord<z.ZodString, z.ZodObject<{
        anyOf: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
        type: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["object", "array", "number", "string", "boolean", "enum"]>, z.ZodArray<z.ZodUnion<[z.ZodEnum<["object", "array", "number", "string", "boolean", "enum"]>, z.ZodLiteral<"null">]>, "many">]>>;
        default: z.ZodOptional<z.ZodAny>;
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        minItems: z.ZodOptional<z.ZodNumber>;
        maxItems: z.ZodOptional<z.ZodNumber>;
        items: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        enum: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>, "many">>;
        minimum: z.ZodOptional<z.ZodNumber>;
        maximum: z.ZodOptional<z.ZodNumber>;
        minLength: z.ZodOptional<z.ZodNumber>;
        maxLength: z.ZodOptional<z.ZodNumber>;
        $ref: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        $ref?: string | undefined;
    }, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        $ref?: string | undefined;
    }>>;
    additionalProperties: z.ZodLiteral<false>;
}, "strip", z.ZodTypeAny, {
    type: "object";
    properties: Record<string, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        $ref?: string | undefined;
    }>;
    required: string[];
    additionalProperties: false;
    $defs?: Record<string, any> | undefined;
}, {
    type: "object";
    properties: Record<string, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        $ref?: string | undefined;
    }>;
    required: string[];
    additionalProperties: false;
    $defs?: Record<string, any> | undefined;
}>;
type ResponseSchemaStructureType = z.infer<typeof ResponseSchemaStructure>;
declare const ResponseSchema: z.ZodOptional<z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    strict: z.ZodOptional<z.ZodBoolean>;
    schema: z.ZodObject<{
        type: z.ZodEnum<["object"]>;
        required: z.ZodArray<z.ZodString, "many">;
        $defs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        properties: z.ZodRecord<z.ZodString, z.ZodObject<{
            anyOf: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
            type: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["object", "array", "number", "string", "boolean", "enum"]>, z.ZodArray<z.ZodUnion<[z.ZodEnum<["object", "array", "number", "string", "boolean", "enum"]>, z.ZodLiteral<"null">]>, "many">]>>;
            default: z.ZodOptional<z.ZodAny>;
            title: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            minItems: z.ZodOptional<z.ZodNumber>;
            maxItems: z.ZodOptional<z.ZodNumber>;
            items: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
            enum: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>, "many">>;
            minimum: z.ZodOptional<z.ZodNumber>;
            maximum: z.ZodOptional<z.ZodNumber>;
            minLength: z.ZodOptional<z.ZodNumber>;
            maxLength: z.ZodOptional<z.ZodNumber>;
            $ref: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            minimum?: number | undefined;
            type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
            maximum?: number | undefined;
            default?: any;
            enum?: (string | number | boolean | null)[] | undefined;
            anyOf?: any[] | undefined;
            title?: string | undefined;
            description?: string | undefined;
            properties?: Record<string, any> | undefined;
            required?: string[] | undefined;
            minItems?: number | undefined;
            maxItems?: number | undefined;
            items?: Record<string, any> | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            $ref?: string | undefined;
        }, {
            minimum?: number | undefined;
            type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
            maximum?: number | undefined;
            default?: any;
            enum?: (string | number | boolean | null)[] | undefined;
            anyOf?: any[] | undefined;
            title?: string | undefined;
            description?: string | undefined;
            properties?: Record<string, any> | undefined;
            required?: string[] | undefined;
            minItems?: number | undefined;
            maxItems?: number | undefined;
            items?: Record<string, any> | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            $ref?: string | undefined;
        }>>;
        additionalProperties: z.ZodLiteral<false>;
    }, "strip", z.ZodTypeAny, {
        type: "object";
        properties: Record<string, {
            minimum?: number | undefined;
            type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
            maximum?: number | undefined;
            default?: any;
            enum?: (string | number | boolean | null)[] | undefined;
            anyOf?: any[] | undefined;
            title?: string | undefined;
            description?: string | undefined;
            properties?: Record<string, any> | undefined;
            required?: string[] | undefined;
            minItems?: number | undefined;
            maxItems?: number | undefined;
            items?: Record<string, any> | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            $ref?: string | undefined;
        }>;
        required: string[];
        additionalProperties: false;
        $defs?: Record<string, any> | undefined;
    }, {
        type: "object";
        properties: Record<string, {
            minimum?: number | undefined;
            type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
            maximum?: number | undefined;
            default?: any;
            enum?: (string | number | boolean | null)[] | undefined;
            anyOf?: any[] | undefined;
            title?: string | undefined;
            description?: string | undefined;
            properties?: Record<string, any> | undefined;
            required?: string[] | undefined;
            minItems?: number | undefined;
            maxItems?: number | undefined;
            items?: Record<string, any> | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            $ref?: string | undefined;
        }>;
        required: string[];
        additionalProperties: false;
        $defs?: Record<string, any> | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    schema: {
        type: "object";
        properties: Record<string, {
            minimum?: number | undefined;
            type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
            maximum?: number | undefined;
            default?: any;
            enum?: (string | number | boolean | null)[] | undefined;
            anyOf?: any[] | undefined;
            title?: string | undefined;
            description?: string | undefined;
            properties?: Record<string, any> | undefined;
            required?: string[] | undefined;
            minItems?: number | undefined;
            maxItems?: number | undefined;
            items?: Record<string, any> | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            $ref?: string | undefined;
        }>;
        required: string[];
        additionalProperties: false;
        $defs?: Record<string, any> | undefined;
    };
    strict?: boolean | undefined;
}, {
    name: string;
    description: string;
    schema: {
        type: "object";
        properties: Record<string, {
            minimum?: number | undefined;
            type?: "string" | "number" | "boolean" | "object" | "array" | "enum" | ("string" | "number" | "boolean" | "object" | "null" | "array" | "enum")[] | undefined;
            maximum?: number | undefined;
            default?: any;
            enum?: (string | number | boolean | null)[] | undefined;
            anyOf?: any[] | undefined;
            title?: string | undefined;
            description?: string | undefined;
            properties?: Record<string, any> | undefined;
            required?: string[] | undefined;
            minItems?: number | undefined;
            maxItems?: number | undefined;
            items?: Record<string, any> | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            $ref?: string | undefined;
        }>;
        required: string[];
        additionalProperties: false;
        $defs?: Record<string, any> | undefined;
    };
    strict?: boolean | undefined;
}>>;
type ResponseSchemaType = z.infer<typeof ResponseSchema>;

declare const FunctionToolLiteral: "function";
declare const FunctionParameterTypes: string[];
declare const FunctionParameterTypesLiteral: z.ZodEnum<["object", "array", "number", "string", "boolean", "null"]>;
type FunctionParameterTypesType = z.infer<typeof FunctionParameterTypesLiteral>;
declare const FunctionParameter: z.ZodObject<{
    anyOf: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
    type: z.ZodOptional<z.ZodEnum<["object", "array", "number", "string", "boolean", "null"]>>;
    default: z.ZodOptional<z.ZodAny>;
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    minItems: z.ZodOptional<z.ZodNumber>;
    maxItems: z.ZodOptional<z.ZodNumber>;
    items: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    enum: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>, "many">>;
    minimum: z.ZodOptional<z.ZodNumber>;
    maximum: z.ZodOptional<z.ZodNumber>;
    minLength: z.ZodOptional<z.ZodNumber>;
    maxLength: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    minimum?: number | undefined;
    type?: "string" | "number" | "boolean" | "object" | "null" | "array" | undefined;
    maximum?: number | undefined;
    default?: any;
    enum?: (string | number | boolean | null)[] | undefined;
    anyOf?: any[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    properties?: Record<string, any> | undefined;
    required?: string[] | undefined;
    minItems?: number | undefined;
    maxItems?: number | undefined;
    items?: Record<string, any> | undefined;
    minLength?: number | undefined;
    maxLength?: number | undefined;
}, {
    minimum?: number | undefined;
    type?: "string" | "number" | "boolean" | "object" | "null" | "array" | undefined;
    maximum?: number | undefined;
    default?: any;
    enum?: (string | number | boolean | null)[] | undefined;
    anyOf?: any[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    properties?: Record<string, any> | undefined;
    required?: string[] | undefined;
    minItems?: number | undefined;
    maxItems?: number | undefined;
    items?: Record<string, any> | undefined;
    minLength?: number | undefined;
    maxLength?: number | undefined;
}>;
type FunctionParameterType = z.infer<typeof FunctionParameter>;
declare const FunctionParameters: z.ZodObject<{
    type: z.ZodEnum<["object"]>;
    title: z.ZodOptional<z.ZodString>;
    $defs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        anyOf: z.ZodOptional<z.ZodArray<z.ZodAny, "many">>;
        type: z.ZodOptional<z.ZodEnum<["object", "array", "number", "string", "boolean", "null"]>>;
        default: z.ZodOptional<z.ZodAny>;
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        minItems: z.ZodOptional<z.ZodNumber>;
        maxItems: z.ZodOptional<z.ZodNumber>;
        items: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        enum: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>, "many">>;
        minimum: z.ZodOptional<z.ZodNumber>;
        maximum: z.ZodOptional<z.ZodNumber>;
        minLength: z.ZodOptional<z.ZodNumber>;
        maxLength: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "null" | "array" | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "null" | "array" | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }>>>;
    required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    type: "object";
    title?: string | undefined;
    properties?: Record<string, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "null" | "array" | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }> | undefined;
    required?: string[] | undefined;
    $defs?: Record<string, any> | undefined;
}, {
    type: "object";
    title?: string | undefined;
    properties?: Record<string, {
        minimum?: number | undefined;
        type?: "string" | "number" | "boolean" | "object" | "null" | "array" | undefined;
        maximum?: number | undefined;
        default?: any;
        enum?: (string | number | boolean | null)[] | undefined;
        anyOf?: any[] | undefined;
        title?: string | undefined;
        description?: string | undefined;
        properties?: Record<string, any> | undefined;
        required?: string[] | undefined;
        minItems?: number | undefined;
        maxItems?: number | undefined;
        items?: Record<string, any> | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }> | undefined;
    required?: string[] | undefined;
    $defs?: Record<string, any> | undefined;
}>;
type FunctionParametersType = z.infer<typeof FunctionParameters>;
declare const Function: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    parameters: z.ZodAny;
    strict: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    description: string;
    strict?: boolean | undefined;
    parameters?: any;
}, {
    name: string;
    description: string;
    strict?: boolean | undefined;
    parameters?: any;
}>;
type FunctionType = z.infer<typeof Function>;
declare const ToolTypes: string[];
declare const ToolTypesLiteral: z.ZodEnum<["function"]>;
type ToolTypesType = z.infer<typeof ToolTypesLiteral>;
declare const FunctionTool: z.ZodObject<{
    type: z.ZodEnum<["function"]>;
    definition: z.ZodObject<{
        schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            parameters: z.ZodAny;
            strict: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "function";
    definition: {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    };
}, {
    type: "function";
    definition: {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    };
}>;
type FunctionToolType = z.infer<typeof FunctionTool>;

declare const ToolLiterals: readonly ["function"];
declare const ToolEnum: z.ZodEnum<["function"]>;
type ToolEnumType = z.infer<typeof ToolEnum>;
declare const Tool: <FTM extends z.ZodTypeAny>(FunctionToolMetadata?: FTM) => z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
    type: z.ZodEnum<["function"]>;
    definition: z.ZodObject<{
        schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            parameters: z.ZodAny;
            strict: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }>;
}, {
    metadata: FTM;
}>, "strip", z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    type: z.ZodEnum<["function"]>;
    definition: z.ZodObject<{
        schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            parameters: z.ZodAny;
            strict: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }>;
}, {
    metadata: FTM;
}>>, any> extends infer T ? { [k in keyof T]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<z.objectUtil.extendShape<{
    type: z.ZodEnum<["function"]>;
    definition: z.ZodObject<{
        schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            parameters: z.ZodAny;
            strict: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }>;
}, {
    metadata: FTM;
}>>, any>[k]; } : never, z.baseObjectInputType<z.objectUtil.extendShape<{
    type: z.ZodEnum<["function"]>;
    definition: z.ZodObject<{
        schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            parameters: z.ZodAny;
            strict: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }>;
}, {
    metadata: FTM;
}>> extends infer T_1 ? { [k_1 in keyof T_1]: z.baseObjectInputType<z.objectUtil.extendShape<{
    type: z.ZodEnum<["function"]>;
    definition: z.ZodObject<{
        schema: z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            parameters: z.ZodAny;
            strict: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }, {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        }>;
    }, "strip", z.ZodTypeAny, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }, {
        schema: {
            name: string;
            description: string;
            strict?: boolean | undefined;
            parameters?: any;
        };
    }>;
}, {
    metadata: FTM;
}>>[k_1]; } : never>]>;
type ToolType<FTM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Tool<FTM>>>;

declare const EmbeddingTextModalityLiteral: "text";
declare const EmbeddingTokenModalityLiteral: "token";
declare const EmbeddingModalityLiterals: readonly ["text", "token"];
declare const EmbeddingModalityEnum: z.ZodEnum<["text", "token"]>;
type EmbeddingModalityEnumType = z.infer<typeof EmbeddingModalityEnum>;
declare const TextEmbeddingRequests: z.ZodArray<z.ZodString, "many">;
type TextEmbeddingRequestsType = z.infer<typeof TextEmbeddingRequests>;
declare const TokenEmbeddingRequests: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
type TokenEmbeddingRequestsType = z.infer<typeof TokenEmbeddingRequests>;
declare const EmbeddingRequests: <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata?: M) => z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
    modality: z.ZodLiteral<"text">;
    metadata: M;
    requests: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, { [k in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"text">;
    metadata: M;
    requests: z.ZodArray<z.ZodString, "many">;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"text">;
    metadata: M;
    requests: z.ZodArray<z.ZodString, "many">;
}>, any>[k]; }, { [k_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"text">;
    metadata: M;
    requests: z.ZodArray<z.ZodString, "many">;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"text">;
    metadata: M;
    requests: z.ZodArray<z.ZodString, "many">;
}>[k_1]; }>, z.ZodObject<{
    modality: z.ZodLiteral<"token">;
    metadata: M;
    requests: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
}, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"token">;
    metadata: M;
    requests: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
}>, any>]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<{
    modality: z.ZodLiteral<"token">;
    metadata: M;
    requests: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
}>, any>[k_2]; }, { [k_1_1 in keyof z.baseObjectInputType<{
    modality: z.ZodLiteral<"token">;
    metadata: M;
    requests: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
}>]: z.baseObjectInputType<{
    modality: z.ZodLiteral<"token">;
    metadata: M;
    requests: z.ZodArray<z.ZodArray<z.ZodNumber, "many">, "many">;
}>[k_1_1]; }>]>;
type EmbeddingRequestsType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof EmbeddingRequests<M>>>;

declare const FloatEmbeddingLiteral: "float";
declare const FloatEmbedding: z.ZodObject<{
    index: z.ZodNumber;
    embedding: z.ZodArray<z.ZodNumber, "many">;
}, "strip", z.ZodTypeAny, {
    index: number;
    embedding: number[];
}, {
    index: number;
    embedding: number[];
}>;
type FloatEmbeddingType = z.infer<typeof FloatEmbedding>;
declare const Base64EmbeddingLiteral: "base64";
declare const Base64Embedding: z.ZodObject<{
    index: z.ZodNumber;
    embedding: z.ZodString;
}, "strip", z.ZodTypeAny, {
    index: number;
    embedding: string;
}, {
    index: number;
    embedding: string;
}>;
type Base64EmbeddingType = z.infer<typeof Base64Embedding>;
declare const EmbeddingsUsage: z.ZodObject<{
    totalTokens: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    totalTokens: number;
}, {
    totalTokens: number;
}>;
type EmbeddingsUsageType = z.infer<typeof EmbeddingsUsage>;
declare const EmbeddingResponse: z.ZodDiscriminatedUnion<"encodingFormat", [z.ZodObject<{
    encodingFormat: z.ZodLiteral<"float">;
    embeddings: z.ZodArray<z.ZodObject<{
        index: z.ZodNumber;
        embedding: z.ZodArray<z.ZodNumber, "many">;
    }, "strip", z.ZodTypeAny, {
        index: number;
        embedding: number[];
    }, {
        index: number;
        embedding: number[];
    }>, "many">;
    usage: z.ZodOptional<z.ZodObject<{
        totalTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokens: number;
    }, {
        totalTokens: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    encodingFormat: "float";
    embeddings: {
        index: number;
        embedding: number[];
    }[];
    usage?: {
        totalTokens: number;
    } | undefined;
}, {
    encodingFormat: "float";
    embeddings: {
        index: number;
        embedding: number[];
    }[];
    usage?: {
        totalTokens: number;
    } | undefined;
}>, z.ZodObject<{
    encodingFormat: z.ZodLiteral<"base64">;
    embeddings: z.ZodArray<z.ZodObject<{
        index: z.ZodNumber;
        embedding: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        index: number;
        embedding: string;
    }, {
        index: number;
        embedding: string;
    }>, "many">;
    usage: z.ZodOptional<z.ZodObject<{
        totalTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokens: number;
    }, {
        totalTokens: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    encodingFormat: "base64";
    embeddings: {
        index: number;
        embedding: string;
    }[];
    usage?: {
        totalTokens: number;
    } | undefined;
}, {
    encodingFormat: "base64";
    embeddings: {
        index: number;
        embedding: string;
    }[];
    usage?: {
        totalTokens: number;
    } | undefined;
}>]>;
type EmbeddingResponseType = z.infer<typeof EmbeddingResponse>;

declare const ChatUsage: z.ZodObject<{
    promptTokens: z.ZodNumber;
    completionTokens: z.ZodNumber;
    totalTokens: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    totalTokens: number;
    promptTokens: number;
    completionTokens: number;
}, {
    totalTokens: number;
    promptTokens: number;
    completionTokens: number;
}>;
type ChatUsageType = z.infer<typeof ChatUsage>;
declare const ChatBaseLogProb: z.ZodObject<{
    token: z.ZodString;
    logProb: z.ZodNumber;
    bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
}, "strip", z.ZodTypeAny, {
    token: string;
    logProb: number;
    bytes: number[] | null;
}, {
    token: string;
    logProb: number;
    bytes: number[] | null;
}>;
type ChatBaseLogProbType = z.infer<typeof ChatBaseLogProb>;
declare const ChatLogProb: z.ZodObject<z.objectUtil.extendShape<{
    token: z.ZodString;
    logProb: z.ZodNumber;
    bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
}, {
    topLogProbs: z.ZodArray<z.ZodObject<{
        token: z.ZodString;
        logProb: z.ZodNumber;
        bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }, {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }>, "many">;
}>, "strip", z.ZodTypeAny, {
    token: string;
    logProb: number;
    bytes: number[] | null;
    topLogProbs: {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }[];
}, {
    token: string;
    logProb: number;
    bytes: number[] | null;
    topLogProbs: {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }[];
}>;
type ChatLogProbType = z.infer<typeof ChatLogProb>;
declare const ChatLogProbs: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
    token: z.ZodString;
    logProb: z.ZodNumber;
    bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
}, {
    topLogProbs: z.ZodArray<z.ZodObject<{
        token: z.ZodString;
        logProb: z.ZodNumber;
        bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }, {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }>, "many">;
}>, "strip", z.ZodTypeAny, {
    token: string;
    logProb: number;
    bytes: number[] | null;
    topLogProbs: {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }[];
}, {
    token: string;
    logProb: number;
    bytes: number[] | null;
    topLogProbs: {
        token: string;
        logProb: number;
        bytes: number[] | null;
    }[];
}>, "many">;
type ChatLogProbsType = z.infer<typeof ChatLogProbs>;
declare const ChatResponse: z.ZodObject<{
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["system", "user", "assistant", "tool"]>;
        content: z.ZodArray<z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
            modality: z.ZodLiteral<"text">;
            value: z.ZodString;
            metadata: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            value: string;
            modality: "text";
            metadata?: undefined;
        }, {
            value: string;
            modality: "text";
            metadata?: undefined;
        }>, z.ZodObject<{
            modality: z.ZodLiteral<"image">;
            detail: z.ZodEnum<["low", "medium", "high", "auto"]>;
            value: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"base64">;
                base64: z.ZodString;
                media_type: z.ZodEnum<["png", "jpeg", "webp", "gif"]>;
            }, "strip", z.ZodTypeAny, {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            }, {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"url">;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "url";
                url: string;
            }, {
                type: "url";
                url: string;
            }>]>;
            metadata: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            value: {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            } | {
                type: "url";
                url: string;
            };
            modality: "image";
            detail: "low" | "medium" | "high" | "auto";
            metadata?: undefined;
        }, {
            value: {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            } | {
                type: "url";
                url: string;
            };
            modality: "image";
            detail: "low" | "medium" | "high" | "auto";
            metadata?: undefined;
        }>, z.ZodObject<{
            modality: z.ZodLiteral<"tool-call">;
            index: z.ZodNumber;
            id: z.ZodString;
            name: z.ZodString;
            arguments: z.ZodString;
            metadata: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            name: string;
            modality: "tool-call";
            index: number;
            id: string;
            arguments: string;
            metadata?: undefined;
        }, {
            name: string;
            modality: "tool-call";
            index: number;
            id: string;
            arguments: string;
            metadata?: undefined;
        }>, z.ZodObject<{
            modality: z.ZodLiteral<"tool-response">;
            index: z.ZodNumber;
            id: z.ZodString;
            name: z.ZodString;
            data: z.ZodString;
            metadata: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            name: string;
            modality: "tool-response";
            index: number;
            id: string;
            data: string;
            metadata?: undefined;
        }, {
            name: string;
            modality: "tool-response";
            index: number;
            id: string;
            data: string;
            metadata?: undefined;
        }>]>, "many">;
        metadata: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        role: "system" | "user" | "assistant" | "tool";
        content: ({
            value: string;
            modality: "text";
            metadata?: undefined;
        } | {
            value: {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            } | {
                type: "url";
                url: string;
            };
            modality: "image";
            detail: "low" | "medium" | "high" | "auto";
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-call";
            index: number;
            id: string;
            arguments: string;
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-response";
            index: number;
            id: string;
            data: string;
            metadata?: undefined;
        })[];
        metadata?: undefined;
    }, {
        role: "system" | "user" | "assistant" | "tool";
        content: ({
            value: string;
            modality: "text";
            metadata?: undefined;
        } | {
            value: {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            } | {
                type: "url";
                url: string;
            };
            modality: "image";
            detail: "low" | "medium" | "high" | "auto";
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-call";
            index: number;
            id: string;
            arguments: string;
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-response";
            index: number;
            id: string;
            data: string;
            metadata?: undefined;
        })[];
        metadata?: undefined;
    }>, "many">;
    usage: z.ZodOptional<z.ZodObject<{
        promptTokens: z.ZodNumber;
        completionTokens: z.ZodNumber;
        totalTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    }, {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    }>>;
    logProbs: z.ZodOptional<z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        token: z.ZodString;
        logProb: z.ZodNumber;
        bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
    }, {
        topLogProbs: z.ZodArray<z.ZodObject<{
            token: z.ZodString;
            logProb: z.ZodNumber;
            bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }, {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }>, "many">;
    }>, "strip", z.ZodTypeAny, {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }, {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    messages: {
        role: "system" | "user" | "assistant" | "tool";
        content: ({
            value: string;
            modality: "text";
            metadata?: undefined;
        } | {
            value: {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            } | {
                type: "url";
                url: string;
            };
            modality: "image";
            detail: "low" | "medium" | "high" | "auto";
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-call";
            index: number;
            id: string;
            arguments: string;
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-response";
            index: number;
            id: string;
            data: string;
            metadata?: undefined;
        })[];
        metadata?: undefined;
    }[];
    usage?: {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    } | undefined;
    logProbs?: {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }[] | undefined;
}, {
    messages: {
        role: "system" | "user" | "assistant" | "tool";
        content: ({
            value: string;
            modality: "text";
            metadata?: undefined;
        } | {
            value: {
                type: "base64";
                base64: string;
                media_type: "png" | "jpeg" | "webp" | "gif";
            } | {
                type: "url";
                url: string;
            };
            modality: "image";
            detail: "low" | "medium" | "high" | "auto";
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-call";
            index: number;
            id: string;
            arguments: string;
            metadata?: undefined;
        } | {
            name: string;
            modality: "tool-response";
            index: number;
            id: string;
            data: string;
            metadata?: undefined;
        })[];
        metadata?: undefined;
    }[];
    usage?: {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    } | undefined;
    logProbs?: {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }[] | undefined;
}>;
type ChatResponseType = z.infer<typeof ChatResponse>;
declare const PartialChatResponse: z.ZodObject<{
    partialMessages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["assistant"]>;
        partialContent: z.ZodDiscriminatedUnion<"modality", [z.ZodObject<{
            modality: z.ZodLiteral<"partial-text">;
            value: z.ZodString;
            metadata: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            value: string;
            modality: "partial-text";
            metadata?: undefined;
        }, {
            value: string;
            modality: "partial-text";
            metadata?: undefined;
        }>, z.ZodObject<{
            modality: z.ZodLiteral<"partial-tool-call">;
            index: z.ZodNumber;
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
            arguments: z.ZodOptional<z.ZodString>;
            metadata: z.ZodUndefined;
        }, "strip", z.ZodTypeAny, {
            modality: "partial-tool-call";
            index: number;
            name?: string | undefined;
            metadata?: undefined;
            id?: string | undefined;
            arguments?: string | undefined;
        }, {
            modality: "partial-tool-call";
            index: number;
            name?: string | undefined;
            metadata?: undefined;
            id?: string | undefined;
            arguments?: string | undefined;
        }>]>;
        metadata: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        role: "assistant";
        partialContent: {
            value: string;
            modality: "partial-text";
            metadata?: undefined;
        } | {
            modality: "partial-tool-call";
            index: number;
            name?: string | undefined;
            metadata?: undefined;
            id?: string | undefined;
            arguments?: string | undefined;
        };
        metadata?: undefined;
    }, {
        role: "assistant";
        partialContent: {
            value: string;
            modality: "partial-text";
            metadata?: undefined;
        } | {
            modality: "partial-tool-call";
            index: number;
            name?: string | undefined;
            metadata?: undefined;
            id?: string | undefined;
            arguments?: string | undefined;
        };
        metadata?: undefined;
    }>, "many">;
    usage: z.ZodOptional<z.ZodObject<{
        promptTokens: z.ZodNumber;
        completionTokens: z.ZodNumber;
        totalTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    }, {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    }>>;
    logProbs: z.ZodOptional<z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        token: z.ZodString;
        logProb: z.ZodNumber;
        bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
    }, {
        topLogProbs: z.ZodArray<z.ZodObject<{
            token: z.ZodString;
            logProb: z.ZodNumber;
            bytes: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }, {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }>, "many">;
    }>, "strip", z.ZodTypeAny, {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }, {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    partialMessages: {
        role: "assistant";
        partialContent: {
            value: string;
            modality: "partial-text";
            metadata?: undefined;
        } | {
            modality: "partial-tool-call";
            index: number;
            name?: string | undefined;
            metadata?: undefined;
            id?: string | undefined;
            arguments?: string | undefined;
        };
        metadata?: undefined;
    }[];
    usage?: {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    } | undefined;
    logProbs?: {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }[] | undefined;
}, {
    partialMessages: {
        role: "assistant";
        partialContent: {
            value: string;
            modality: "partial-text";
            metadata?: undefined;
        } | {
            modality: "partial-tool-call";
            index: number;
            name?: string | undefined;
            metadata?: undefined;
            id?: string | undefined;
            arguments?: string | undefined;
        };
        metadata?: undefined;
    }[];
    usage?: {
        totalTokens: number;
        promptTokens: number;
        completionTokens: number;
    } | undefined;
    logProbs?: {
        token: string;
        logProb: number;
        bytes: number[] | null;
        topLogProbs: {
            token: string;
            logProb: number;
            bytes: number[] | null;
        }[];
    }[] | undefined;
}>;
type PartialChatResponseType = z.infer<typeof PartialChatResponse>;

export { AssistantRoleLiteral, Base64Embedding, Base64EmbeddingLiteral, type Base64EmbeddingType, Base64ImageContentMediaTypeLiterals, Base64ImageContentTypeLiteral, Base64ImageContentValue, type Base64ImageContentValueType, ChatBaseLogProb, type ChatBaseLogProbType, ChatLogProb, type ChatLogProbType, ChatLogProbs, type ChatLogProbsType, ChatResponse, type ChatResponseType, ChatUsage, type ChatUsageType, Config, type ConfigType, Content, type ContentType, EmbeddingModalityEnum, type EmbeddingModalityEnumType, EmbeddingModalityLiterals, EmbeddingRequests, type EmbeddingRequestsType, EmbeddingResponse, type EmbeddingResponseType, EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral, EmbeddingsUsage, type EmbeddingsUsageType, FloatEmbedding, FloatEmbeddingLiteral, type FloatEmbeddingType, Function, FunctionParameter, type FunctionParameterType, FunctionParameterTypes, FunctionParameterTypesLiteral, type FunctionParameterTypesType, FunctionParameters, type FunctionParametersType, FunctionTool, FunctionToolLiteral, type FunctionToolType, type FunctionType, GatewayBaseError, ImageContent, ImageContentDetails, ImageContentDetailsLiteral, type ImageContentDetailsLiteralType, type ImageContentType, type ImageContentValueType, ImageModalityLiteral, Message, type MessageType, ModalityEnum, type ModalityEnumType, ModalityLiterals, PartialChatResponse, type PartialChatResponseType, PartialContent, type PartialContentType, PartialMessage, type PartialMessageType, PartialModalityEnum, type PartialModalityEnumType, PartialModalityLiterals, PartialRoleEnum, type PartialRoleEnumType, PartialRoleLiterals, PartialTextContent, type PartialTextContentType, PartialTextModalityLiteral, PartialToolCallContent, type PartialToolCallContentType, PartialToolCallModalityLiteral, ResponseSchema, ResponseSchemaProperty, type ResponseSchemaPropertyType, ResponseSchemaStructure, type ResponseSchemaStructureType, type ResponseSchemaType, ResponseSchemaTypes, ResponseSchemaTypesLiteral, type ResponseSchemaTypesType, RoleEnum, type RoleEnumType, RoleLiterals, SystemRoleLiteral, TextContent, type TextContentType, TextEmbeddingRequests, type TextEmbeddingRequestsType, TextModalityLiteral, TokenContent, type TokenContentType, TokenEmbeddingRequests, type TokenEmbeddingRequestsType, TokenModalityLiteral, Tool, ToolCallContent, type ToolCallContentType, ToolCallModalityLiteral, ToolEnum, type ToolEnumType, ToolLiterals, ToolResponseContent, type ToolResponseContentType, ToolResponseModalityLiteral, ToolRoleLiteral, type ToolType, ToolTypes, ToolTypesLiteral, type ToolTypesType, UrlImageContentTypeLiteral, UrlImageContentValue, type UrlImageContentValueType, UserRoleLiteral, createBase64ImageMessage, createPartialTextMessage, createPartialToolCallMessage, createTextContent, createTextMessage, createToolCallContent, createToolCallMessage, createToolResponseMessage, createUrlImageMessage, mergePartialMessages };
