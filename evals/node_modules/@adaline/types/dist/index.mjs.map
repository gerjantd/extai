{"version":3,"sources":["../src/errors/gateway-base.error.ts","../src/message/roles.ts","../src/message/content/image-content.ts","../src/message/content/text-content.ts","../src/message/content/tool-call-content.ts","../src/message/content/tool-response-content.ts","../src/message/content/content.ts","../src/message/content/token-content.ts","../src/message/message.ts","../src/utils/create-message.ts","../src/utils/merge-partial-messages.ts","../src/config/config.ts","../src/config/response-schema.config.ts","../src/tool/function-tool.ts","../src/tool/tool.ts","../src/embedding/embedding-requests.ts","../src/embedding/embedding-response.ts","../src/chat/chat-response.ts"],"names":["safeStringify","obj","seen","key","value","getErrorMessage","error","GatewayBaseErrorLiteral","GatewayBaseError","_GatewayBaseError","info","cause","name","SystemRoleLiteral","UserRoleLiteral","AssistantRoleLiteral","ToolRoleLiteral","RoleLiterals","RoleEnum","z","PartialRoleLiterals","PartialRoleEnum","ImageModalityLiteral","Base64ImageContentTypeLiteral","Base64ImageContentMediaTypeLiterals","Base64ImageContentValue","UrlImageContentTypeLiteral","UrlImageContentValue","ImageContentValue","ImageContentDetails","ImageContentDetailsLiteral","ImageContent","Metadata","TextModalityLiteral","TextContent","PartialTextModalityLiteral","PartialTextContent","ToolCallModalityLiteral","ToolCallContent","PartialToolCallModalityLiteral","PartialToolCallContent","ToolResponseModalityLiteral","ToolResponseContent","ModalityLiterals","ModalityEnum","Content","TextContentMetadata","ImageContentMetadata","ToolCallContentMetadata","ToolResponseContentMetadata","PartialModalityLiterals","PartialModalityEnum","PartialContent","PartialTextContentMetadata","PartialToolCallContentMetadata","TokenModalityLiteral","TokenContent","Message","Role","MessageMetadata","PartialMessage","createTextContent","content","createToolCallContent","index","id","args","createTextMessage","role","createUrlImageMessage","url","detail","createBase64ImageMessage","base64","createToolCallMessage","createToolResponseMessage","data","createPartialTextMessage","createPartialToolCallMessage","mergePartialMessages","messages","partialMessages","mergedMessages","lastMessageModality","lastTextContent","lastToolCallContent","message","toolCallContent","textContent","Config","ResponseSchemaTypes","ResponseSchemaTypesLiteral","ResponseSchemaProperty","ResponseSchemaStructure","ResponseSchema","FunctionToolLiteral","FunctionParameterTypes","FunctionParameterTypesLiteral","FunctionParameter","FunctionParameters","Function","ToolTypes","ToolTypesLiteral","FunctionTool","ToolLiterals","ToolEnum","Tool","FunctionToolMetadata","EmbeddingTextModalityLiteral","EmbeddingTokenModalityLiteral","EmbeddingModalityLiterals","EmbeddingModalityEnum","TextEmbeddingRequests","TokenEmbeddingRequests","EmbeddingRequests","FloatEmbeddingLiteral","FloatEmbedding","Base64EmbeddingLiteral","Base64Embedding","EmbeddingsUsage","EmbeddingResponse","ChatUsage","ChatBaseLogProb","ChatLogProb","ChatLogProbs","ChatResponse","PartialChatResponse"],"mappings":"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","file":"index.mjs","sourcesContent":["const safeStringify = (obj: unknown) => {\n  const seen = new WeakSet();\n  return JSON.stringify(obj, (key, value) => {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return; // Skip circular reference\n      }\n      seen.add(value);\n    }\n    return value;\n  });\n};\n\nconst getErrorMessage = (error: unknown | undefined): string => {\n  if (error == null) return \"unknown error\";\n  if (typeof error === \"string\") return error;\n  if (error instanceof Error) return error.message;\n  return safeStringify(error);\n};\n\nconst GatewayBaseErrorLiteral = \"GatewayBaseError\" as const;\nclass GatewayBaseError extends Error {\n  readonly name: string = GatewayBaseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }, name?: string) {\n    super(`[${name ?? GatewayBaseErrorLiteral}]: ${info}\\nMessage: ${getErrorMessage(cause)}`);\n    this.info = info;\n    this.cause = cause;\n    this.name = name ?? GatewayBaseErrorLiteral;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isGatewayBaseError(error: unknown): error is GatewayBaseError {\n    return error instanceof GatewayBaseError;\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      info: this.info,\n      cause: this.cause,\n      message: this.message,\n      stack: this.stack,\n    };\n  }\n}\n\nexport { GatewayBaseError };\n","import { z } from \"zod\";\n\nconst SystemRoleLiteral = \"system\" as const;\nconst UserRoleLiteral = \"user\" as const;\nconst AssistantRoleLiteral = \"assistant\" as const;\nconst ToolRoleLiteral = \"tool\" as const;\n\nconst RoleLiterals = [SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral] as const;\nconst RoleEnum = z.enum(RoleLiterals);\ntype RoleEnumType = z.infer<typeof RoleEnum>;\n\nconst PartialRoleLiterals = [AssistantRoleLiteral] as const;\nconst PartialRoleEnum = z.enum(PartialRoleLiterals);\ntype PartialRoleEnumType = z.infer<typeof PartialRoleEnum>;\n\nexport {\n  UserRoleLiteral,\n  ToolRoleLiteral,\n  SystemRoleLiteral,\n  AssistantRoleLiteral,\n  RoleEnum,\n  RoleLiterals,\n  PartialRoleEnum,\n  PartialRoleLiterals,\n  type RoleEnumType,\n  type PartialRoleEnumType,\n};\n","import { z } from \"zod\";\n\nconst ImageModalityLiteral = \"image\" as const;\n\nconst Base64ImageContentTypeLiteral = \"base64\" as const;\nconst Base64ImageContentMediaTypeLiterals = [\"png\", \"jpeg\", \"webp\", \"gif\"] as const;\nconst Base64ImageContentValue = z.object({\n  type: z.literal(Base64ImageContentTypeLiteral),\n  base64: z.string(),\n  media_type: z.enum(Base64ImageContentMediaTypeLiterals),\n});\ntype Base64ImageContentValueType = z.infer<typeof Base64ImageContentValue>;\n\nconst UrlImageContentTypeLiteral = \"url\" as const;\nconst UrlImageContentValue = z.object({\n  type: z.literal(UrlImageContentTypeLiteral),\n  url: z.string(),\n});\ntype UrlImageContentValueType = z.infer<typeof UrlImageContentValue>;\n\nconst ImageContentValue = z.discriminatedUnion(\"type\", [Base64ImageContentValue, UrlImageContentValue]);\ntype ImageContentValueType = z.infer<typeof ImageContentValue>;\n\nconst ImageContentDetails = [\"low\", \"medium\", \"high\", \"auto\"] as const;\nconst ImageContentDetailsLiteral = z.enum(ImageContentDetails);\ntype ImageContentDetailsLiteralType = z.infer<typeof ImageContentDetailsLiteral>;\nconst ImageContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ImageModalityLiteral),\n    detail: ImageContentDetailsLiteral,\n    value: ImageContentValue,\n    metadata: Metadata,\n  });\ntype ImageContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ImageContent<M>>>;\n\nexport {\n  Base64ImageContentValue,\n  ImageContent,\n  ImageContentDetails,\n  ImageContentDetailsLiteral,\n  ImageModalityLiteral,\n  UrlImageContentValue,\n  UrlImageContentTypeLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentMediaTypeLiterals,\n  type Base64ImageContentValueType,\n  type ImageContentDetailsLiteralType,\n  type ImageContentType,\n  type ImageContentValueType,\n  type UrlImageContentValueType,\n};\n","import { z } from \"zod\";\n\nconst TextModalityLiteral = \"text\" as const;\n\nconst TextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(TextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype TextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TextContent<M>>>;\n\nconst PartialTextModalityLiteral = \"partial-text\" as const;\n\n// text value can already be an empty string, so we don't need to make it optional\n// const PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n//   TextContent(Metadata).merge(z.object({\n//     modality: z.literal(PartialTextModalityLiteral),\n//   }));\nconst PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialTextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype PartialTextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialTextContent<M>>>;\n\nexport {\n  TextContent,\n  PartialTextContent,\n  TextModalityLiteral,\n  PartialTextModalityLiteral,\n  type TextContentType,\n  type PartialTextContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolCallModalityLiteral = \"tool-call\" as const;\n\nconst ToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    arguments: z.string(),\n    metadata: Metadata,\n  });\ntype ToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolCallContent<M>>>;\n\nconst PartialToolCallModalityLiteral = \"partial-tool-call\" as const;\n\n// const PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n//   ToolCallContent(Metadata).partial({\n//     id: true,\n//     name: true,\n//     arguments: true,\n//   }).merge(z.object({\n//     modality: z.literal(PartialToolCallModalityLiteral),\n//   }));\nconst PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().optional(),\n    name: z.string().optional(),\n    arguments: z.string().optional(),\n    metadata: Metadata,\n  });\ntype PartialToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialToolCallContent<M>>>;\n\nexport {\n  ToolCallContent,\n  PartialToolCallContent,\n  ToolCallModalityLiteral,\n  PartialToolCallModalityLiteral,\n  type ToolCallContentType,\n  type PartialToolCallContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolResponseModalityLiteral = \"tool-response\" as const;\n\nconst ToolResponseContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolResponseModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    data: z.string(),\n    metadata: Metadata,\n  });\ntype ToolResponseContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolResponseContent<M>>>;\n\nexport { ToolResponseContent, ToolResponseModalityLiteral, type ToolResponseContentType };\n","import { z } from \"zod\";\n\nimport { ImageContent, ImageModalityLiteral } from \"./image-content\";\nimport { PartialTextContent, PartialTextModalityLiteral, TextContent, TextModalityLiteral } from \"./text-content\";\nimport { PartialToolCallContent, PartialToolCallModalityLiteral, ToolCallContent, ToolCallModalityLiteral } from \"./tool-call-content\";\nimport { ToolResponseContent, ToolResponseModalityLiteral } from \"./tool-response-content\";\n\nconst ModalityLiterals = [TextModalityLiteral, ImageModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral] as const;\nconst ModalityEnum = z.enum(ModalityLiterals);\ntype ModalityEnumType = z.infer<typeof ModalityEnum>;\n\nconst Content = <\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    TextContent(TextContentMetadata),\n    ImageContent(ImageContentMetadata),\n    ToolCallContent(ToolCallContentMetadata),\n    ToolResponseContent(ToolResponseContentMetadata),\n  ]);\ntype ContentType<\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Content<TCM, ICM, CCM, RCM>>>;\n\nconst PartialModalityLiterals = [PartialTextModalityLiteral, PartialToolCallModalityLiteral] as const;\nconst PartialModalityEnum = z.enum(PartialModalityLiterals);\ntype PartialModalityEnumType = z.infer<typeof PartialModalityEnum>;\n\nconst PartialContent = <TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined>(\n  PartialTextContentMetadata: TCM = z.undefined() as TCM,\n  PartialToolCallContentMetadata: CCM = z.undefined() as CCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    PartialTextContent(PartialTextContentMetadata),\n    PartialToolCallContent(PartialToolCallContentMetadata),\n  ]);\ntype PartialContentType<TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<\n  ReturnType<typeof PartialContent<TCM, CCM>>\n>;\n\nexport {\n  Content,\n  ModalityEnum,\n  ModalityLiterals,\n  type ContentType,\n  type ModalityEnumType,\n  PartialContent,\n  PartialModalityEnum,\n  PartialModalityLiterals,\n  type PartialContentType,\n  type PartialModalityEnumType,\n};\n","import { z } from \"zod\";\n\nconst TokenModalityLiteral = \"token\" as const;\n\nconst TokenContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(TokenModalityLiteral),\n    value: z.array(z.number().int().nonnegative()),\n    metadata: Metadata,\n  });\ntype TokenContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TokenContent<M>>>;\n\nexport { TokenContent, TokenModalityLiteral, type TokenContentType };\n","import { z } from \"zod\";\n\nimport { Content, PartialContent } from \"./content\";\nimport { PartialRoleEnum, RoleEnum } from \"./roles\";\n\nconst Message = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = RoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    content: z.array(Content(TextContentMetadata, ImageContentMetadata, ToolCallContentMetadata, ToolResponseContentMetadata)),\n    metadata: MessageMetadata,\n  });\ntype MessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Message<R, TCM, ICM, CCM, RCM, MM>>>;\n\n// const PartialMessage = <\n//   R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n//   TCM extends z.ZodTypeAny = z.ZodUndefined,\n//   CCM extends z.ZodTypeAny = z.ZodUndefined,\n//   MM extends z.ZodTypeAny = z.ZodUndefined,\n// >(\n//   Role: R = PartialRoleEnum as unknown as R,\n//   TextContentMetadata: TCM = z.undefined() as TCM,\n//   ToolCallContentMetadata: CCM = z.undefined() as CCM,\n//   MessageMetadata: MM = z.undefined() as MM,\n// ) => Message(\n//   Role,\n//   TextContentMetadata,\n//   undefined,\n//   ToolCallContentMetadata,\n//   undefined,\n//   MessageMetadata\n// ).omit({ content: true }).merge(z.object({\n//   partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n// }));\nconst PartialMessage = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = PartialRoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n    metadata: MessageMetadata,\n  });\ntype PartialMessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof PartialMessage<R, TCM, CCM, MM>>>;\n\nexport { Message, PartialMessage, type MessageType, type PartialMessageType };\n","import {\n  Base64ImageContentTypeLiteral,\n  ContentType,\n  ImageContent,\n  ImageContentDetailsLiteralType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialMessage,\n  PartialMessageType,\n  PartialTextContent,\n  PartialTextModalityLiteral,\n  PartialToolCallContent,\n  PartialToolCallModalityLiteral,\n  RoleEnumType,\n  TextContent,\n  TextModalityLiteral,\n  ToolCallContent,\n  ToolCallModalityLiteral,\n  ToolResponseContent,\n  ToolResponseModalityLiteral,\n  UrlImageContentTypeLiteral,\n} from \"./../message\";\n\nconst createTextContent = (content: string): ContentType => {\n  return TextContent().parse({\n    modality: TextModalityLiteral,\n    value: content,\n  });\n};\n\nconst createToolCallContent = (index: number, id: string, name: string, args: string): ContentType => {\n  return ToolCallContent().parse({\n    modality: ToolCallModalityLiteral,\n    index: index,\n    id: id,\n    name: name,\n    arguments: args,\n  });\n};\n\nconst createTextMessage = (role: RoleEnumType, content: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      TextContent().parse({\n        modality: TextModalityLiteral,\n        value: content,\n      }),\n    ],\n  });\n};\n\nconst createUrlImageMessage = (role: RoleEnumType, url: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: UrlImageContentTypeLiteral,\n          url: url,\n        },\n      }),\n    ],\n  });\n};\n\nconst createBase64ImageMessage = (role: RoleEnumType, base64: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: Base64ImageContentTypeLiteral,\n          base64: base64,\n        },\n      }),\n    ],\n  });\n};\n\nconst createToolCallMessage = (role: RoleEnumType, index: number, id: string, name: string, args: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolCallContent().parse({\n        modality: ToolCallModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        arguments: args,\n      }),\n    ],\n  });\n};\n\nconst createToolResponseMessage = (role: RoleEnumType, index: number, id: string, name: string, data: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolResponseContent().parse({\n        modality: ToolResponseModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        data: data,\n      }),\n    ],\n  });\n};\n\nconst createPartialTextMessage = (role: RoleEnumType, content: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialTextContent().parse({\n      modality: PartialTextModalityLiteral,\n      value: content,\n    }),\n  });\n};\n\nconst createPartialToolCallMessage = (role: RoleEnumType, index: number, id?: string, name?: string, args?: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialToolCallContent().parse({\n      modality: PartialToolCallModalityLiteral,\n      index: index,\n      id: id,\n      name: name,\n      arguments: args,\n    }),\n  });\n};\n\nexport {\n  createTextContent,\n  createTextMessage,\n  createUrlImageMessage,\n  createBase64ImageMessage,\n  createToolCallContent,\n  createToolCallMessage,\n  createToolResponseMessage,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n};\n","import {\n  AssistantRoleLiteral,\n  MessageType,\n  PartialMessageType,\n  PartialTextContentType,\n  PartialTextModalityLiteral,\n  PartialToolCallContentType,\n  PartialToolCallModalityLiteral,\n  TextContentType,\n  TextModalityLiteral,\n  ToolCallContentType,\n  ToolCallModalityLiteral,\n} from \"./../message\";\n\n// TODO: add role sense, currently just assumes 'assistant' role\n// TODO: method and simplified and minified in implementation\nconst mergePartialMessages = (messages: MessageType[], partialMessages: PartialMessageType[]): MessageType[] => {\n  if (partialMessages.length === 0) {\n    return messages;\n  }\n\n  const mergedMessages: MessageType[] = messages;\n\n  let lastMessageModality: typeof PartialTextModalityLiteral | typeof PartialToolCallModalityLiteral =\n    partialMessages[0].partialContent.modality;\n\n  let lastTextContent: PartialTextContentType = {\n    modality: PartialTextModalityLiteral,\n    value: \"\",\n  };\n\n  let lastToolCallContent: PartialToolCallContentType = {\n    modality: PartialToolCallModalityLiteral,\n    index: 0,\n    id: \"\",\n    name: \"\",\n    arguments: \"\",\n  };\n\n  partialMessages.forEach((message) => {\n    // last message and current message are of the same modality, merge them\n    if (message.partialContent.modality === lastMessageModality) {\n      // always merge text content\n      if (message.partialContent.modality === PartialTextModalityLiteral) {\n        lastTextContent.value += message.partialContent.value;\n      } else if (message.partialContent.modality === PartialToolCallModalityLiteral) {\n        // same tool call index, merge tool call index\n        if (lastToolCallContent.index == message.partialContent.index) {\n          lastToolCallContent.id += message.partialContent.id || \"\";\n          lastToolCallContent.name += message.partialContent.name || \"\";\n          lastToolCallContent.arguments += message.partialContent.arguments || \"\";\n        } else {\n          // different tool call index, push last tool call\n          const toolCallContent: ToolCallContentType = {\n            modality: ToolCallModalityLiteral,\n            index: lastToolCallContent.index,\n            id: lastToolCallContent.id as string,\n            name: lastToolCallContent.name as string,\n            arguments: lastToolCallContent.arguments as string,\n          };\n          mergedMessages.push({\n            role: AssistantRoleLiteral,\n            content: [toolCallContent],\n          });\n          // reset last tool call to current message\n          lastToolCallContent = {\n            modality: PartialToolCallModalityLiteral,\n            index: message.partialContent.index,\n            id: message.partialContent.id || \"\",\n            name: message.partialContent.name || \"\",\n            arguments: message.partialContent.arguments || \"\",\n          };\n        }\n      }\n    } else {\n      // last message and current message are of different modalities, push last message\n      if (lastMessageModality === PartialTextModalityLiteral) {\n        const textContent: TextContentType = {\n          modality: TextModalityLiteral,\n          value: lastTextContent.value,\n        };\n        mergedMessages.push({\n          role: AssistantRoleLiteral,\n          content: [textContent],\n        } as MessageType);\n        // reset last text content to blank message\n        lastTextContent = {\n          modality: PartialTextModalityLiteral,\n          value: \"\",\n        };\n      } else if (lastMessageModality === PartialToolCallModalityLiteral) {\n        // push last tool call\n        const toolCallContent: ToolCallContentType = {\n          modality: ToolCallModalityLiteral,\n          index: lastToolCallContent.index,\n          id: lastToolCallContent.id as string,\n          name: lastToolCallContent.name as string,\n          arguments: lastToolCallContent.arguments as string,\n        };\n        mergedMessages.push({\n          role: AssistantRoleLiteral,\n          content: [toolCallContent],\n        });\n        // reset last tool call to blank message\n        lastToolCallContent = {\n          modality: PartialToolCallModalityLiteral,\n          index: 0,\n          id: \"\",\n          name: \"\",\n          arguments: \"\",\n        };\n      }\n\n      // update last message modality and content\n      lastMessageModality = message.partialContent.modality;\n      if (message.partialContent.modality === PartialTextModalityLiteral) {\n        lastTextContent.value += message.partialContent.value;\n      } else if (message.partialContent.modality === PartialToolCallModalityLiteral) {\n        lastToolCallContent = {\n          modality: PartialToolCallModalityLiteral,\n          index: message.partialContent.index,\n          id: message.partialContent.id || \"\",\n          name: message.partialContent.name || \"\",\n          arguments: message.partialContent.arguments || \"\",\n        };\n      }\n    }\n  });\n\n  if (lastMessageModality === PartialTextModalityLiteral) {\n    const textContent: TextContentType = {\n      modality: TextModalityLiteral,\n      value: lastTextContent.value,\n    };\n    mergedMessages.push({\n      role: AssistantRoleLiteral,\n      content: [textContent],\n    } as MessageType);\n  } else if (lastMessageModality === PartialToolCallModalityLiteral) {\n    // push last tool call\n    const toolCallContent: ToolCallContentType = {\n      modality: ToolCallModalityLiteral,\n      index: lastToolCallContent.index,\n      id: lastToolCallContent.id as string,\n      name: lastToolCallContent.name as string,\n      arguments: lastToolCallContent.arguments as string,\n    };\n    mergedMessages.push({\n      role: AssistantRoleLiteral,\n      content: [toolCallContent],\n    });\n  }\n\n  return mergedMessages;\n};\n\nexport { mergePartialMessages };\n","import { z } from \"zod\";\n\nconst Config = <C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>>(\n  Config: C = z.record(z.string(), z.any()).optional() as unknown as C\n) => Config;\ntype ConfigType<C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>> = z.infer<ReturnType<typeof Config<C>>>;\n\nexport { Config, type ConfigType };\n","import { z } from \"zod\";\n\n// TODO: move to json schema 7 type and validator when implemented for tool types\nconst ResponseSchemaTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"enum\"] as const;\nconst ResponseSchemaTypesLiteral = z.enum(ResponseSchemaTypes);\ntype ResponseSchemaTypesType = z.infer<typeof ResponseSchemaTypesLiteral>;\n\nconst ResponseSchemaProperty = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: z.union([ResponseSchemaTypesLiteral, z.array(z.union([ResponseSchemaTypesLiteral, z.literal(\"null\")]))]).optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n  $ref: z.string().optional(), // Reference to another schema\n});\ntype ResponseSchemaPropertyType = z.infer<typeof ResponseSchemaProperty>;\n\nconst ResponseSchemaStructure = z.object({\n  type: z.enum([\"object\"]),\n  required: z.array(z.string()),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(ResponseSchemaProperty),\n  additionalProperties: z.literal(false),\n});\ntype ResponseSchemaStructureType = z.infer<typeof ResponseSchemaStructure>;\n\nconst ResponseSchema = z\n  .object({\n    name: z\n      .string()\n      .regex(/^[a-zA-Z0-9_]{1,64}$/)\n      .max(64),\n    description: z.string().max(4096),\n    strict: z.boolean().optional(),\n    schema: ResponseSchemaStructure,\n  })\n  .optional();\ntype ResponseSchemaType = z.infer<typeof ResponseSchema>;\n\nexport {\n  ResponseSchema,\n  ResponseSchemaProperty,\n  ResponseSchemaStructure,\n  ResponseSchemaTypes,\n  ResponseSchemaTypesLiteral,\n  type ResponseSchemaTypesType,\n  type ResponseSchemaType,\n  type ResponseSchemaPropertyType,\n  type ResponseSchemaStructureType,\n};\n","// import { JSONSchema7 } from \"json-schema\";\n// import { Validator } from \"jsonschema\";\nimport { z } from \"zod\";\n\nconst FunctionToolLiteral = \"function\" as const;\n\n// TODO: fix 'name' property not allowed in JSONSchema7\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}).refine((schema) => {\n//       const validator = new Validator();\n//       return validator.validate(schema, { type: \"object\" }).valid;\n//     }),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n// type FunctionToolType = z.infer<typeof FunctionTool>;\n\nconst FunctionParameterTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"];\nconst FunctionParameterTypesLiteral = z.enum([\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"]);\ntype FunctionParameterTypesType = z.infer<typeof FunctionParameterTypesLiteral>;\n\n// TODO: make a proper fix here\nconst FunctionParameter = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: FunctionParameterTypesLiteral.optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n});\ntype FunctionParameterType = z.infer<typeof FunctionParameter>;\n\nconst FunctionParameters = z.object({\n  type: z.enum([\"object\"]),\n  title: z.string().optional(),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(FunctionParameter).optional(),\n  required: z.array(z.string()).optional(),\n});\ntype FunctionParametersType = z.infer<typeof FunctionParameters>;\n\nconst Function = z.object({\n  name: z\n    .string()\n    .regex(/^[a-zA-Z0-9_]{1,64}$/)\n    .max(64),\n  description: z.string().max(4096),\n  parameters: z.any(),\n  strict: z.boolean().optional(),\n});\ntype FunctionType = z.infer<typeof Function>;\n\nconst ToolTypes = [\"function\"];\nconst ToolTypesLiteral = z.enum([\"function\"]);\ntype ToolTypesType = z.infer<typeof ToolTypesLiteral>;\n\nconst FunctionTool = z.object({\n  type: ToolTypesLiteral,\n  definition: z.object({\n    schema: Function, // TODO: convert to union with more tool types\n  }),\n});\ntype FunctionToolType = z.infer<typeof FunctionTool>;\n\n// const Tools = z.array(Tool).nonempty().optional();\n// type ToolsType = z.infer<typeof Tools>;\n\nexport {\n  Function,\n  FunctionParameter,\n  FunctionParameters,\n  FunctionParameterTypes,\n  FunctionParameterTypesLiteral,\n  ToolTypes,\n  ToolTypesLiteral,\n  type FunctionParametersType,\n  type FunctionParameterType,\n  type FunctionParameterTypesType,\n  type FunctionType,\n  type ToolTypesType,\n};\n\nexport { FunctionTool, FunctionToolLiteral, type FunctionToolType };\n","import { z } from \"zod\";\n\nimport { FunctionTool, FunctionToolLiteral } from \"./function-tool\";\n\nconst ToolLiterals = [FunctionToolLiteral] as const;\nconst ToolEnum = z.enum(ToolLiterals);\ntype ToolEnumType = z.infer<typeof ToolEnum>;\n\nconst Tool = <FTM extends z.ZodTypeAny>(FunctionToolMetadata: FTM = z.undefined() as FTM) =>\n  z.discriminatedUnion(\"type\", [FunctionTool.extend({ metadata: FunctionToolMetadata })]);\ntype ToolType<FTM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Tool<FTM>>>;\n\nexport { Tool, ToolEnum, ToolLiterals, type ToolEnumType, type ToolType };\n","import { z } from \"zod\";\n\nconst EmbeddingTextModalityLiteral = \"text\" as const;\nconst EmbeddingTokenModalityLiteral = \"token\" as const;\n\nconst EmbeddingModalityLiterals = [EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral] as const;\nconst EmbeddingModalityEnum = z.enum(EmbeddingModalityLiterals);\ntype EmbeddingModalityEnumType = z.infer<typeof EmbeddingModalityEnum>;\n\nconst TextEmbeddingRequests = z.array(z.string().min(1));\ntype TextEmbeddingRequestsType = z.infer<typeof TextEmbeddingRequests>;\n\nconst TokenEmbeddingRequests = z.array(z.array(z.number().int().nonnegative()));\ntype TokenEmbeddingRequestsType = z.infer<typeof TokenEmbeddingRequests>;\n\nconst EmbeddingRequests = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.discriminatedUnion(\"modality\", [\n    z.object({\n      modality: z.literal(EmbeddingTextModalityLiteral),\n      metadata: Metadata,\n      requests: TextEmbeddingRequests,\n    }),\n    z.object({\n      modality: z.literal(EmbeddingTokenModalityLiteral),\n      metadata: Metadata,\n      requests: TokenEmbeddingRequests,\n    }),\n  ]);\ntype EmbeddingRequestsType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof EmbeddingRequests<M>>>;\n\nexport {\n  EmbeddingTextModalityLiteral,\n  EmbeddingTokenModalityLiteral,\n  EmbeddingModalityLiterals,\n  EmbeddingModalityEnum,\n  TextEmbeddingRequests,\n  TokenEmbeddingRequests,\n  EmbeddingRequests,\n  type EmbeddingRequestsType,\n  type EmbeddingModalityEnumType,\n  type TextEmbeddingRequestsType,\n  type TokenEmbeddingRequestsType,\n};\n","import { z } from \"zod\";\n\nconst FloatEmbeddingLiteral = \"float\" as const;\nconst FloatEmbedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.array(z.number()),\n});\ntype FloatEmbeddingType = z.infer<typeof FloatEmbedding>;\n\nconst Base64EmbeddingLiteral = \"base64\" as const;\nconst Base64Embedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.string().base64(),\n});\ntype Base64EmbeddingType = z.infer<typeof Base64Embedding>;\n\nconst EmbeddingsUsage = z.object({\n  totalTokens: z.number().int().nonnegative(),\n});\ntype EmbeddingsUsageType = z.infer<typeof EmbeddingsUsage>;\n\nconst EmbeddingResponse = z.discriminatedUnion(\"encodingFormat\", [\n  z.object({\n    encodingFormat: z.literal(FloatEmbeddingLiteral),\n    embeddings: z.array(FloatEmbedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n  z.object({\n    encodingFormat: z.literal(Base64EmbeddingLiteral),\n    embeddings: z.array(Base64Embedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n]);\ntype EmbeddingResponseType = z.infer<typeof EmbeddingResponse>;\n\nexport {\n  FloatEmbeddingLiteral,\n  Base64EmbeddingLiteral,\n  FloatEmbedding,\n  Base64Embedding,\n  EmbeddingsUsage,\n  EmbeddingResponse,\n  type FloatEmbeddingType,\n  type Base64EmbeddingType,\n  type EmbeddingsUsageType,\n  type EmbeddingResponseType,\n};\n","import { z } from \"zod\";\n\nimport { Message, PartialMessage } from \"./../message\";\n\nconst ChatUsage = z.object({\n  promptTokens: z.number().nonnegative(),\n  completionTokens: z.number().nonnegative(),\n  totalTokens: z.number().nonnegative(),\n});\ntype ChatUsageType = z.infer<typeof ChatUsage>;\n\nconst ChatBaseLogProb = z.object({\n  token: z.string(),\n  logProb: z.number(),\n  bytes: z.array(z.number().int()).nullable(),\n});\ntype ChatBaseLogProbType = z.infer<typeof ChatBaseLogProb>;\n\nconst ChatLogProb = ChatBaseLogProb.extend({\n  topLogProbs: z.array(ChatBaseLogProb),\n});\ntype ChatLogProbType = z.infer<typeof ChatLogProb>;\n\nconst ChatLogProbs = z.array(ChatLogProb);\ntype ChatLogProbsType = z.infer<typeof ChatLogProbs>;\n\nconst ChatResponse = z.object({\n  messages: z.array(Message()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype ChatResponseType = z.infer<typeof ChatResponse>;\n\nconst PartialChatResponse = z.object({\n  partialMessages: z.array(PartialMessage()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype PartialChatResponseType = z.infer<typeof PartialChatResponse>;\n\nexport {\n  ChatUsage,\n  ChatBaseLogProb,\n  ChatLogProb,\n  ChatLogProbs,\n  ChatResponse,\n  PartialChatResponse,\n  type ChatUsageType,\n  type ChatBaseLogProbType,\n  type ChatLogProbType,\n  type ChatLogProbsType,\n  type ChatResponseType,\n  type PartialChatResponseType,\n};\n"]}