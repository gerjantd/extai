{"version":3,"sources":["../src/configs/chat-model/base.config.chat-model.anthropic.ts","../../../../packages/types/src/errors/gateway-base.error.ts","../../../../packages/types/src/message/roles.ts","../../../../packages/types/src/message/content/image-content.ts","../../../../packages/types/src/message/content/text-content.ts","../../../../packages/types/src/message/content/tool-call-content.ts","../../../../packages/types/src/message/content/tool-response-content.ts","../../../../packages/types/src/message/content/content.ts","../../../../packages/types/src/message/message.ts","../../../../packages/types/src/utils/create-message.ts","../../../../packages/types/src/config/config.ts","../../../../packages/types/src/config/response-schema.config.ts","../../../../packages/types/src/tool/function-tool.ts","../../../../packages/types/src/tool/tool.ts","../../../../packages/types/src/embedding/embedding-requests.ts","../../../../packages/types/src/embedding/embedding-response.ts","../../../../packages/types/src/chat/chat-response.ts","../../../../packages/provider/src/errors/provider.error.ts","../../../../packages/provider/src/errors/model-response.error.ts","../../../../packages/provider/src/errors/invalid-model-request.error.ts","../../../../packages/provider/src/errors/invalid-config.error.ts","../../../../packages/provider/src/errors/invalid-messages.error.ts","../../../../packages/provider/src/errors/invalid-tools.error.ts","../../../../packages/provider/src/errors/invalid-embedding-requests.error.ts","../../../../packages/provider/src/types/config/multi-string-config-item.ts","../../../../packages/provider/src/types/config/object-schema-config-item.ts","../../../../packages/provider/src/types/config/range-config-item.ts","../../../../packages/provider/src/types/config/select-boolean-config-item.ts","../../../../packages/provider/src/types/config/select-string-config-item.ts","../../../../packages/provider/src/types/config/config-item.ts","../../../../packages/provider/src/model/chat-model/chat-model.schema.v1.ts","../../../../packages/provider/src/model/embedding-model/embedding-model.schema.v1.ts","../../../../packages/provider/src/types/headers.ts","../../../../packages/provider/src/types/params.ts","../../../../packages/provider/src/types/url.ts","../../../../packages/provider/src/utils/common-config.def.chat-model.ts","../../../../packages/provider/src/utils/remove-undefined-entries.ts","../../../../packages/provider/src/utils/url.ts","../src/configs/chat-model/common.config.chat-model.anthropic.ts","../src/configs/embedding-model/common.config.embedding-model.anthropic.ts","../src/configs/embedding-model/base.config.embedding-model.anthropic.ts","../src/configs/configs.anthropic.ts","../src/provider/provider.anthropic.ts","../src/models/chat-models/types/roles.chat-model.anthropic.ts","../src/models/chat-models/types/modalities.chat-model.anthropic.ts","../src/models/chat-models/types/response.chat-model.anthropic.ts","../src/models/chat-models/types/request.chat-model.anthropic.ts","../src/models/chat-models/base-chat-model.anthropic.ts","../src/models/chat-models/claude-3-5-sonnet-20240620.anthropic.ts","../src/models/chat-models/claude-3-5-sonnet-20241022.anthropic.ts","../src/models/chat-models/claude-3-5-sonnet-latest.anthropic.ts","../src/models/chat-models/claude-3-haiku-20240307.anthropic.ts","../src/models/chat-models/claude-3-haiku-20241022.anthropic.ts","../src/models/chat-models/claude-3-haiku-latest.anthropic.ts","../src/models/chat-models/claude-3-opus-20240229.anthropic.ts","../src/models/chat-models/claude-3-sonnet-20240229.anthropic.ts","../src/models/embedding-models/types/modalities.embedding-model.anthropic.ts","../src/models/embedding-models/types/response.embedding-model.anthropic.ts","../src/models/embedding-models/types/request.embedding-model.anthropic.ts","../src/models/embedding-models/base-embedding-model.anthropic.ts","../src/models/embedding-models/voyage-code-2.anthropic.ts","../src/models/embedding-models/voyage-law-2.anthropic.ts","../src/models/embedding-models/voyage-multilingual-2.anthropic.ts","../src/models/embedding-models/voyage-finance-2.anthropic.ts","../src/models/embedding-models/voyage-3-lite.anthropic.ts","../src/models/embedding-models/voyage-3.anthropic.ts"],"names":["safeStringify","obj","seen","key","value","getErrorMessage","error","GatewayBaseErrorLiteral","GatewayBaseError","_GatewayBaseError","info","cause","name","SystemRoleLiteral","UserRoleLiteral","AssistantRoleLiteral","ToolRoleLiteral","RoleLiterals","RoleEnum","z","PartialRoleLiterals","PartialRoleEnum","ImageModalityLiteral","Base64ImageContentTypeLiteral","Base64ImageContentMediaTypeLiterals","Base64ImageContentValue","UrlImageContentTypeLiteral","UrlImageContentValue","ImageContentValue","ImageContentDetails","ImageContentDetailsLiteral","ImageContent","Metadata","TextModalityLiteral","TextContent","PartialTextModalityLiteral","PartialTextContent","ToolCallModalityLiteral","ToolCallContent","PartialToolCallModalityLiteral","PartialToolCallContent","ToolResponseModalityLiteral","ToolResponseContent","ModalityLiterals","ModalityEnum","Content","TextContentMetadata","ImageContentMetadata","ToolCallContentMetadata","ToolResponseContentMetadata","PartialModalityLiterals","PartialContent","PartialTextContentMetadata","PartialToolCallContentMetadata","Message","Role","MessageMetadata","PartialMessage","createTextContent","content","createToolCallContent","index","id","args","createPartialTextMessage","role","createPartialToolCallMessage","Config","ResponseSchemaTypes","ResponseSchemaTypesLiteral","ResponseSchemaProperty","ResponseSchemaStructure","FunctionToolLiteral","FunctionParameterTypesLiteral","FunctionParameter","FunctionParameters","Function","ToolTypesLiteral","FunctionTool","ToolLiterals","Tool","FunctionToolMetadata","EmbeddingTextModalityLiteral","EmbeddingTokenModalityLiteral","EmbeddingModalityLiterals","EmbeddingModalityEnum","TextEmbeddingRequests","TokenEmbeddingRequests","EmbeddingRequests","FloatEmbeddingLiteral","FloatEmbedding","Base64EmbeddingLiteral","Base64Embedding","EmbeddingsUsage","ChatUsage","ChatBaseLogProb","ChatLogProb","ChatLogProbs","ChatResponse","PartialChatResponse","ProviderErrorLiteral","ProviderError","_ProviderError","ModelResponseErrorLiteral","ModelResponseError","_ModelResponseError","InvalidModelRequestErrorLiteral","InvalidModelRequestError","_InvalidModelRequestError","InvalidConfigErrorLiteral","InvalidConfigError","_InvalidConfigError","InvalidMessagesErrorLiteral","InvalidMessagesError","_InvalidMessagesError","InvalidToolsErrorLiteral","InvalidToolsError","_InvalidToolsError","InvalidEmbeddingRequestsErrorLiteral","InvalidEmbeddingRequestsError","_InvalidEmbeddingRequestsError","MultiStringConfigItemTypeLiteral","MultiStringConfigItemDef","MultiStringConfigItemSchema","max","MultiStringConfigItem","data","__spreadValues","ObjectSchemaConfigItemTypeLiteral","ObjectSchemaConfigItemDef","RangeConfigItemTypeLiteral","RangeConfigItemDef","RangeConfigItemSchema","min","step","defaultValue","RangeConfigItem","SelectBooleanConfigItemTypeLiteral","SelectBooleanConfigItemDef","SelectBooleanConfigItemSchema","SelectBooleanConfigItem","SelectStringConfigItemTypeLiteral","SelectStringConfigItemDef","SelectStringConfigItemSchema","choices","SelectStringConfigItem","ConfigItemLiterals","ConfigItemDef","ChatModelSchema","Roles","Modalities","config","_a","_b","defKeys","schemaKeys","EmbeddingModelSchema","TEMPERATURE","MAX_TOKENS","STOP","TOP_A","TOP_P","TOP_K","MIN_P","FREQUENCY_PENALTY","PRESENCE_PENALTY","SEED","REPETITION_PENALTY","LOG_PROBS","TOP_LOG_PROBS","ECHO","RESPONSE_FORMAT","RESPONSE_FORMAT_WITH_SCHEMA","RESPONSE_SCHEMA","CHAT_CONFIG","removeUndefinedEntries","record","_","urlWithoutTrailingSlash","url","temperature","at","Kt","maxTokens","maxOutputTokens","stop","maxSequences","Ve","topP","topK","toolChoice","dt","ChatModelBaseConfigSchema","ChatModelBaseConfigDef","encodingFormat","inputType","truncation","lt","EmbeddingModelBaseConfigSchema","EmbeddingModelBaseConfigDef","AnthropicChatModelConfigs","AnthropicEmbeddingModelConfigs","ProviderLiteral","Anthropic","Claude3Haiku20240307Literal","Claude3Haiku20240307","Claude3Haiku20240307Options","Claude3Haiku20240307Schema","Claude3Sonnet20240229Literal","Claude3Sonnet20240229","Claude3Sonnet20240229Options","Claude3Sonnet20240229Schema","Claude3Opus20240229Literal","Claude3Opus20240229","Claude3Opus20240229Options","Claude3Opus20240229Schema","Claude3_5Sonnet20240620Literal","Claude3_5Sonnet20240620","Claude3_5Sonnet20240620Options","Claude3_5Sonnet20240620Schema","Claude3_5Sonnet20241022Literal","Claude3_5Sonnet20241022","Claude3_5Sonnet20241022Options","Claude3_5Sonnet20241022Schema","Claude3_5Haiku20241022Literal","Claude3_5Haiku20241022","Claude3_5Haiku20241022Options","Claude3_5Haiku20241022Schema","Claude3_5SonnetLatestLiteral","Claude3_5SonnetLatest","Claude3_5SonnetLatestOptions","Claude3_5SonnetLatestSchema","Claude3_5HaikuLatestLiteral","Claude3_5HaikuLatest","Claude3_5HaikuLatestOptions","Claude3_5HaikuLatestSchema","Voyage3Literal","Voyage3","Voyage3Options","Voyage3Schema","Voyage3LiteLiteral","Voyage3Lite","Voyage3LiteOptions","Voyage3LiteSchema","VoyageCode2Literal","VoyageCode2","VoyageCode2Options","VoyageCode2Schema","VoyageLaw2Literal","VoyageLaw2","VoyageLaw2Options","VoyageLaw2Schema","VoyageMultilingual2Literal","VoyageMultilingual2","VoyageMultilingual2Options","VoyageMultilingual2Schema","VoyageFinance2Literal","VoyageFinance2","VoyageFinance2Options","VoyageFinance2Schema","acc","options","modelName","j","model","parsedOptions","AnthropicChatModelRoles","oe","ae","ie","AnthropicChatModelRolesMap","AnthropicChatModelModalities","M","Z","g","h","AnthropicChatModelModalitiesEnum","AnthropicCompleteChatTextResponse","AnthropicCompleteChatToolResponse","AnthropicCompleteChatResponse","AnthropicStreamChatMessageStartResponse","AnthropicStreamChatMessageDeltaResponse","AnthropicStreamChatContentBlockStartTextResponse","AnthropicStreamChatContentBlockStartToolResponse","AnthropicStreamChatContentBlockStartResponse","AnthropicStreamChatContentBlockDeltaTextResponse","AnthropicStreamChatContentBlockDeltaToolResponse","AnthropicStreamChatContentBlockDeltaResponse","AnthropicRequestTool","AnthropicRequestToolChoiceEnum","AnthropicRequestToolChoiceTool","AnthropicRequestTextContent","AnthropicRequestImageContent","AnthropicRequestToolCallContent","AnthropicRequestToolResponseContent","AnthropicRequestUserMessage","AnthropicRequestAssistantMessage","AnthropicRequestMessage","AnthropicRequest","BaseChatModelOptions","BaseChatModel","modelSchema","an","responseHeaders","retryAfterMs","shouldRetry","messages","message","request","safeRequest","L","parsedRequest","_config","It","Qt","toolCallMap","_content","c","defaultDetail","mediaType","v","toolCallContent","tools","tool","_toolChoice","_parsedConfig","parsedConfig","transformedConfig","def","paramKey","paramValue","configToolChoice","parsedMessages","parsedMessage","b","q","systemMessage","nonSystemMessages","assistantContent","userContent","toolContent","getNextExpectedRole","i","parsedTool","Gt","__async","resolve","headers","__spreadProps","transformedMessages","transformedTools","response","safe","parsedResponse","contentItem","yt","mt","usage","B","chunk","buffer","__asyncGenerator","lines","line","structuredLine","partialMessages","ft","Mt","Claude3_5Sonnet20240620Description","Rt","Claude3_5Sonnet20241022Description","Claude3_5SonnetLatestDescription","Claude3Haiku20240307Description","Claude3_5Haiku20241022Description","Claude3_5HaikuLatestDescription","Claude3Opus20240229Description","Claude3Sonnet20240229Description","AnthropicEmbeddingModelModalities","H","AnthropicEmbeddingModelModalitiesEnum","AnthropicGetEmbeddingsResponse","AnthropicEmbeddingRequestInput","AnthropicEmbeddingRequest","BaseEmbeddingModelOptions","BaseEmbeddingModel","requests","embeddingRequests","_parsedRequests","Wt","K","Ae","Ue","embeddings","item","VoyageCode2Description","Dt","VoyageLaw2Description","VoyageMultilingual2Description","VoyageFinance2Description","Voyage3LiteDescription","Voyage3Description"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from \"zod\";\n\nimport { maxTokens, stop, temperature, toolChoice, topK, topP } from \"./common.config.chat-model.anthropic\";\n\nconst ChatModelBaseConfigSchema = (maxOutputTokens: number, maxSequences: number) =>\n  z.object({\n    temperature: temperature.schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP.schema,\n    topK: topK.schema,\n    toolChoice: toolChoice.schema,\n  });\n\nconst ChatModelBaseConfigDef = (maxOutputTokens: number, maxSequences: number) =>\n  ({\n    temperature: temperature.def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP.def,\n    topK: topK.def,\n    toolChoice: toolChoice.def,\n  }) as const;\n\nexport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema };\n","const safeStringify = (obj: unknown) => {\n  const seen = new WeakSet();\n  return JSON.stringify(obj, (key, value) => {\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return; // Skip circular reference\n      }\n      seen.add(value);\n    }\n    return value;\n  });\n};\n\nconst getErrorMessage = (error: unknown | undefined): string => {\n  if (error == null) return \"unknown error\";\n  if (typeof error === \"string\") return error;\n  if (error instanceof Error) return error.message;\n  return safeStringify(error);\n};\n\nconst GatewayBaseErrorLiteral = \"GatewayBaseError\" as const;\nclass GatewayBaseError extends Error {\n  readonly name: string = GatewayBaseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }, name?: string) {\n    super(`[${name ?? GatewayBaseErrorLiteral}]: ${info}\\nMessage: ${getErrorMessage(cause)}`);\n    this.info = info;\n    this.cause = cause;\n    this.name = name ?? GatewayBaseErrorLiteral;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isGatewayBaseError(error: unknown): error is GatewayBaseError {\n    return error instanceof GatewayBaseError;\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      info: this.info,\n      cause: this.cause,\n      message: this.message,\n      stack: this.stack,\n    };\n  }\n}\n\nexport { GatewayBaseError };\n","import { z } from \"zod\";\n\nconst SystemRoleLiteral = \"system\" as const;\nconst UserRoleLiteral = \"user\" as const;\nconst AssistantRoleLiteral = \"assistant\" as const;\nconst ToolRoleLiteral = \"tool\" as const;\n\nconst RoleLiterals = [SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral] as const;\nconst RoleEnum = z.enum(RoleLiterals);\ntype RoleEnumType = z.infer<typeof RoleEnum>;\n\nconst PartialRoleLiterals = [AssistantRoleLiteral] as const;\nconst PartialRoleEnum = z.enum(PartialRoleLiterals);\ntype PartialRoleEnumType = z.infer<typeof PartialRoleEnum>;\n\nexport {\n  UserRoleLiteral,\n  ToolRoleLiteral,\n  SystemRoleLiteral,\n  AssistantRoleLiteral,\n  RoleEnum,\n  RoleLiterals,\n  PartialRoleEnum,\n  PartialRoleLiterals,\n  type RoleEnumType,\n  type PartialRoleEnumType,\n};\n","import { z } from \"zod\";\n\nconst ImageModalityLiteral = \"image\" as const;\n\nconst Base64ImageContentTypeLiteral = \"base64\" as const;\nconst Base64ImageContentMediaTypeLiterals = [\"png\", \"jpeg\", \"webp\", \"gif\"] as const;\nconst Base64ImageContentValue = z.object({\n  type: z.literal(Base64ImageContentTypeLiteral),\n  base64: z.string(),\n  media_type: z.enum(Base64ImageContentMediaTypeLiterals),\n});\ntype Base64ImageContentValueType = z.infer<typeof Base64ImageContentValue>;\n\nconst UrlImageContentTypeLiteral = \"url\" as const;\nconst UrlImageContentValue = z.object({\n  type: z.literal(UrlImageContentTypeLiteral),\n  url: z.string(),\n});\ntype UrlImageContentValueType = z.infer<typeof UrlImageContentValue>;\n\nconst ImageContentValue = z.discriminatedUnion(\"type\", [Base64ImageContentValue, UrlImageContentValue]);\ntype ImageContentValueType = z.infer<typeof ImageContentValue>;\n\nconst ImageContentDetails = [\"low\", \"medium\", \"high\", \"auto\"] as const;\nconst ImageContentDetailsLiteral = z.enum(ImageContentDetails);\ntype ImageContentDetailsLiteralType = z.infer<typeof ImageContentDetailsLiteral>;\nconst ImageContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ImageModalityLiteral),\n    detail: ImageContentDetailsLiteral,\n    value: ImageContentValue,\n    metadata: Metadata,\n  });\ntype ImageContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ImageContent<M>>>;\n\nexport {\n  Base64ImageContentValue,\n  ImageContent,\n  ImageContentDetails,\n  ImageContentDetailsLiteral,\n  ImageModalityLiteral,\n  UrlImageContentValue,\n  UrlImageContentTypeLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentMediaTypeLiterals,\n  type Base64ImageContentValueType,\n  type ImageContentDetailsLiteralType,\n  type ImageContentType,\n  type ImageContentValueType,\n  type UrlImageContentValueType,\n};\n","import { z } from \"zod\";\n\nconst TextModalityLiteral = \"text\" as const;\n\nconst TextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(TextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype TextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof TextContent<M>>>;\n\nconst PartialTextModalityLiteral = \"partial-text\" as const;\n\n// text value can already be an empty string, so we don't need to make it optional\n// const PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n//   TextContent(Metadata).merge(z.object({\n//     modality: z.literal(PartialTextModalityLiteral),\n//   }));\nconst PartialTextContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialTextModalityLiteral),\n    value: z.string(),\n    metadata: Metadata,\n  });\ntype PartialTextContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialTextContent<M>>>;\n\nexport {\n  TextContent,\n  PartialTextContent,\n  TextModalityLiteral,\n  PartialTextModalityLiteral,\n  type TextContentType,\n  type PartialTextContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolCallModalityLiteral = \"tool-call\" as const;\n\nconst ToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    arguments: z.string(),\n    metadata: Metadata,\n  });\ntype ToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolCallContent<M>>>;\n\nconst PartialToolCallModalityLiteral = \"partial-tool-call\" as const;\n\n// const PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n//   ToolCallContent(Metadata).partial({\n//     id: true,\n//     name: true,\n//     arguments: true,\n//   }).merge(z.object({\n//     modality: z.literal(PartialToolCallModalityLiteral),\n//   }));\nconst PartialToolCallContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(PartialToolCallModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().optional(),\n    name: z.string().optional(),\n    arguments: z.string().optional(),\n    metadata: Metadata,\n  });\ntype PartialToolCallContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof PartialToolCallContent<M>>>;\n\nexport {\n  ToolCallContent,\n  PartialToolCallContent,\n  ToolCallModalityLiteral,\n  PartialToolCallModalityLiteral,\n  type ToolCallContentType,\n  type PartialToolCallContentType,\n};\n","import { z } from \"zod\";\n\nconst ToolResponseModalityLiteral = \"tool-response\" as const;\n\nconst ToolResponseContent = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.object({\n    modality: z.literal(ToolResponseModalityLiteral),\n    index: z.number().int().nonnegative(),\n    id: z.string().min(1),\n    name: z.string().min(1),\n    data: z.string(),\n    metadata: Metadata,\n  });\ntype ToolResponseContentType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof ToolResponseContent<M>>>;\n\nexport { ToolResponseContent, ToolResponseModalityLiteral, type ToolResponseContentType };\n","import { z } from \"zod\";\n\nimport { ImageContent, ImageModalityLiteral } from \"./image-content\";\nimport { PartialTextContent, PartialTextModalityLiteral, TextContent, TextModalityLiteral } from \"./text-content\";\nimport { PartialToolCallContent, PartialToolCallModalityLiteral, ToolCallContent, ToolCallModalityLiteral } from \"./tool-call-content\";\nimport { ToolResponseContent, ToolResponseModalityLiteral } from \"./tool-response-content\";\n\nconst ModalityLiterals = [TextModalityLiteral, ImageModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral] as const;\nconst ModalityEnum = z.enum(ModalityLiterals);\ntype ModalityEnumType = z.infer<typeof ModalityEnum>;\n\nconst Content = <\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    TextContent(TextContentMetadata),\n    ImageContent(ImageContentMetadata),\n    ToolCallContent(ToolCallContentMetadata),\n    ToolResponseContent(ToolResponseContentMetadata),\n  ]);\ntype ContentType<\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Content<TCM, ICM, CCM, RCM>>>;\n\nconst PartialModalityLiterals = [PartialTextModalityLiteral, PartialToolCallModalityLiteral] as const;\nconst PartialModalityEnum = z.enum(PartialModalityLiterals);\ntype PartialModalityEnumType = z.infer<typeof PartialModalityEnum>;\n\nconst PartialContent = <TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined>(\n  PartialTextContentMetadata: TCM = z.undefined() as TCM,\n  PartialToolCallContentMetadata: CCM = z.undefined() as CCM\n) =>\n  z.discriminatedUnion(\"modality\", [\n    PartialTextContent(PartialTextContentMetadata),\n    PartialToolCallContent(PartialToolCallContentMetadata),\n  ]);\ntype PartialContentType<TCM extends z.ZodTypeAny = z.ZodUndefined, CCM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<\n  ReturnType<typeof PartialContent<TCM, CCM>>\n>;\n\nexport {\n  Content,\n  ModalityEnum,\n  ModalityLiterals,\n  type ContentType,\n  type ModalityEnumType,\n  PartialContent,\n  PartialModalityEnum,\n  PartialModalityLiterals,\n  type PartialContentType,\n  type PartialModalityEnumType,\n};\n","import { z } from \"zod\";\n\nimport { Content, PartialContent } from \"./content\";\nimport { PartialRoleEnum, RoleEnum } from \"./roles\";\n\nconst Message = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = RoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ImageContentMetadata: ICM = z.undefined() as ICM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  ToolResponseContentMetadata: RCM = z.undefined() as RCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    content: z.array(Content(TextContentMetadata, ImageContentMetadata, ToolCallContentMetadata, ToolResponseContentMetadata)),\n    metadata: MessageMetadata,\n  });\ntype MessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  ICM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  RCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof Message<R, TCM, ICM, CCM, RCM, MM>>>;\n\n// const PartialMessage = <\n//   R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n//   TCM extends z.ZodTypeAny = z.ZodUndefined,\n//   CCM extends z.ZodTypeAny = z.ZodUndefined,\n//   MM extends z.ZodTypeAny = z.ZodUndefined,\n// >(\n//   Role: R = PartialRoleEnum as unknown as R,\n//   TextContentMetadata: TCM = z.undefined() as TCM,\n//   ToolCallContentMetadata: CCM = z.undefined() as CCM,\n//   MessageMetadata: MM = z.undefined() as MM,\n// ) => Message(\n//   Role,\n//   TextContentMetadata,\n//   undefined,\n//   ToolCallContentMetadata,\n//   undefined,\n//   MessageMetadata\n// ).omit({ content: true }).merge(z.object({\n//   partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n// }));\nconst PartialMessage = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n>(\n  Role: R = PartialRoleEnum as unknown as R,\n  TextContentMetadata: TCM = z.undefined() as TCM,\n  ToolCallContentMetadata: CCM = z.undefined() as CCM,\n  MessageMetadata: MM = z.undefined() as MM\n) =>\n  z.object({\n    role: Role,\n    partialContent: PartialContent(TextContentMetadata, ToolCallContentMetadata),\n    metadata: MessageMetadata,\n  });\ntype PartialMessageType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof PartialRoleEnum,\n  TCM extends z.ZodTypeAny = z.ZodUndefined,\n  CCM extends z.ZodTypeAny = z.ZodUndefined,\n  MM extends z.ZodTypeAny = z.ZodUndefined,\n> = z.infer<ReturnType<typeof PartialMessage<R, TCM, CCM, MM>>>;\n\nexport { Message, PartialMessage, type MessageType, type PartialMessageType };\n","import {\n  Base64ImageContentTypeLiteral,\n  ContentType,\n  ImageContent,\n  ImageContentDetailsLiteralType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialMessage,\n  PartialMessageType,\n  PartialTextContent,\n  PartialTextModalityLiteral,\n  PartialToolCallContent,\n  PartialToolCallModalityLiteral,\n  RoleEnumType,\n  TextContent,\n  TextModalityLiteral,\n  ToolCallContent,\n  ToolCallModalityLiteral,\n  ToolResponseContent,\n  ToolResponseModalityLiteral,\n  UrlImageContentTypeLiteral,\n} from \"./../message\";\n\nconst createTextContent = (content: string): ContentType => {\n  return TextContent().parse({\n    modality: TextModalityLiteral,\n    value: content,\n  });\n};\n\nconst createToolCallContent = (index: number, id: string, name: string, args: string): ContentType => {\n  return ToolCallContent().parse({\n    modality: ToolCallModalityLiteral,\n    index: index,\n    id: id,\n    name: name,\n    arguments: args,\n  });\n};\n\nconst createTextMessage = (role: RoleEnumType, content: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      TextContent().parse({\n        modality: TextModalityLiteral,\n        value: content,\n      }),\n    ],\n  });\n};\n\nconst createUrlImageMessage = (role: RoleEnumType, url: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: UrlImageContentTypeLiteral,\n          url: url,\n        },\n      }),\n    ],\n  });\n};\n\nconst createBase64ImageMessage = (role: RoleEnumType, base64: string, detail: ImageContentDetailsLiteralType): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ImageContent().parse({\n        modality: ImageModalityLiteral,\n        detail: detail,\n        value: {\n          type: Base64ImageContentTypeLiteral,\n          base64: base64,\n        },\n      }),\n    ],\n  });\n};\n\nconst createToolCallMessage = (role: RoleEnumType, index: number, id: string, name: string, args: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolCallContent().parse({\n        modality: ToolCallModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        arguments: args,\n      }),\n    ],\n  });\n};\n\nconst createToolResponseMessage = (role: RoleEnumType, index: number, id: string, name: string, data: string): MessageType => {\n  return Message().parse({\n    role: role,\n    content: [\n      ToolResponseContent().parse({\n        modality: ToolResponseModalityLiteral,\n        index: index,\n        id: id,\n        name: name,\n        data: data,\n      }),\n    ],\n  });\n};\n\nconst createPartialTextMessage = (role: RoleEnumType, content: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialTextContent().parse({\n      modality: PartialTextModalityLiteral,\n      value: content,\n    }),\n  });\n};\n\nconst createPartialToolCallMessage = (role: RoleEnumType, index: number, id?: string, name?: string, args?: string): PartialMessageType => {\n  return PartialMessage().parse({\n    role: role,\n    partialContent: PartialToolCallContent().parse({\n      modality: PartialToolCallModalityLiteral,\n      index: index,\n      id: id,\n      name: name,\n      arguments: args,\n    }),\n  });\n};\n\nexport {\n  createTextContent,\n  createTextMessage,\n  createUrlImageMessage,\n  createBase64ImageMessage,\n  createToolCallContent,\n  createToolCallMessage,\n  createToolResponseMessage,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n};\n","import { z } from \"zod\";\n\nconst Config = <C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>>(\n  Config: C = z.record(z.string(), z.any()).optional() as unknown as C\n) => Config;\ntype ConfigType<C extends z.ZodRecord<z.ZodString, z.ZodAny> = z.ZodRecord<z.ZodString, z.ZodAny>> = z.infer<ReturnType<typeof Config<C>>>;\n\nexport { Config, type ConfigType };\n","import { z } from \"zod\";\n\n// TODO: move to json schema 7 type and validator when implemented for tool types\nconst ResponseSchemaTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"enum\"] as const;\nconst ResponseSchemaTypesLiteral = z.enum(ResponseSchemaTypes);\ntype ResponseSchemaTypesType = z.infer<typeof ResponseSchemaTypesLiteral>;\n\nconst ResponseSchemaProperty = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: z.union([ResponseSchemaTypesLiteral, z.array(z.union([ResponseSchemaTypesLiteral, z.literal(\"null\")]))]).optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n  $ref: z.string().optional(), // Reference to another schema\n});\ntype ResponseSchemaPropertyType = z.infer<typeof ResponseSchemaProperty>;\n\nconst ResponseSchemaStructure = z.object({\n  type: z.enum([\"object\"]),\n  required: z.array(z.string()),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(ResponseSchemaProperty),\n  additionalProperties: z.literal(false),\n});\ntype ResponseSchemaStructureType = z.infer<typeof ResponseSchemaStructure>;\n\nconst ResponseSchema = z\n  .object({\n    name: z\n      .string()\n      .regex(/^[a-zA-Z0-9_]{1,64}$/)\n      .max(64),\n    description: z.string().max(4096),\n    strict: z.boolean().optional(),\n    schema: ResponseSchemaStructure,\n  })\n  .optional();\ntype ResponseSchemaType = z.infer<typeof ResponseSchema>;\n\nexport {\n  ResponseSchema,\n  ResponseSchemaProperty,\n  ResponseSchemaStructure,\n  ResponseSchemaTypes,\n  ResponseSchemaTypesLiteral,\n  type ResponseSchemaTypesType,\n  type ResponseSchemaType,\n  type ResponseSchemaPropertyType,\n  type ResponseSchemaStructureType,\n};\n","// import { JSONSchema7 } from \"json-schema\";\n// import { Validator } from \"jsonschema\";\nimport { z } from \"zod\";\n\nconst FunctionToolLiteral = \"function\" as const;\n\n// TODO: fix 'name' property not allowed in JSONSchema7\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}).refine((schema) => {\n//       const validator = new Validator();\n//       return validator.validate(schema, { type: \"object\" }).valid;\n//     }),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n\n// const FunctionTool = z.object({\n//   type: z.literal(FunctionToolLiteral),\n//   definition: z.object({\n//     schema: z.object({}),\n//   }),\n//   callback: z.function().args(z.string().min(0)).returns(z.promise(z.any())).optional(),\n// });\n// type FunctionToolType = z.infer<typeof FunctionTool>;\n\nconst FunctionParameterTypes = [\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"];\nconst FunctionParameterTypesLiteral = z.enum([\"object\", \"array\", \"number\", \"string\", \"boolean\", \"null\"]);\ntype FunctionParameterTypesType = z.infer<typeof FunctionParameterTypesLiteral>;\n\n// TODO: make a proper fix here\nconst FunctionParameter = z.object({\n  anyOf: z.array(z.any()).optional(),\n  type: FunctionParameterTypesLiteral.optional(),\n  default: z.any().optional(),\n  title: z.string().optional(),\n  description: z.string().max(4096).optional(),\n  properties: z.record(z.any()).optional(),\n  required: z.array(z.string()).optional(),\n  minItems: z.number().int().min(0).optional(),\n  maxItems: z.number().int().optional(),\n  items: z.record(z.any()).optional(), // Recursive structure to handle nested arrays and objects\n  enum: z.array(z.union([z.string(), z.number(), z.boolean(), z.null()])).optional(), // Enum for allowed values\n  minimum: z.number().optional(), // Minimum value for number\n  maximum: z.number().optional(), // Maximum value for number\n  minLength: z.number().int().min(0).optional(), // Minimum length for string\n  maxLength: z.number().int().optional(), // Maximum length for string\n});\ntype FunctionParameterType = z.infer<typeof FunctionParameter>;\n\nconst FunctionParameters = z.object({\n  type: z.enum([\"object\"]),\n  title: z.string().optional(),\n  $defs: z.record(z.any()).optional(),\n  properties: z.record(FunctionParameter).optional(),\n  required: z.array(z.string()).optional(),\n});\ntype FunctionParametersType = z.infer<typeof FunctionParameters>;\n\nconst Function = z.object({\n  name: z\n    .string()\n    .regex(/^[a-zA-Z0-9_]{1,64}$/)\n    .max(64),\n  description: z.string().max(4096),\n  parameters: z.any(),\n  strict: z.boolean().optional(),\n});\ntype FunctionType = z.infer<typeof Function>;\n\nconst ToolTypes = [\"function\"];\nconst ToolTypesLiteral = z.enum([\"function\"]);\ntype ToolTypesType = z.infer<typeof ToolTypesLiteral>;\n\nconst FunctionTool = z.object({\n  type: ToolTypesLiteral,\n  definition: z.object({\n    schema: Function, // TODO: convert to union with more tool types\n  }),\n});\ntype FunctionToolType = z.infer<typeof FunctionTool>;\n\n// const Tools = z.array(Tool).nonempty().optional();\n// type ToolsType = z.infer<typeof Tools>;\n\nexport {\n  Function,\n  FunctionParameter,\n  FunctionParameters,\n  FunctionParameterTypes,\n  FunctionParameterTypesLiteral,\n  ToolTypes,\n  ToolTypesLiteral,\n  type FunctionParametersType,\n  type FunctionParameterType,\n  type FunctionParameterTypesType,\n  type FunctionType,\n  type ToolTypesType,\n};\n\nexport { FunctionTool, FunctionToolLiteral, type FunctionToolType };\n","import { z } from \"zod\";\n\nimport { FunctionTool, FunctionToolLiteral } from \"./function-tool\";\n\nconst ToolLiterals = [FunctionToolLiteral] as const;\nconst ToolEnum = z.enum(ToolLiterals);\ntype ToolEnumType = z.infer<typeof ToolEnum>;\n\nconst Tool = <FTM extends z.ZodTypeAny>(FunctionToolMetadata: FTM = z.undefined() as FTM) =>\n  z.discriminatedUnion(\"type\", [FunctionTool.extend({ metadata: FunctionToolMetadata })]);\ntype ToolType<FTM extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof Tool<FTM>>>;\n\nexport { Tool, ToolEnum, ToolLiterals, type ToolEnumType, type ToolType };\n","import { z } from \"zod\";\n\nconst EmbeddingTextModalityLiteral = \"text\" as const;\nconst EmbeddingTokenModalityLiteral = \"token\" as const;\n\nconst EmbeddingModalityLiterals = [EmbeddingTextModalityLiteral, EmbeddingTokenModalityLiteral] as const;\nconst EmbeddingModalityEnum = z.enum(EmbeddingModalityLiterals);\ntype EmbeddingModalityEnumType = z.infer<typeof EmbeddingModalityEnum>;\n\nconst TextEmbeddingRequests = z.array(z.string().min(1));\ntype TextEmbeddingRequestsType = z.infer<typeof TextEmbeddingRequests>;\n\nconst TokenEmbeddingRequests = z.array(z.array(z.number().int().nonnegative()));\ntype TokenEmbeddingRequestsType = z.infer<typeof TokenEmbeddingRequests>;\n\nconst EmbeddingRequests = <M extends z.ZodTypeAny = z.ZodUndefined>(Metadata: M = z.undefined() as M) =>\n  z.discriminatedUnion(\"modality\", [\n    z.object({\n      modality: z.literal(EmbeddingTextModalityLiteral),\n      metadata: Metadata,\n      requests: TextEmbeddingRequests,\n    }),\n    z.object({\n      modality: z.literal(EmbeddingTokenModalityLiteral),\n      metadata: Metadata,\n      requests: TokenEmbeddingRequests,\n    }),\n  ]);\ntype EmbeddingRequestsType<M extends z.ZodTypeAny = z.ZodUndefined> = z.infer<ReturnType<typeof EmbeddingRequests<M>>>;\n\nexport {\n  EmbeddingTextModalityLiteral,\n  EmbeddingTokenModalityLiteral,\n  EmbeddingModalityLiterals,\n  EmbeddingModalityEnum,\n  TextEmbeddingRequests,\n  TokenEmbeddingRequests,\n  EmbeddingRequests,\n  type EmbeddingRequestsType,\n  type EmbeddingModalityEnumType,\n  type TextEmbeddingRequestsType,\n  type TokenEmbeddingRequestsType,\n};\n","import { z } from \"zod\";\n\nconst FloatEmbeddingLiteral = \"float\" as const;\nconst FloatEmbedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.array(z.number()),\n});\ntype FloatEmbeddingType = z.infer<typeof FloatEmbedding>;\n\nconst Base64EmbeddingLiteral = \"base64\" as const;\nconst Base64Embedding = z.object({\n  index: z.number().int().nonnegative(),\n  embedding: z.string().base64(),\n});\ntype Base64EmbeddingType = z.infer<typeof Base64Embedding>;\n\nconst EmbeddingsUsage = z.object({\n  totalTokens: z.number().int().nonnegative(),\n});\ntype EmbeddingsUsageType = z.infer<typeof EmbeddingsUsage>;\n\nconst EmbeddingResponse = z.discriminatedUnion(\"encodingFormat\", [\n  z.object({\n    encodingFormat: z.literal(FloatEmbeddingLiteral),\n    embeddings: z.array(FloatEmbedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n  z.object({\n    encodingFormat: z.literal(Base64EmbeddingLiteral),\n    embeddings: z.array(Base64Embedding),\n    usage: EmbeddingsUsage.optional(),\n  }),\n]);\ntype EmbeddingResponseType = z.infer<typeof EmbeddingResponse>;\n\nexport {\n  FloatEmbeddingLiteral,\n  Base64EmbeddingLiteral,\n  FloatEmbedding,\n  Base64Embedding,\n  EmbeddingsUsage,\n  EmbeddingResponse,\n  type FloatEmbeddingType,\n  type Base64EmbeddingType,\n  type EmbeddingsUsageType,\n  type EmbeddingResponseType,\n};\n","import { z } from \"zod\";\n\nimport { Message, PartialMessage } from \"./../message\";\n\nconst ChatUsage = z.object({\n  promptTokens: z.number().nonnegative(),\n  completionTokens: z.number().nonnegative(),\n  totalTokens: z.number().nonnegative(),\n});\ntype ChatUsageType = z.infer<typeof ChatUsage>;\n\nconst ChatBaseLogProb = z.object({\n  token: z.string(),\n  logProb: z.number(),\n  bytes: z.array(z.number().int()).nullable(),\n});\ntype ChatBaseLogProbType = z.infer<typeof ChatBaseLogProb>;\n\nconst ChatLogProb = ChatBaseLogProb.extend({\n  topLogProbs: z.array(ChatBaseLogProb),\n});\ntype ChatLogProbType = z.infer<typeof ChatLogProb>;\n\nconst ChatLogProbs = z.array(ChatLogProb);\ntype ChatLogProbsType = z.infer<typeof ChatLogProbs>;\n\nconst ChatResponse = z.object({\n  messages: z.array(Message()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype ChatResponseType = z.infer<typeof ChatResponse>;\n\nconst PartialChatResponse = z.object({\n  partialMessages: z.array(PartialMessage()),\n  usage: ChatUsage.optional(),\n  logProbs: ChatLogProbs.optional(),\n});\ntype PartialChatResponseType = z.infer<typeof PartialChatResponse>;\n\nexport {\n  ChatUsage,\n  ChatBaseLogProb,\n  ChatLogProb,\n  ChatLogProbs,\n  ChatResponse,\n  PartialChatResponse,\n  type ChatUsageType,\n  type ChatBaseLogProbType,\n  type ChatLogProbType,\n  type ChatLogProbsType,\n  type ChatResponseType,\n  type PartialChatResponseType,\n};\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ProviderErrorLiteral = \"ProviderError\" as const;\nexport class ProviderError extends GatewayBaseError {\n  readonly name = ProviderErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ProviderErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n  }\n\n  static isProviderError(error: unknown): error is ProviderError {\n    return error instanceof ProviderError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst ModelResponseErrorLiteral = \"ModelResponseError\" as const;\nexport class ModelResponseError extends GatewayBaseError {\n  readonly name = ModelResponseErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, ModelResponseErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n  }\n\n  static isModelResponseError(error: unknown): error is ModelResponseError {\n    return error instanceof ModelResponseError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidModelRequestErrorLiteral = \"InvalidModelRequestError\" as const;\nexport class InvalidModelRequestError extends GatewayBaseError {\n  readonly name = InvalidModelRequestErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidModelRequestErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidModelRequestError(error: unknown): error is InvalidModelRequestError {\n    return error instanceof InvalidModelRequestError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidConfigErrorLiteral = \"InvalidConfigError\" as const;\nexport class InvalidConfigError extends GatewayBaseError {\n  readonly name = InvalidConfigErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidConfigErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidConfigError(error: unknown): error is InvalidConfigError {\n    return error instanceof InvalidConfigError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidMessagesErrorLiteral = \"InvalidMessagesError\" as const;\nexport class InvalidMessagesError extends GatewayBaseError {\n  readonly name = InvalidMessagesErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidMessagesErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidMessagesError(error: unknown): error is InvalidMessagesError {\n    return error instanceof InvalidMessagesError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidToolsErrorLiteral = \"InvalidToolsError\" as const;\nexport class InvalidToolsError extends GatewayBaseError {\n  readonly name = InvalidToolsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidToolsErrorLiteral);\n    this.cause = cause;\n    this.info = info;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidToolsError(error: unknown): error is InvalidToolsError {\n    return error instanceof InvalidToolsError;\n  }\n}\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst InvalidEmbeddingRequestsErrorLiteral = \"InvalidEmbeddingRequestsError\" as const;\nexport class InvalidEmbeddingRequestsError extends GatewayBaseError {\n  readonly name = InvalidEmbeddingRequestsErrorLiteral;\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, InvalidEmbeddingRequestsErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isInvalidEmbeddingRequestsError(error: unknown): error is InvalidEmbeddingRequestsError {\n    return error instanceof InvalidEmbeddingRequestsError;\n  }\n}\n","import { z } from \"zod\";\n\nconst MultiStringConfigItemTypeLiteral = \"multi-string\" as const;\n\nconst MultiStringConfigItemDef = z.object({\n  type: z.literal(MultiStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  max: z.number().int().positive(),\n});\ntype MultiStringConfigItemType = z.infer<typeof MultiStringConfigItemDef>;\n\nconst MultiStringConfigItemSchema = (max: number) => z.array(z.string()).max(max).default([]).optional();\ntype MultiStringConfigItemSchemaType = z.infer<ReturnType<typeof MultiStringConfigItemSchema>>;\n\nconst MultiStringConfigItem = (data: Omit<MultiStringConfigItemType, \"type\">) => {\n  return {\n    def: MultiStringConfigItemDef.parse({\n      type: MultiStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: MultiStringConfigItemSchema(data.max),\n  };\n};\n\nexport {\n  MultiStringConfigItem,\n  MultiStringConfigItemDef,\n  MultiStringConfigItemSchema,\n  MultiStringConfigItemTypeLiteral,\n  type MultiStringConfigItemSchemaType,\n  type MultiStringConfigItemType,\n};\n","import { z } from \"zod\";\n\nconst ObjectSchemaConfigItemTypeLiteral = \"object-schema\" as const;\n\nconst ObjectSchemaConfigItemDef = z.object({\n  type: z.literal(ObjectSchemaConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  objectSchema: z.any(),\n});\ntype ObjectSchemaConfigItemType = z.infer<typeof ObjectSchemaConfigItemDef>;\n\nconst ObjectSchemaConfigItemSchema = <S extends z.ZodRawShape>(schema: z.ZodObject<S>) => schema.optional();\ntype ObjectSchemaConfigItemSchemaType<S extends z.ZodRawShape = z.ZodRawShape> = z.infer<\n  ReturnType<typeof ObjectSchemaConfigItemSchema<S>>\n>;\n\nconst ObjectSchemaConfigItem = (data: Omit<ObjectSchemaConfigItemType, \"type\">) => {\n  return {\n    def: ObjectSchemaConfigItemDef.parse({\n      type: ObjectSchemaConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: ObjectSchemaConfigItemSchema(data.objectSchema),\n  };\n};\n\nexport {\n  ObjectSchemaConfigItem,\n  ObjectSchemaConfigItemDef,\n  ObjectSchemaConfigItemSchema,\n  ObjectSchemaConfigItemTypeLiteral,\n  type ObjectSchemaConfigItemType,\n  type ObjectSchemaConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst RangeConfigItemTypeLiteral = \"range\" as const;\n\nconst RangeConfigItemDef = z.object({\n  type: z.literal(RangeConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  min: z.number().int(),\n  max: z.number().int(),\n  step: z.number().positive(),\n  default: z.number(),\n});\ntype RangeConfigItemDefType = z.infer<typeof RangeConfigItemDef>;\n\nconst RangeConfigItemSchema = (min: number, max: number, step: number, defaultValue: number) =>\n  z.number().min(min).max(max).step(step).default(defaultValue).optional();\ntype RangeConfigItemSchemaType = z.infer<ReturnType<typeof RangeConfigItemSchema>>;\n\nconst RangeConfigItem = (data: Omit<RangeConfigItemDefType, \"type\">) => {\n  return {\n    def: RangeConfigItemDef.parse({\n      type: RangeConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: RangeConfigItemSchema(data.min, data.max, data.step, data.default),\n  };\n};\n\nexport {\n  RangeConfigItem,\n  RangeConfigItemDef,\n  RangeConfigItemSchema,\n  RangeConfigItemTypeLiteral,\n  type RangeConfigItemDefType,\n  type RangeConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectBooleanConfigItemTypeLiteral = \"select-boolean\" as const;\n\nconst SelectBooleanConfigItemDef = z.object({\n  type: z.literal(SelectBooleanConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.boolean().nullable(),\n});\ntype SelectBooleanConfigItemDefType = z.infer<typeof SelectBooleanConfigItemDef>;\n\nconst SelectBooleanConfigItemSchema = (defaultValue: boolean | null) => z.boolean().nullable().default(defaultValue).optional();\ntype SelectBooleanConfigItemSchemaType = z.infer<ReturnType<typeof SelectBooleanConfigItemSchema>>;\n\nconst SelectBooleanConfigItem = (data: Omit<SelectBooleanConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectBooleanConfigItemDef.parse({\n      type: SelectBooleanConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectBooleanConfigItemSchema(data.default),\n  };\n};\n\nexport {\n  SelectBooleanConfigItem,\n  SelectBooleanConfigItemDef,\n  SelectBooleanConfigItemSchema,\n  SelectBooleanConfigItemTypeLiteral,\n  type SelectBooleanConfigItemDefType,\n  type SelectBooleanConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nconst SelectStringConfigItemTypeLiteral = \"select-string\" as const;\n\nconst SelectStringConfigItemDef = z.object({\n  type: z.literal(SelectStringConfigItemTypeLiteral),\n  param: z.string().min(1),\n  title: z.string().min(1),\n  description: z.string().min(1).max(500),\n  default: z.string().min(1).nullable(),\n  choices: z.array(z.string().min(1)),\n});\ntype SelectStringConfigItemDefType = z.infer<typeof SelectStringConfigItemDef>;\n\nconst SelectStringConfigItemSchema = (defaultValue: string | null, choices: string[]) =>\n  z\n    .enum(choices as [string, ...string[]])\n    .nullable()\n    .default(defaultValue)\n    .optional();\ntype SelectStringConfigItemSchemaType = z.infer<ReturnType<typeof SelectStringConfigItemSchema>>;\n\nconst SelectStringConfigItem = (data: Omit<SelectStringConfigItemDefType, \"type\">) => {\n  return {\n    def: SelectStringConfigItemDef.parse({\n      type: SelectStringConfigItemTypeLiteral,\n      ...data,\n    }),\n    schema: SelectStringConfigItemSchema(data.default, data.choices),\n  };\n};\n\nexport {\n  SelectStringConfigItem,\n  SelectStringConfigItemDef,\n  SelectStringConfigItemSchema,\n  SelectStringConfigItemTypeLiteral,\n  type SelectStringConfigItemDefType,\n  type SelectStringConfigItemSchemaType,\n};\n","import { z } from \"zod\";\n\nimport { MultiStringConfigItemDef, MultiStringConfigItemTypeLiteral } from \"./multi-string-config-item\";\nimport { ObjectSchemaConfigItemDef, ObjectSchemaConfigItemTypeLiteral } from \"./object-schema-config-item\";\nimport { RangeConfigItemDef, RangeConfigItemTypeLiteral } from \"./range-config-item\";\nimport { SelectBooleanConfigItemDef, SelectBooleanConfigItemTypeLiteral } from \"./select-boolean-config-item\";\nimport { SelectStringConfigItemDef, SelectStringConfigItemTypeLiteral } from \"./select-string-config-item\";\n\nconst ConfigItemLiterals = [\n  RangeConfigItemTypeLiteral,\n  MultiStringConfigItemTypeLiteral,\n  SelectStringConfigItemTypeLiteral,\n  ObjectSchemaConfigItemTypeLiteral,\n  SelectBooleanConfigItemTypeLiteral,\n] as const;\nconst ConfigItemEnum = z.enum(ConfigItemLiterals);\ntype ConfigItemEnumType = z.infer<typeof ConfigItemEnum>;\n\nconst ConfigItemDef = z.discriminatedUnion(\"type\", [\n  RangeConfigItemDef,\n  MultiStringConfigItemDef,\n  SelectStringConfigItemDef,\n  SelectBooleanConfigItemDef,\n  ObjectSchemaConfigItemDef,\n]);\ntype ConfigItemDefType = z.infer<typeof ConfigItemDef>;\n\nexport { ConfigItemDef, ConfigItemEnum, ConfigItemLiterals, type ConfigItemDefType, type ConfigItemEnumType };\n","import { z } from \"zod\";\n\nimport { ModalityEnum, RoleEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\nconst ChatModelSchema = <\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n>(\n  Roles: R = RoleEnum as unknown as R,\n  Modalities: M = ModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    roles: z.record(Roles, z.string().min(1).optional()),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n  });\ntype ChatModelSchemaType<\n  R extends z.ZodEnum<[string, ...string[]]> = typeof RoleEnum,\n  M extends z.ZodEnum<[string, ...string[]]> = typeof ModalityEnum,\n> = z.infer<ReturnType<typeof ChatModelSchema<R, M>>>;\n\nexport { ChatModelSchema, type ChatModelSchemaType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModalityEnum } from \"@adaline/types\";\n\nimport { ConfigItemDef } from \"../../types/config\";\n\n// TODO: add embedding model properties (dimensions, etc)\nconst EmbeddingModelSchema = <M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum>(\n  Modalities: M = EmbeddingModalityEnum as unknown as M\n) =>\n  z.object({\n    name: z.string().min(1),\n    description: z.string().min(1),\n    modalities: z.array(Modalities).nonempty(),\n    maxInputTokens: z.number().int().positive().min(1),\n    maxOutputTokens: z.number().int().positive().min(1),\n    config: z\n      .object({\n        def: z.record(z.string().min(1), ConfigItemDef),\n        schema: z.instanceof(z.ZodObject),\n      })\n      .refine(\n        (config) => {\n          const defKeys = Object.keys(config.def);\n          const schemaKeys = Object.keys(config.schema?.shape ?? {});\n          return defKeys.every((key) => schemaKeys.includes(key)) && schemaKeys.every((key) => defKeys.includes(key));\n        },\n        {\n          message: \"Keys in 'config.def' must exactly match keys in 'config.schema'\",\n        }\n      ),\n  });\ntype EmbeddingModelSchemaType<M extends z.ZodEnum<[string, ...string[]]> = typeof EmbeddingModalityEnum> = z.infer<\n  ReturnType<typeof EmbeddingModelSchema<M>>\n>;\n\nexport { EmbeddingModelSchema, type EmbeddingModelSchemaType };\n","import { z } from \"zod\";\n\nconst Headers = z.record(z.string());\ntype HeadersType = z.infer<typeof Headers>;\n\nexport { Headers, type HeadersType };\n","import { z } from \"zod\";\n\nconst Params = z.record(\n  z.union([\n    z.boolean(),\n    z.string(),\n    z.number(),\n    z.object({}),\n    z.array(z.any()),\n    z.null(),\n    z.undefined(),\n  ])\n);\ntype ParamsType = z.infer<typeof Params>;\n\nexport { Params, type ParamsType };\n","import { z } from \"zod\";\n\nconst Url = z.string().url();\ntype UrlType = z.infer<typeof Url>;\n\nexport { Url, type UrlType };\n","const TEMPERATURE = {\n  type: \"range\",\n  title: \"Temperature\",\n  description:\n    \"Adjusts the model's creativity level. With a setting of 0, the model strictly picks the most probable next word. \\\n    For endeavors that benefit from a dash of inventiveness, consider dialing it up to 0.7 or higher, enabling the model to produce text \\\n    that's unexpectedly fresh.\",\n} as const;\n\nconst MAX_TOKENS = {\n  type: \"range\",\n  title: \"Max tokens\",\n  description:\n    \"Specify the total tokens for generation, where one token approximates four English characters. \\\n    Setting this to 0 defaults to the model's maximum capacity.\",\n} as const;\n\nconst STOP = (max: number) =>\n  ({\n    type: \"multi\",\n    title: \"Stop sequence\",\n    description: `Enter up to ${max} sequences that will halt additional text output. \\\n      The generated text will exclude these sequences.`,\n  }) as const;\n\nconst TOP_A = {\n  type: \"range\",\n  title: \"Top A\",\n  description:\n    \"Considers only the top tokens that have 'sufficiently high' probabilities relative to the most likely token, \\\n    functioning like a dynamic Top-P. \\\n    A lower Top-A value narrows down the token choices based on the highest probability token, \\\n    while a higher Top-A value refines the filtering without necessarily impacting the creativity of the output.\",\n} as const;\n\nconst TOP_P = {\n  type: \"range\",\n  title: \"Top P\",\n  description:\n    \"Selects a subset of likely tokens for generation, restricting choices to the top-P fraction of possibilities, \\\n    such as the top 10% when P=0.1. \\\n    This approach can limit the variety of the output. By default, it's set to 1, indicating no restriction. \\\n    It's advised to adjust this parameter or temperature to modulate output diversity, but not to modify both simultaneously.\",\n} as const;\n\nconst TOP_K = {\n  type: \"range\",\n  title: \"Top K\",\n  description:\n    \"Select only from the highest K probabilities for each following word, effectively eliminating the less likely 'long tail' options.\",\n} as const;\n\nconst MIN_P = {\n  type: \"range\",\n  title: \"Min P\",\n  description:\n    \"Specifies the minimum probability a token must have to be considered, in relation to the probability of the most likely token. \\\n    (This value varies based on the confidence level of the top token.) \\\n    For example, if Min-P is set to 0.1, only tokens with at least 1/10th the probability of the highest-ranked token will be considered.\",\n} as const;\n\nconst FREQUENCY_PENALTY = {\n  type: \"range\",\n  title: \"Frequency penalty\",\n  description:\n    \"Minimize redundancy.\\\n    By assigning a penalty to frequently used tokens within the text, the likelihood of repeating identical phrases is reduced. \\\n    The default setting for this penalty is zero.\",\n} as const;\n\nconst PRESENCE_PENALTY = {\n  type: \"range\",\n  title: \"Presence penalty\",\n  description:\n    \"Enhance the introduction of novel subjects by reducing the preference for tokens that have already appeared in the text, \\\n    thus boosting the chances of exploring fresh topics. \\\n    The standard setting for this is zero.\",\n} as const;\n\nconst SEED = {\n  type: \"range\",\n  title: \"Seed\",\n  description:\n    \"When seed is fixed to a specific value, the model makes a best effort to provide the same response for repeated requests. \\\n    Deterministic output isn't guaranteed. \\\n    Also, changing the model or parameter settings, such as the temperature, \\\n    can cause variations in the response even when you use the same seed value. \\\n    By default, a random seed value is used.\",\n} as const;\n\nconst REPETITION_PENALTY = {\n  type: \"range\",\n  title: \"Repetition penalty\",\n  description:\n    \"Reduces the likelihood of repeating tokens from the input. \\\n    Increasing this value makes the model less prone to repetition, but setting it too high may lead to less coherent output, \\\n    often resulting in run-on sentences missing smaller words. \\\n    The token penalty is scaled according to the original token's probability.\",\n} as const;\n\nconst LOG_PROBS = {\n  type: \"boolean\",\n  title: \"Log probs\",\n  description:\n    \"Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.\",\n} as const;\n\nconst TOP_LOG_PROBS = {\n  type: \"range\",\n  title: \"Top log probs\",\n  description:\n    \"The number of most likely tokens to return at each token position, each with an associated log probability. \\\n    'logprobs' must be set to true if this parameter is used.\",\n} as const;\n\nconst ECHO = {\n  type: \"boolean\",\n  title: \"Echo\",\n  description: \"If true, the response will contain the prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. For JSON, you must include the string 'JSON' in some form within your system / user prompt.\",\n} as const;\n\nconst RESPONSE_FORMAT_WITH_SCHEMA = {\n  type: \"select\",\n  title: \"Response format\",\n  description:\n    \"Choose the response format of your model. 'json_object' colloquially known as JSON mode, instructs the model to respond with a valid \\\n  JSON (must include the term 'json' in prompt). 'json_schema' colloquially known as structured outputs, allows you to specify a strict \\\n  response schema that the model will adhere to.\",\n} as const;\n\nconst RESPONSE_SCHEMA = {\n  type: \"object\",\n  title: \"Response schema\",\n  description: \"When response format is set to 'json_schema', the model will return a JSON object of the specified schema.\",\n} as const;\n\nconst CHAT_CONFIG = {\n  TEMPERATURE,\n  MAX_TOKENS,\n  STOP,\n  TOP_A,\n  TOP_P,\n  TOP_K,\n  MIN_P,\n  FREQUENCY_PENALTY,\n  PRESENCE_PENALTY,\n  REPETITION_PENALTY,\n  SEED,\n  LOG_PROBS,\n  TOP_LOG_PROBS,\n  ECHO,\n  RESPONSE_FORMAT,\n  RESPONSE_FORMAT_WITH_SCHEMA,\n  RESPONSE_SCHEMA,\n};\n\nexport { CHAT_CONFIG };\n","const removeUndefinedEntries = <T = unknown>(record: Record<string, T | undefined>): Record<string, T> => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  return Object.fromEntries(Object.entries(record).filter(([_, value]) => value != null)) as Record<string, T>;\n};\n\nexport { removeUndefinedEntries };\n","const urlWithoutTrailingSlash = (url: string): string => {\n  return url?.replace(/\\/$/, \"\");\n};\n\nexport { urlWithoutTrailingSlash };\n","import { CHAT_CONFIG, MultiStringConfigItem, RangeConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\n\nconst temperature = RangeConfigItem({\n  param: \"temperature\",\n  title: CHAT_CONFIG.TEMPERATURE.title,\n  description: CHAT_CONFIG.TEMPERATURE.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst maxTokens = (maxOutputTokens: number) =>\n  RangeConfigItem({\n    param: \"max_tokens\",\n    title: CHAT_CONFIG.MAX_TOKENS.title,\n    description: CHAT_CONFIG.MAX_TOKENS.description,\n    min: 0,\n    max: maxOutputTokens,\n    step: 1,\n    default: 0,\n  });\n\nconst stop = (maxSequences: number) =>\n  MultiStringConfigItem({\n    param: \"stop_sequences\",\n    title: CHAT_CONFIG.STOP(maxSequences).title,\n    description: CHAT_CONFIG.STOP(maxSequences).description,\n    max: maxSequences,\n  });\n\nconst topP = RangeConfigItem({\n  param: \"top_p\",\n  title: CHAT_CONFIG.TOP_P.title,\n  description: CHAT_CONFIG.TOP_P.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst topK = RangeConfigItem({\n  param: \"top_k\",\n  title: CHAT_CONFIG.TOP_K.title,\n  description: CHAT_CONFIG.TOP_K.description,\n  min: 0,\n  max: 1,\n  step: 0.01,\n  default: 1,\n});\n\nconst toolChoice = SelectStringConfigItem({\n  param: \"tool_choice\",\n  title: \"Tool choice\",\n  description:\n    \"Controls which (if any) tool is called by the model. \\\n    'any' means the model will call any of the provided tools. \\\n    'auto' means the model can pick between generating a message or calling a tool.\",\n  default: \"auto\",\n  choices: [\"auto\", \"any\"],\n});\n\nexport { maxTokens, stop, temperature, toolChoice, topK, topP };\n","import { SelectBooleanConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\n\nconst encodingFormat = SelectStringConfigItem({\n  param: \"encoding_format\",\n  title: \"Encoding format\",\n  description: \"Select the encoding format for the word embedding.\",\n  default: null, // If not specified (defaults to null): the embeddings are represented as lists of floating-point numbers;\n  choices: [\"base64\"],\n});\n\nconst inputType = SelectStringConfigItem({\n  param: \"input_type\",\n  title: \"Input type\",\n  description: \"Select the input type for the word embedding.\",\n  default: null,\n  choices: [\"query\", \"document\"],\n});\n\nconst truncation = SelectBooleanConfigItem({\n  param: \"truncation\",\n  title: \"Truncation\",\n  description: \"Select the truncation for the word embedding.\",\n  default: true,\n});\n\nexport { encodingFormat, inputType, truncation };\n","import { z } from \"zod\";\n\nimport { encodingFormat, inputType, truncation } from \"./common.config.embedding-model.anthropic\";\n\nconst EmbeddingModelBaseConfigSchema = () =>\n  z.object({\n    encodingFormat: encodingFormat.schema,\n    inputType: inputType.schema,\n    truncation: truncation.schema,\n  });\n\nconst EmbeddingModelBaseConfigDef = () => ({\n  encodingFormat: encodingFormat.def,\n  inputType: inputType.def,\n  truncation: truncation.def,\n});\n\nexport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema };\n","import { ChatModelBaseConfigDef, ChatModelBaseConfigSchema } from \"./chat-model/base.config.chat-model.anthropic\";\nimport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema } from \"./embedding-model/base.config.embedding-model.anthropic\";\n\nconst AnthropicChatModelConfigs = {\n  base: (maxOutputTokens: number, maxSequences: number) => ({\n    def: ChatModelBaseConfigDef(maxOutputTokens, maxSequences),\n    schema: ChatModelBaseConfigSchema(maxOutputTokens, maxSequences),\n  }),\n} as const;\n\nconst AnthropicEmbeddingModelConfigs = {\n  base: () => ({\n    def: EmbeddingModelBaseConfigDef(),\n    schema: EmbeddingModelBaseConfigSchema(),\n  }),\n} as const;\n\nexport { AnthropicChatModelConfigs, AnthropicEmbeddingModelConfigs };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType, ChatModelV1, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderError, ProviderV1 } from \"@adaline/provider\";\n\nimport * as Models from \"./../models\";\n\nconst ProviderLiteral = \"anthropic\";\nclass Anthropic<C extends Models.BaseChatModelOptionsType, E extends Models.BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n  static readonly chatBaseUrl: string = \"https://api.anthropic.com/v1\";\n  static readonly embeddingBaseUrl: string = \"https://api.voyageai.com/v1\";\n\n  private readonly chatModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): ChatModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: ChatModelSchemaType;\n    }\n  > = {\n    [Models.Claude3Haiku20240307Literal]: {\n      model: Models.Claude3Haiku20240307,\n      modelOptions: Models.Claude3Haiku20240307Options,\n      modelSchema: Models.Claude3Haiku20240307Schema,\n    },\n    [Models.Claude3Sonnet20240229Literal]: {\n      model: Models.Claude3Sonnet20240229,\n      modelOptions: Models.Claude3Sonnet20240229Options,\n      modelSchema: Models.Claude3Sonnet20240229Schema,\n    },\n    [Models.Claude3Opus20240229Literal]: {\n      model: Models.Claude3Opus20240229,\n      modelOptions: Models.Claude3Opus20240229Options,\n      modelSchema: Models.Claude3Opus20240229Schema,\n    },\n    [Models.Claude3_5Sonnet20240620Literal]: {\n      model: Models.Claude3_5Sonnet20240620,\n      modelOptions: Models.Claude3_5Sonnet20240620Options,\n      modelSchema: Models.Claude3_5Sonnet20240620Schema,\n    },\n    [Models.Claude3_5Sonnet20241022Literal]: {\n      model: Models.Claude3_5Sonnet20241022,\n      modelOptions: Models.Claude3_5Sonnet20241022Options,\n      modelSchema: Models.Claude3_5Sonnet20241022Schema,\n    },\n    [Models.Claude3_5Haiku20241022Literal]: {\n      model: Models.Claude3_5Haiku20241022,\n      modelOptions: Models.Claude3_5Haiku20241022Options,\n      modelSchema: Models.Claude3_5Haiku20241022Schema,\n    },\n    [Models.Claude3_5SonnetLatestLiteral]: {\n      model: Models.Claude3_5SonnetLatest,\n      modelOptions: Models.Claude3_5SonnetLatestOptions,\n      modelSchema: Models.Claude3_5SonnetLatestSchema,\n    },\n    [Models.Claude3_5HaikuLatestLiteral]: {\n      model: Models.Claude3_5HaikuLatest,\n      modelOptions: Models.Claude3_5HaikuLatestOptions,\n      modelSchema: Models.Claude3_5HaikuLatestSchema,\n    },\n  };\n\n  private readonly embeddingModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): EmbeddingModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: EmbeddingModelSchemaType;\n    }\n  > = {\n    [Models.Voyage3Literal]: {\n      model: Models.Voyage3,\n      modelOptions: Models.Voyage3Options,\n      modelSchema: Models.Voyage3Schema,\n    },\n    [Models.Voyage3LiteLiteral]: {\n      model: Models.Voyage3Lite,\n      modelOptions: Models.Voyage3LiteOptions,\n      modelSchema: Models.Voyage3LiteSchema,\n    },\n    [Models.VoyageCode2Literal]: {\n      model: Models.VoyageCode2,\n      modelOptions: Models.VoyageCode2Options,\n      modelSchema: Models.VoyageCode2Schema,\n    },\n    [Models.VoyageLaw2Literal]: {\n      model: Models.VoyageLaw2,\n      modelOptions: Models.VoyageLaw2Options,\n      modelSchema: Models.VoyageLaw2Schema,\n    },\n    [Models.VoyageMultilingual2Literal]: {\n      model: Models.VoyageMultilingual2,\n      modelOptions: Models.VoyageMultilingual2Options,\n      modelSchema: Models.VoyageMultilingual2Schema,\n    },\n    [Models.VoyageFinance2Literal]: {\n      model: Models.VoyageFinance2,\n      modelOptions: Models.VoyageFinance2Options,\n      modelSchema: Models.VoyageFinance2Schema,\n    },\n  };\n\n  chatModelLiterals(): string[] {\n    return Object.keys(this.chatModelFactories);\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return Object.keys(this.chatModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.chatModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, ChatModelSchemaType>\n    );\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.chatModelFactories)) {\n      throw new ProviderError({\n        info: `Anthropic chat model: ${modelName} not found`,\n        cause: new Error(`Anthropic chat model: ${modelName} not found, available chat models: \n          ${this.chatModelLiterals().join(\", \")}`),\n      });\n    }\n\n    const model = this.chatModelFactories[modelName].model;\n    const parsedOptions = this.chatModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return Object.keys(this.embeddingModelFactories);\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return Object.keys(this.embeddingModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.embeddingModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, EmbeddingModelSchemaType>\n    );\n  }\n\n  embeddingModel(options: E): EmbeddingModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.embeddingModelFactories)) {\n      throw new ProviderError({\n        info: `Anthropic embedding model: ${modelName} not found`,\n        cause: new Error(`Anthropic embedding model: ${modelName} not found, available embedding models: \n          ${this.embeddingModelLiterals().join(\", \")}`),\n      });\n    }\n\n    const model = this.embeddingModelFactories[modelName].model;\n    const parsedOptions = this.embeddingModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n}\n\nexport { Anthropic, ProviderLiteral };\n","import { z } from \"zod\";\n\nimport { AssistantRoleLiteral, SystemRoleLiteral, UserRoleLiteral, ToolRoleLiteral } from \"@adaline/types\";\n\nconst AnthropicChatModelRoles = z.enum([SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral]);\n\nconst AnthropicChatModelRolesMap = {\n  system: SystemRoleLiteral,\n  user: UserRoleLiteral,\n  assistant: AssistantRoleLiteral,\n  tool: UserRoleLiteral,\n} as const;\n\nexport { AnthropicChatModelRoles, AnthropicChatModelRolesMap };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType } from \"@adaline/provider\";\nimport { ImageModalityLiteral, TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral } from \"@adaline/types\";\n\nconst AnthropicChatModelModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst AnthropicChatModelModalitiesEnum = z.enum([\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n]);\n\nexport { AnthropicChatModelModalitiesEnum, AnthropicChatModelModalities };\n","import { z } from \"zod\";\n\nconst AnthropicCompleteChatTextResponse = z.object({\n  type: z.literal(\"text\"),\n  text: z.string(),\n});\n\nconst AnthropicCompleteChatToolResponse = z.object({\n  type: z.literal(\"tool_use\"),\n  id: z.string(),\n  name: z.string(),\n  input: z.record(z.any()),\n});\n\nconst AnthropicCompleteChatResponse = z.object({\n  content: z.array(z.discriminatedUnion(\"type\", [AnthropicCompleteChatTextResponse, AnthropicCompleteChatToolResponse])),\n  id: z.string(),\n  model: z.string(),\n  role: z.string(),\n  stop_reason: z.string(),\n  stop_sequence: z.null(),\n  type: z.literal(\"message\"),\n  usage: z.object({\n    input_tokens: z.number(),\n    output_tokens: z.number(),\n    cache_creation_input_tokens: z.number().nullish(),\n    cache_read_input_tokens: z.number().nullish(),\n  }),\n});\ntype AnthropicCompleteChatResponseType = z.infer<typeof AnthropicCompleteChatResponse>;\n\nconst AnthropicStreamChatMessageStartResponse = z.object({\n  type: z.literal(\"message_start\"),\n  message: z.object({\n    id: z.string(),\n    type: z.literal(\"message\"),\n    role: z.string(),\n    model: z.string(),\n    stop_reason: z.string().nullable(),\n    stop_sequence: z.string().nullable(),\n    content: z.array(z.any()),\n    usage: z.object({\n      input_tokens: z.number(),\n      output_tokens: z.number(),\n    }),\n  }),\n});\n\nconst AnthropicStreamChatMessageDeltaResponse = z.object({\n  type: z.literal(\"message_delta\"),\n  delta: z.object({\n    stop_reason: z.string().nullable(),\n    stop_sequence: z.string().nullable(),\n  }),\n  usage: z.object({\n    output_tokens: z.number(),\n  }),\n});\n\nconst AnthropicStreamChatContentBlockStartTextResponse = z.object({\n  type: z.literal(\"text\"),\n  text: z.string(),\n});\n\nconst AnthropicStreamChatContentBlockStartToolResponse = z.object({\n  type: z.literal(\"tool_use\"),\n  id: z.string(),\n  name: z.string(),\n  input: z.object({}),\n});\n\nconst AnthropicStreamChatContentBlockStartResponse = z.object({\n  type: z.literal(\"content_block_start\"),\n  index: z.number(),\n  content_block: z.discriminatedUnion(\"type\", [\n    AnthropicStreamChatContentBlockStartTextResponse,\n    AnthropicStreamChatContentBlockStartToolResponse,\n  ]),\n});\n\nconst AnthropicStreamChatContentBlockDeltaTextResponse = z.object({\n  type: z.literal(\"text_delta\"),\n  text: z.string(),\n});\n\nconst AnthropicStreamChatContentBlockDeltaToolResponse = z.object({\n  type: z.literal(\"input_json_delta\"),\n  partial_json: z.string(),\n});\n\nconst AnthropicStreamChatContentBlockDeltaResponse = z.object({\n  type: z.literal(\"content_block_delta\"),\n  index: z.number(),\n  delta: z.discriminatedUnion(\"type\", [AnthropicStreamChatContentBlockDeltaTextResponse, AnthropicStreamChatContentBlockDeltaToolResponse]),\n});\n\n// const AnthropicStreamChatResponse = z\n//   .object({\n//     type: z.string(),\n//     index: z.number(),\n//     delta: z.discriminatedUnion(\"type\", [AnthropicStreamChatTextResponse, AnthropicStreamChatToolResponse]).optional(),\n//     content_block: AnthropicStreamChatToolNameResponse.optional(),\n//   })\n//   .or(AnthropicStreamChatInitialResponse)\n//   .or(AnthropicStreamChatLastResponse);\n\nexport {\n  AnthropicCompleteChatResponse,\n  AnthropicStreamChatMessageDeltaResponse,\n  AnthropicStreamChatMessageStartResponse,\n  AnthropicStreamChatContentBlockDeltaResponse,\n  AnthropicStreamChatContentBlockStartResponse,\n  type AnthropicCompleteChatResponseType,\n};\n","import { z } from \"zod\";\n\nconst AnthropicRequestTool = z.object({\n  name: z.string().min(1),\n  description: z.string().min(1).optional(),\n  input_schema: z.any(), // TODO: should be more strict, implement the same for all providers\n});\ntype AnthropicRequestToolType = z.infer<typeof AnthropicRequestTool>;\n\nconst AnthropicRequestToolChoiceEnum = z.object({\n  type: z.enum([\"auto\", \"any\"]),\n});\ntype AnthropicRequestToolChoiceEnumType = z.infer<typeof AnthropicRequestToolChoiceEnum>;\n\nconst AnthropicRequestToolChoiceTool = z.object({\n  type: z.literal(\"tool\"),\n  name: z.string().min(1),\n});\ntype AnthropicRequestToolChoiceToolType = z.infer<typeof AnthropicRequestToolChoiceTool>;\n\nconst AnthropicRequestTextContent = z.object({\n  text: z.string().min(1),\n  type: z.literal(\"text\"),\n});\ntype AnthropicRequestTextContentType = z.infer<typeof AnthropicRequestTextContent>;\n\nconst AnthropicRequestImageContent = z.object({\n  type: z.literal(\"image\"),\n  source: z.object({\n    type: z.literal(\"base64\"),\n    media_type: z.enum([\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"]),\n    data: z.string().base64(),\n  }),\n});\ntype AnthropicRequestImageContentType = z.infer<typeof AnthropicRequestImageContent>;\n\nconst AnthropicRequestToolCallContent = z.object({\n  id: z.string().min(1),\n  type: z.literal(\"tool_use\"),\n  name: z.string().min(1),\n  input: z.record(z.any()),\n});\ntype AnthropicRequestToolCallContentType = z.infer<typeof AnthropicRequestToolCallContent>;\n\nconst AnthropicRequestToolResponseContent = z.object({\n  type: z.literal(\"tool_result\"),\n  tool_use_id: z.string().min(1),\n  content: z\n    .string()\n    .min(1)\n    .or(z.array(z.union([AnthropicRequestTextContent, AnthropicRequestImageContent])).min(1)),\n});\ntype AnthropicRequestToolResponseContentType = z.infer<typeof AnthropicRequestToolResponseContent>;\n\nconst AnthropicRequestUserMessage = z.object({\n  role: z.literal(\"user\"),\n  content: z\n    .string()\n    .min(1)\n    .or(z.array(z.union([AnthropicRequestTextContent, AnthropicRequestImageContent, AnthropicRequestToolResponseContent])).min(1)),\n});\ntype AnthropicRequestUserMessageType = z.infer<typeof AnthropicRequestUserMessage>;\n\nconst AnthropicRequestAssistantMessage = z.object({\n  role: z.literal(\"assistant\"),\n  content: z\n    .string()\n    .min(1)\n    .or(z.array(z.union([AnthropicRequestTextContent, AnthropicRequestToolResponseContent])).min(1)),\n});\ntype AnthropicRequestAssistantMessageType = z.infer<typeof AnthropicRequestAssistantMessage>;\n\nconst AnthropicRequestMessage = z.union([AnthropicRequestUserMessage, AnthropicRequestAssistantMessage]);\ntype AnthropicRequestMessageType = z.infer<typeof AnthropicRequestMessage>;\n\nconst AnthropicRequest = z.object({\n  model: z.string().min(1).optional(),\n  messages: z.array(AnthropicRequestMessage).min(1),\n  system: z.string().min(1).optional(),\n  max_tokens: z.number().min(0).optional(),\n  stop_sequences: z.array(z.string().min(1)).optional(),\n  temperature: z.number().min(0).max(1).optional(),\n  tool_choice: z.union([AnthropicRequestToolChoiceEnum, AnthropicRequestToolChoiceTool]).optional(),\n  tools: z.array(AnthropicRequestTool).min(1).optional(),\n  top_p: z.number().min(0).max(1).optional(),\n  top_k: z.number().min(0).optional(),\n});\ntype AnthropicRequestType = z.infer<typeof AnthropicRequest>;\n\nexport {\n  AnthropicRequest,\n  AnthropicRequestMessage,\n  AnthropicRequestUserMessage,\n  AnthropicRequestAssistantMessage,\n  AnthropicRequestTool,\n  AnthropicRequestToolChoiceEnum,\n  AnthropicRequestToolChoiceTool,\n  AnthropicRequestTextContent,\n  AnthropicRequestImageContent,\n  AnthropicRequestToolCallContent,\n  AnthropicRequestToolResponseContent,\n  type AnthropicRequestType,\n  type AnthropicRequestMessageType,\n  type AnthropicRequestUserMessageType,\n  type AnthropicRequestAssistantMessageType,\n  type AnthropicRequestToolType,\n  type AnthropicRequestToolChoiceEnumType,\n  type AnthropicRequestToolChoiceToolType,\n  type AnthropicRequestTextContentType,\n  type AnthropicRequestImageContentType,\n  type AnthropicRequestToolCallContentType,\n  type AnthropicRequestToolResponseContentType,\n};\n","import { z } from \"zod\";\n\nimport {\n  ChatModelSchemaType,\n  ChatModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidMessagesError,\n  InvalidModelRequestError,\n  InvalidToolsError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  SelectStringConfigItemDefType,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  AssistantRoleLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentValueType,\n  ChatResponseType,\n  ChatUsageType,\n  Config,\n  ConfigType,\n  ContentType,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n  createTextContent,\n  createToolCallContent,\n  ImageContentType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialChatResponseType,\n  PartialMessageType,\n  SystemRoleLiteral,\n  TextModalityLiteral,\n  Tool,\n  ToolRoleLiteral,\n  ToolCallContentType,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n  ToolType,\n  UserRoleLiteral,\n} from \"@adaline/types\";\n\nimport { Anthropic } from \"../../provider/provider.anthropic\";\nimport {\n  AnthropicCompleteChatResponse,\n  AnthropicCompleteChatResponseType,\n  AnthropicRequest,\n  AnthropicRequestAssistantMessageType,\n  AnthropicRequestImageContentType,\n  AnthropicRequestTextContentType,\n  AnthropicRequestToolCallContentType,\n  AnthropicRequestToolResponseContentType,\n  AnthropicRequestToolType,\n  AnthropicRequestType,\n  AnthropicRequestUserMessageType,\n  AnthropicStreamChatContentBlockDeltaResponse,\n  AnthropicStreamChatContentBlockStartResponse,\n  AnthropicStreamChatMessageDeltaResponse,\n  AnthropicStreamChatMessageStartResponse,\n} from \"./types\";\n\nconst BaseChatModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  completeChatUrl: z.string().url().optional(),\n  streamChatUrl: z.string().url().optional(),\n});\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nclass BaseChatModel implements ChatModelV1<ChatModelSchemaType> {\n  readonly version = \"v1\" as const;\n  readonly modelName: string;\n  modelSchema: ChatModelSchemaType;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly completeChatUrl: string;\n  private readonly streamChatUrl: string;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(Anthropic.chatBaseUrl);\n    this.completeChatUrl = urlWithoutTrailingSlash(parsedOptions.completeChatUrl || `${this.baseUrl}/messages`);\n    this.streamChatUrl = urlWithoutTrailingSlash(parsedOptions.streamChatUrl || `${this.baseUrl}/messages`);\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"x-api-key\": `${this.apiKey}`,\n      \"anthropic-version\": \"2023-06-01\",\n      \"content-type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelName,\n    };\n  }\n\n  // TODO: needs testing, implement the same for all providers\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    let retryAfterMs = 0;\n    let shouldRetry = true;\n    if (responseHeaders[\"x-should-retry\"]) {\n      shouldRetry = responseHeaders[\"x-should-retry\"].toLowerCase() === \"false\" ? false : true;\n    }\n    if (responseHeaders[\"retry-after\"]) {\n      retryAfterMs = parseInt(responseHeaders[\"retry-after\"]) * 1000;\n    }\n\n    const delayMs = retryAfterMs;\n    return { shouldRetry, delayMs };\n  }\n\n  // TODO: unused method, not tested; should add support for non-text modalities, tools, implement the same for all providers\n  getTokenCount(messages: MessageType[]): number {\n    return messages.reduce((acc, message) => {\n      return acc + message.content.map((content) => (content.modality === \"text\" ? content.value : \"\")).join(\" \").length;\n    }, 0);\n  }\n\n  transformModelRequest(request: any): {\n    modelName: string | undefined;\n    config: ConfigType;\n    messages: MessageType[];\n    tools: ToolType[] | undefined;\n  } {\n    const safeRequest = AnthropicRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    if (parsedRequest.tool_choice && (!parsedRequest.tools || parsedRequest.tools.length === 0)) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'tools' are required when 'tool_choice' is specified\"),\n      });\n    }\n\n    const _config: ConfigType = {};\n    if (parsedRequest.tool_choice) {\n      if (parsedRequest.tool_choice.type === \"tool\") {\n        _config.toolChoice = parsedRequest.tool_choice.name;\n      } else {\n        _config.toolChoice = parsedRequest.tool_choice.type;\n      }\n    }\n\n    _config.maxTokens = parsedRequest.max_tokens;\n    _config.temperature = parsedRequest.temperature;\n    _config.topP = parsedRequest.top_p;\n    _config.topK = parsedRequest.top_k;\n    _config.stop = parsedRequest.stop_sequences;\n\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const messages: MessageType[] = [];\n    const toolCallMap: { [id: string]: ToolCallContentType } = {};\n    if (parsedRequest.system) {\n      messages.push({\n        role: SystemRoleLiteral,\n        content: [{ modality: TextModalityLiteral, value: parsedRequest.system }],\n      });\n    }\n\n    parsedRequest.messages.forEach((message) => {\n      const role = message.role;\n      switch (role) {\n        case \"user\":\n          {\n            const content = message.content as\n              | string\n              | (AnthropicRequestTextContentType | AnthropicRequestImageContentType | AnthropicRequestToolResponseContentType)[];\n            if (typeof content === \"string\") {\n              messages.push({\n                role: role,\n                content: [{ modality: TextModalityLiteral, value: content }],\n              });\n            } else {\n              const _content = content.map((c) => {\n                if (c.type === \"text\") {\n                  return { modality: TextModalityLiteral, value: c.text };\n                } else if (c.type === \"image\") {\n                  const defaultDetail = \"auto\" as ImageContentType[\"detail\"];\n                  const mediaType = c.source.media_type.split(\"/\")[1] as Base64ImageContentValueType[\"media_type\"];\n                  return {\n                    modality: ImageModalityLiteral,\n                    detail: defaultDetail,\n                    value: { type: Base64ImageContentTypeLiteral, media_type: mediaType, base64: c.source.data },\n                  };\n                } else {\n                  return {\n                    modality: ToolResponseModalityLiteral,\n                    id: c.tool_use_id,\n                    index: toolCallMap[c.tool_use_id].index,\n                    name: toolCallMap[c.tool_use_id].name,\n                    data: typeof c.content === \"string\" ? c.content : JSON.stringify(c.content),\n                  };\n                }\n              });\n              messages.push({\n                role: role,\n                content: _content,\n              });\n            }\n          }\n          break;\n\n        case \"assistant\":\n          {\n            const content = message.content as string | (AnthropicRequestTextContentType | AnthropicRequestToolCallContentType)[];\n            if (typeof content === \"string\") {\n              messages.push({\n                role: role,\n                content: [{ modality: TextModalityLiteral, value: content }],\n              });\n            } else {\n              const _content = content.map((c, index) => {\n                if (c.type === \"text\") {\n                  return { modality: TextModalityLiteral, value: c.text };\n                } else {\n                  const toolCallContent: ToolCallContentType = {\n                    modality: ToolCallModalityLiteral,\n                    id: c.id,\n                    index: index,\n                    name: c.name,\n                    arguments: JSON.stringify(c.input),\n                  };\n                  toolCallMap[c.id] = toolCallContent;\n                  return toolCallContent;\n                }\n              });\n              messages.push({\n                role: role,\n                content: _content,\n              });\n            }\n          }\n          break;\n      }\n    });\n\n    const tools: ToolType[] = [];\n    if (parsedRequest.tools) {\n      parsedRequest.tools.forEach((tool: AnthropicRequestToolType) => {\n        tools.push({\n          type: \"function\",\n          definition: {\n            schema: {\n              name: tool.name,\n              description: tool.description || \"\",\n              parameters: tool.input_schema,\n            },\n          },\n        });\n      });\n    }\n\n    return {\n      modelName,\n      config,\n      messages,\n      tools: tools.length > 0 ? tools : undefined,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, messages?: MessageType[], tools?: ToolType[]): ParamsType {\n    const _toolChoice = config.toolChoice;\n    delete config.toolChoice; // can have a specific tool name that is not in the model schema, validated at transformation\n\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    if (_toolChoice !== undefined) {\n      parsedConfig.toolChoice = _toolChoice;\n    }\n\n    Object.keys(parsedConfig).forEach((key) => {\n      if (!(key in this.modelSchema.config.def)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = (parsedConfig as ConfigType)[key];\n\n      if (paramKey === \"max_tokens\" && def.type === \"range\" && paramValue === 0) {\n        acc[paramKey] = def.max;\n      } else {\n        acc[paramKey] = paramValue;\n      }\n\n      return acc;\n    }, {} as ParamsType);\n\n    if (!transformedConfig.max_tokens) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: new Error(`'max_tokens' is required for model : '${this.modelName}'`),\n      });\n    }\n\n    if (\"tool_choice\" in transformedConfig && transformedConfig.tool_choice !== undefined) {\n      const toolChoice = transformedConfig.tool_choice as string;\n      if (!tools || (tools && tools.length === 0)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(\"'tools' are required when 'toolChoice' is specified\"),\n        });\n      } else if (tools && tools.length > 0) {\n        const configToolChoice = this.modelSchema.config.def.toolChoice as SelectStringConfigItemDefType;\n        if (configToolChoice.choices.includes(toolChoice)) {\n          transformedConfig.tool_choice = { type: toolChoice };\n        } else if (tools.map((tool) => tool.definition.schema.name).includes(toolChoice)) {\n          transformedConfig.tool_choice = { type: \"tool\", name: toolChoice };\n        } else {\n          throw new InvalidConfigError({\n            info: `Invalid config for model : '${this.modelName}'`,\n            cause: new Error(`toolChoice : '${toolChoice}' is not part of provided 'tools' names or \n              one of [${configToolChoice.choices.join(\", \")}]`),\n          });\n        }\n      }\n    }\n\n    return transformedConfig;\n  }\n\n  transformMessages(messages: MessageType[]): ParamsType {\n    if (!messages || (messages && messages.length === 0)) {\n      return { messages: [] };\n    }\n\n    const parsedMessages = messages.map((message) => {\n      const parsedMessage = Message().safeParse(message);\n      if (!parsedMessage.success) {\n        throw new InvalidMessagesError({ info: \"Invalid messages\", cause: parsedMessage.error });\n      }\n      return parsedMessage.data;\n    });\n\n    parsedMessages.forEach((message) => {\n      message.content.forEach((content) => {\n        if (!this.modelSchema.modalities.includes(content.modality)) {\n          throw new InvalidMessagesError({\n            info: `Invalid message content for model : '${this.modelName}'`,\n            cause: new Error(`model : '${this.modelName}' does not support modality : '${content.modality}', \n              available modalities : [${this.modelSchema.modalities.join(\", \")}]`),\n          });\n        }\n      });\n    });\n\n    parsedMessages.forEach((message) => {\n      if (!Object.keys(this.modelSchema.roles).includes(message.role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message content for model : '${this.modelName}'`,\n          cause: new Error(`model : '${this.modelName}' does not support role : '${message.role}', \n            available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n        });\n      }\n    });\n\n    let systemMessage: AnthropicRequestType[\"system\"] = \"\";\n    const nonSystemMessages: {\n      role: AnthropicRequestAssistantMessageType[\"role\"] | AnthropicRequestUserMessageType[\"role\"];\n      content: (\n        | AnthropicRequestTextContentType\n        | AnthropicRequestImageContentType\n        | AnthropicRequestToolCallContentType\n        | AnthropicRequestToolResponseContentType\n      )[];\n    }[] = [];\n\n    parsedMessages.forEach((message) => {\n      switch (message.role) {\n        case SystemRoleLiteral:\n          {\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                systemMessage += content.value;\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n          }\n          break;\n\n        case AssistantRoleLiteral:\n          {\n            const assistantContent: (AnthropicRequestTextContentType | AnthropicRequestToolCallContentType)[] = [];\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                assistantContent.push({ type: \"text\", text: content.value });\n              } else if (content.modality === ToolCallModalityLiteral) {\n                assistantContent.push({\n                  type: \"tool_use\",\n                  id: content.id,\n                  name: content.name,\n                  input: JSON.parse(content.arguments),\n                });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as AnthropicRequestAssistantMessageType[\"role\"],\n              content: assistantContent,\n            });\n          }\n          break;\n\n        case UserRoleLiteral:\n          {\n            const userContent: (\n              | AnthropicRequestTextContentType\n              | AnthropicRequestImageContentType\n            )[] = [];\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                userContent.push({ type: \"text\", text: content.value });\n              } else if (content.modality === ImageModalityLiteral) {\n                if (content.value.type === \"base64\") {\n                  userContent.push({\n                    type: \"image\",\n                    source: {\n                      type: \"base64\",\n                      media_type: `image/${content.value.media_type}`,\n                      data: content.value.base64,\n                    },\n                  });\n                } else if (content.value.type === \"url\") {\n                  // TODO: add logic to fetch image from url, remove this error\n                  throw new InvalidMessagesError({\n                    info: `Invalid message 'modality' for model : ${this.modelName}`,\n                    cause: new Error(`model: '${this.modelName}' does not support image content type: '${content.value.type}'`),\n                  });\n                }\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as AnthropicRequestUserMessageType[\"role\"],\n              content: userContent,\n            });\n          }\n          break;\n\n        case ToolRoleLiteral:\n          {\n            const toolContent: AnthropicRequestToolResponseContentType[] = [];\n            message.content.forEach((content) => {\n              if (content.modality === ToolResponseModalityLiteral) {\n                toolContent.push({\n                  type: \"tool_result\",\n                  tool_use_id: content.id,\n                  content: content.data,\n                });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as \"user\",\n              content: toolContent,\n            });\n          }\n          break;\n\n        default: {\n          throw new InvalidMessagesError({\n            info: `Invalid message 'role' for model : ${this.modelName}`,\n            cause: new Error(`role : '${message.role}' is not supported, \n              available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n          });\n        }\n      }\n    });\n\n    if (nonSystemMessages[0].role !== this.modelSchema.roles[UserRoleLiteral]) {\n      throw new InvalidMessagesError({\n        info: `Invalid message 'role' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' requires first message to be from user`),\n      });\n    }\n\n    const getNextExpectedRole = (role: string): string => {\n      if (role === this.modelSchema.roles[UserRoleLiteral]) {\n        return this.modelSchema.roles[AssistantRoleLiteral] as string;\n      }\n      return this.modelSchema.roles[UserRoleLiteral] as string;\n    };\n\n    for (let i = 1; i < nonSystemMessages.length; i++) {\n      if (nonSystemMessages[i].role !== getNextExpectedRole(nonSystemMessages[i - 1].role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message format for model : ${this.modelName}`,\n          cause: new Error(`model : '${this.modelName}' requires messages to alternate between user and assistant`),\n        });\n      }\n    }\n\n    return {\n      system: systemMessage,\n      messages: nonSystemMessages,\n    };\n  }\n\n  transformTools(tools: ToolType[]): ParamsType {\n    if (!this.modelSchema.modalities.includes(ToolCallModalityLiteral)) {\n      throw new InvalidToolsError({\n        info: `Invalid tool 'modality' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' does not support tool modality : '${ToolCallModalityLiteral}'`),\n      });\n    }\n\n    if (!tools || (tools && tools.length === 0)) {\n      return { tools: [] as ToolType[] };\n    }\n\n    const parsedTools = tools.map((tool) => {\n      const parsedTool = Tool().safeParse(tool);\n      if (!parsedTool.success) {\n        throw new InvalidToolsError({ info: \"Invalid tools\", cause: parsedTool.error });\n      }\n      return parsedTool.data;\n    });\n\n    const transformedTools = parsedTools.map((tool) => ({\n      name: tool.definition.schema.name,\n      description: tool.definition.schema.description,\n      input_schema: tool.definition.schema.parameters,\n    }));\n\n    return { tools: transformedTools };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.completeChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    let headers = this.getDefaultHeaders();\n    if (tools && tools.length > 0) {\n      headers = {\n        ...headers,\n        \"anthropic-beta\": \"tools-2024-05-16\",\n      };\n    }\n    return new Promise((resolve) => {\n      resolve(headers);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  transformCompleteChatResponse(response: any): ChatResponseType {\n    const safe = AnthropicCompleteChatResponse.safeParse(response);\n    if (safe.success) {\n      const parsedResponse: AnthropicCompleteChatResponseType = safe.data;\n      const _content = parsedResponse.content;\n      const content = _content.map((contentItem, index) => {\n        if (contentItem.type === \"text\") {\n          return createTextContent(contentItem.text);\n        } else if (contentItem.type === \"tool_use\") {\n          return createToolCallContent(index, contentItem.id, contentItem.name, JSON.stringify(contentItem.input));\n        }\n      }) as ContentType[];\n\n      const messages: MessageType[] = [\n        {\n          role: AssistantRoleLiteral,\n          content: content,\n        },\n      ];\n\n      const usage: ChatUsageType = {\n        promptTokens: parsedResponse.usage.input_tokens,\n        completionTokens: parsedResponse.usage.output_tokens,\n        totalTokens: parsedResponse.usage.input_tokens + parsedResponse.usage.output_tokens,\n      };\n\n      return {\n        messages: messages,\n        usage: usage,\n        logProbs: [],\n      };\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.streamChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getStreamChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    let headers = this.getDefaultHeaders();\n    if (tools && tools.length > 0) {\n      headers = {\n        ...headers,\n        \"anthropic-beta\": \"tools-2024-05-16\",\n      };\n    }\n    return new Promise((resolve) => {\n      resolve(headers);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        stream: true,\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  async *transformStreamChatResponseChunk(\n    chunk: string,\n    buffer: string\n  ): AsyncGenerator<{ partialResponse: PartialChatResponseType; buffer: string }> {\n    // merge last buffer message and split into lines\n    const lines = (buffer + chunk).split(\"\\n\").filter((line) => line.trim() !== \"\");\n    for (const line of lines) {\n      if (line.startsWith(\"data: {\") && line.endsWith(\"}\")) {\n        // line contains message\n        let structuredLine: any;\n        try {\n          // remove the 'data :' prefix from string JSON\n          structuredLine = JSON.parse(line.substring(\"data: \".length));\n        } catch (error) {\n          // malformed JSON error\n          throw new ModelResponseError({\n            info: `Malformed JSON received in stream : ${structuredLine}`,\n            cause: error,\n          });\n        }\n\n        if (!(\"type\" in structuredLine)) {\n          // Invalid JSON error\n          throw new ModelResponseError({\n            info: \"Invalid JSON received in stream\",\n            cause: new Error(`Invalid JSON received in stream, expected 'type' property, \n              received : ${JSON.stringify(structuredLine)}`),\n          });\n        } else if (structuredLine.type === \"message_stop\") {\n          return;\n        } else if (structuredLine.type === \"message_start\") {\n          const safe = AnthropicStreamChatMessageStartResponse.safeParse(structuredLine);\n          if (safe.success) {\n            const parsedResponse = safe.data;\n            yield {\n              partialResponse: {\n                partialMessages: [],\n                usage: {\n                  promptTokens: parsedResponse.message.usage.input_tokens,\n                  completionTokens: parsedResponse.message.usage.output_tokens,\n                  totalTokens: parsedResponse.message.usage.input_tokens + parsedResponse.message.usage.output_tokens,\n                },\n              },\n              buffer: buffer,\n            };\n          } else {\n            throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n          }\n        } else if (structuredLine.type === \"message_delta\") {\n          const safe = AnthropicStreamChatMessageDeltaResponse.safeParse(structuredLine);\n          if (safe.success) {\n            const parsedResponse = safe.data;\n            yield {\n              partialResponse: {\n                partialMessages: [],\n                usage: {\n                  promptTokens: 0,\n                  completionTokens: parsedResponse.usage.output_tokens,\n                  totalTokens: parsedResponse.usage.output_tokens,\n                },\n              },\n              buffer: buffer,\n            };\n          } else {\n            throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n          }\n        } else if (structuredLine.type === \"content_block_start\") {\n          const safe = AnthropicStreamChatContentBlockStartResponse.safeParse(structuredLine);\n          if (safe.success) {\n            const parsedResponse = safe.data;\n            const partialMessages: PartialMessageType[] = [];\n            if (parsedResponse.content_block.type === \"text\") {\n              partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, parsedResponse.content_block.text));\n            } else if (parsedResponse.content_block.type === \"tool_use\") {\n              partialMessages.push(\n                createPartialToolCallMessage(\n                  AssistantRoleLiteral,\n                  parsedResponse.index,\n                  parsedResponse.content_block.id,\n                  parsedResponse.content_block.name,\n                  \"\"\n                )\n              );\n            }\n\n            yield { partialResponse: { partialMessages: partialMessages }, buffer: buffer };\n          } else {\n            throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n          }\n        } else if (structuredLine.type === \"content_block_delta\") {\n          const safe = AnthropicStreamChatContentBlockDeltaResponse.safeParse(structuredLine);\n          if (safe.success) {\n            const parsedResponse = safe.data;\n            const partialMessages: PartialMessageType[] = [];\n            if (parsedResponse.delta.type === \"text_delta\") {\n              partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, parsedResponse.delta.text));\n            } else if (parsedResponse.delta.type === \"input_json_delta\") {\n              partialMessages.push(\n                createPartialToolCallMessage(AssistantRoleLiteral, parsedResponse.index, \"\", \"\", parsedResponse.delta.partial_json)\n              );\n            }\n\n            yield { partialResponse: { partialMessages: partialMessages }, buffer: buffer };\n          } else {\n            throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n          }\n        } else {\n          // line starts with known event that is not implemented -- ignore\n        }\n      } else {\n        // line starts with unknown event -- ignore\n      }\n    }\n  }\n}\n\nexport { BaseChatModel, BaseChatModelOptions, type BaseChatModelOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3_5Sonnet20240620Literal = \"claude-3-5-sonnet-20240620\";\nconst Claude3_5Sonnet20240620Description = \"Most intelligent model. Highest level of intelligence and capability.\";\n\nconst Claude3_5Sonnet20240620Schema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3_5Sonnet20240620Literal,\n  description: Claude3_5Sonnet20240620Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 8192,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(8192, 4).def,\n    schema: AnthropicChatModelConfigs.base(8192, 4).schema,\n  },\n});\n\nconst Claude3_5Sonnet20240620Options = BaseChatModelOptions;\ntype Claude3_5Sonnet20240620OptionsType = z.infer<typeof Claude3_5Sonnet20240620Options>;\n\nclass Claude3_5Sonnet20240620 extends BaseChatModel {\n  constructor(options: Claude3_5Sonnet20240620OptionsType) {\n    super(Claude3_5Sonnet20240620Schema, options);\n  }\n}\n\nexport {\n  Claude3_5Sonnet20240620,\n  Claude3_5Sonnet20240620Options,\n  Claude3_5Sonnet20240620Schema,\n  Claude3_5Sonnet20240620Literal,\n  type Claude3_5Sonnet20240620OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3_5Sonnet20241022Literal = \"claude-3-5-sonnet-20241022\";\nconst Claude3_5Sonnet20241022Description = \"Most intelligent model. Highest level of intelligence and capability.\";\n\nconst Claude3_5Sonnet20241022Schema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3_5Sonnet20241022Literal,\n  description: Claude3_5Sonnet20241022Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 8192,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(8192, 4).def,\n    schema: AnthropicChatModelConfigs.base(8192, 4).schema,\n  },\n});\n\nconst Claude3_5Sonnet20241022Options = BaseChatModelOptions;\ntype Claude3_5Sonnet20241022OptionsType = z.infer<typeof Claude3_5Sonnet20241022Options>;\n\nclass Claude3_5Sonnet20241022 extends BaseChatModel {\n  constructor(options: Claude3_5Sonnet20241022OptionsType) {\n    super(Claude3_5Sonnet20241022Schema, options);\n  }\n}\n\nexport {\n  Claude3_5Sonnet20241022,\n  Claude3_5Sonnet20241022Options,\n  Claude3_5Sonnet20241022Schema,\n  Claude3_5Sonnet20241022Literal,\n  type Claude3_5Sonnet20241022OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3_5SonnetLatestLiteral = \"claude-3-5-sonnet-latest\";\nconst Claude3_5SonnetLatestDescription = \"Most intelligent model. Highest level of intelligence and capability.\";\n\nconst Claude3_5SonnetLatestSchema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3_5SonnetLatestLiteral,\n  description: Claude3_5SonnetLatestDescription,\n  maxInputTokens: 200000,\n  maxOutputTokens: 8192,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(8192, 4).def,\n    schema: AnthropicChatModelConfigs.base(8192, 4).schema,\n  },\n});\n\nconst Claude3_5SonnetLatestOptions = BaseChatModelOptions;\ntype Claude3_5SonnetLatestOptionsType = z.infer<typeof Claude3_5SonnetLatestOptions>;\n\nclass Claude3_5SonnetLatest extends BaseChatModel {\n  constructor(options: Claude3_5SonnetLatestOptionsType) {\n    super(Claude3_5SonnetLatestSchema, options);\n  }\n}\n\nexport {\n  Claude3_5SonnetLatest,\n  Claude3_5SonnetLatestLiteral,\n  Claude3_5SonnetLatestOptions,\n  Claude3_5SonnetLatestSchema,\n  type Claude3_5SonnetLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3Haiku20240307Literal = \"claude-3-haiku-20240307\";\nconst Claude3Haiku20240307Description =\n  \"Fastest and most compact model for near-instant responsiveness. Quick and accurate targeted performance.\";\n\nconst Claude3Haiku20240307Schema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3Haiku20240307Literal,\n  description: Claude3Haiku20240307Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 4096,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(4096, 4).def,\n    schema: AnthropicChatModelConfigs.base(4096, 4).schema,\n  },\n});\n\nconst Claude3Haiku20240307Options = BaseChatModelOptions;\ntype Claude3Haiku20240307OptionsType = z.infer<typeof Claude3Haiku20240307Options>;\n\nclass Claude3Haiku20240307 extends BaseChatModel {\n  constructor(options: Claude3Haiku20240307OptionsType) {\n    super(Claude3Haiku20240307Schema, options);\n  }\n}\n\nexport {\n  Claude3Haiku20240307,\n  Claude3Haiku20240307Options,\n  Claude3Haiku20240307Schema,\n  Claude3Haiku20240307Literal,\n  type Claude3Haiku20240307OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3_5Haiku20241022Literal = \"claude-3-5-haiku-20241022\";\nconst Claude3_5Haiku20241022Description = \"Our fastest model with intelligence at blazing speeds.\";\n\nconst Claude3_5Haiku20241022Schema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3_5Haiku20241022Literal,\n  description: Claude3_5Haiku20241022Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 8192,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(8192, 4).def,\n    schema: AnthropicChatModelConfigs.base(8192, 4).schema,\n  },\n});\n\nconst Claude3_5Haiku20241022Options = BaseChatModelOptions;\ntype Claude3_5Haiku20241022OptionsType = z.infer<typeof Claude3_5Haiku20241022Options>;\n\nclass Claude3_5Haiku20241022 extends BaseChatModel {\n  constructor(options: Claude3_5Haiku20241022OptionsType) {\n    super(Claude3_5Haiku20241022Schema, options);\n  }\n}\n\nexport {\n  Claude3_5Haiku20241022,\n  Claude3_5Haiku20241022Literal,\n  Claude3_5Haiku20241022Options,\n  Claude3_5Haiku20241022Schema,\n  type Claude3_5Haiku20241022OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3_5HaikuLatestLiteral = \"claude-3-5-haiku-latest\";\nconst Claude3_5HaikuLatestDescription = \"Our fastest model with intelligence at blazing speeds.\";\n\nconst Claude3_5HaikuLatestSchema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3_5HaikuLatestLiteral,\n  description: Claude3_5HaikuLatestDescription,\n  maxInputTokens: 200000,\n  maxOutputTokens: 8192,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(8192, 4).def,\n    schema: AnthropicChatModelConfigs.base(8192, 4).schema,\n  },\n});\n\nconst Claude3_5HaikuLatestOptions = BaseChatModelOptions;\ntype Claude3_5HaikuLatestOptionsType = z.infer<typeof Claude3_5HaikuLatestOptions>;\n\nclass Claude3_5HaikuLatest extends BaseChatModel {\n  constructor(options: Claude3_5HaikuLatestOptionsType) {\n    super(Claude3_5HaikuLatestSchema, options);\n  }\n}\n\nexport {\n  Claude3_5HaikuLatest,\n  Claude3_5HaikuLatestLiteral,\n  Claude3_5HaikuLatestOptions,\n  Claude3_5HaikuLatestSchema,\n  type Claude3_5HaikuLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3Opus20240229Literal = \"claude-3-opus-20240229\";\nconst Claude3Opus20240229Description =\n  \"Powerful model for highly complex tasks. Top-level performance, intelligence, fluency, and understanding.\";\n\nconst Claude3Opus20240229Schema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3Opus20240229Literal,\n  description: Claude3Opus20240229Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 4096,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(4096, 4).def,\n    schema: AnthropicChatModelConfigs.base(4096, 4).schema,\n  },\n});\n\nconst Claude3Opus20240229Options = BaseChatModelOptions;\ntype Claude3Opus20240229OptionsType = z.infer<typeof Claude3Opus20240229Options>;\n\nclass Claude3Opus20240229 extends BaseChatModel {\n  constructor(options: Claude3Opus20240229OptionsType) {\n    super(Claude3Opus20240229Schema, options);\n  }\n}\n\nexport {\n  Claude3Opus20240229,\n  Claude3Opus20240229Options,\n  Claude3Opus20240229Schema,\n  Claude3Opus20240229Literal,\n  type Claude3Opus20240229OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.anthropic\";\nimport {\n  AnthropicChatModelModalities,\n  AnthropicChatModelModalitiesEnum,\n  AnthropicChatModelRoles,\n  AnthropicChatModelRolesMap,\n} from \"./types\";\n\nconst Claude3Sonnet20240229Literal = \"claude-3-sonnet-20240229\";\nconst Claude3Sonnet20240229Description = \"Balance of intelligence and speed. Strong utility, balanced for scaled deployments.\";\n\nconst Claude3Sonnet20240229Schema = ChatModelSchema(AnthropicChatModelRoles, AnthropicChatModelModalitiesEnum).parse({\n  name: Claude3Sonnet20240229Literal,\n  description: Claude3Sonnet20240229Description,\n  maxInputTokens: 200000,\n  maxOutputTokens: 4096,\n  roles: AnthropicChatModelRolesMap,\n  modalities: AnthropicChatModelModalities,\n  config: {\n    def: AnthropicChatModelConfigs.base(4096, 4).def,\n    schema: AnthropicChatModelConfigs.base(4096, 4).schema,\n  },\n});\n\nconst Claude3Sonnet20240229Options = BaseChatModelOptions;\ntype Claude3Sonnet20240229OptionsType = z.infer<typeof Claude3Sonnet20240229Options>;\n\nclass Claude3Sonnet20240229 extends BaseChatModel {\n  constructor(options: Claude3Sonnet20240229OptionsType) {\n    super(Claude3Sonnet20240229Schema, options);\n  }\n}\n\nexport {\n  Claude3Sonnet20240229,\n  Claude3Sonnet20240229Options,\n  Claude3Sonnet20240229Schema,\n  Claude3Sonnet20240229Literal,\n  type Claude3Sonnet20240229OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchemaType } from \"@adaline/provider\";\nimport { EmbeddingTextModalityLiteral } from \"@adaline/types\";\n\nconst AnthropicEmbeddingModelModalities: EmbeddingModelSchemaType[\"modalities\"] = [EmbeddingTextModalityLiteral];\n\nconst AnthropicEmbeddingModelModalitiesEnum = z.enum([EmbeddingTextModalityLiteral]);\n\nexport { AnthropicEmbeddingModelModalitiesEnum, AnthropicEmbeddingModelModalities };\n","import { z } from \"zod\";\n\nconst AnthropicGetEmbeddingsResponse = z.object({\n  object: z.literal(\"list\"),\n  model: z.string(),\n  data: z.array(\n    z.object({\n      index: z.number(),\n      object: z.literal(\"embedding\"),\n      embedding: z.array(z.number()).or(z.string().base64()),\n    })\n  ),\n  usage: z.object({\n    total_tokens: z.number(),\n  }),\n});\n\nexport { AnthropicGetEmbeddingsResponse };\n","import { z } from \"zod\";\n\nconst AnthropicEmbeddingRequestInput = z\n  .string()\n  .min(1)\n  .or(z.array(z.string().min(1)).min(1));\ntype AnthropicEmbeddingRequestInputType = z.infer<typeof AnthropicEmbeddingRequestInput>;\n\nconst AnthropicEmbeddingRequest = z.object({\n  model: z.string().min(1).optional(),\n  input: AnthropicEmbeddingRequestInput,\n  encoding_format: z.enum([\"base64\"]).nullable().optional(),\n  input_type: z.enum([\"query\", \"document\"]).nullable().optional(),\n  truncation: z.boolean().optional(),\n});\ntype AnthropicEmbeddingRequestType = z.infer<typeof AnthropicEmbeddingRequest>;\n\nexport {\n  AnthropicEmbeddingRequest,\n  AnthropicEmbeddingRequestInput,\n  type AnthropicEmbeddingRequestInputType,\n  type AnthropicEmbeddingRequestType,\n};\n","import { z } from \"zod\";\n\nimport {\n  EmbeddingModelSchemaType,\n  EmbeddingModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidEmbeddingRequestsError,\n  InvalidModelRequestError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  Base64EmbeddingLiteral,\n  Base64EmbeddingType,\n  Config,\n  ConfigType,\n  EmbeddingRequests,\n  EmbeddingRequestsType,\n  EmbeddingResponseType,\n  EmbeddingTextModalityLiteral,\n  FloatEmbeddingLiteral,\n  FloatEmbeddingType,\n} from \"@adaline/types\";\n\nimport { Anthropic } from \"../../provider/provider.anthropic\";\nimport { AnthropicEmbeddingRequest, AnthropicGetEmbeddingsResponse } from \"./types\";\n\nconst BaseEmbeddingModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  getEmbeddingsUrl: z.string().url().optional(),\n});\ntype BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;\n\nclass BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: EmbeddingModelSchemaType;\n  readonly modelName: string;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly getEmbeddingsUrl: string;\n\n  constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType) {\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(Anthropic.embeddingBaseUrl);\n    this.getEmbeddingsUrl = urlWithoutTrailingSlash(parsedOptions.getEmbeddingsUrl || `${this.baseUrl}/embeddings`);\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      Authorization: `Bearer ${this.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelName,\n    };\n  }\n\n  // TODO: unused method, not tested\n  getTokenCount(requests: EmbeddingRequestsType): number {\n    return requests.requests.reduce((acc, request) => acc + request.length, 0);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    const delayMs = 0;\n    const shouldRetry = true;\n    return { shouldRetry, delayMs };\n  }\n\n  transformModelRequest(request: any): {\n    modelName: string | undefined;\n    config: ConfigType;\n    embeddingRequests: EmbeddingRequestsType;\n  } {\n    const safeRequest = AnthropicEmbeddingRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    const _config = {\n      encodingFormat: parsedRequest.encoding_format,\n      inputType: parsedRequest.input_type,\n      truncation: parsedRequest.truncation,\n    };\n\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    let embeddingRequests: EmbeddingRequestsType;\n    if (typeof parsedRequest.input === \"string\") {\n      embeddingRequests = {\n        modality: EmbeddingTextModalityLiteral,\n        requests: [parsedRequest.input],\n      };\n    } else {\n      embeddingRequests = {\n        modality: EmbeddingTextModalityLiteral,\n        requests: parsedRequest.input,\n      };\n    }\n\n    return {\n      modelName,\n      config,\n      embeddingRequests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType {\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    Object.keys(parsedConfig as ConfigType).forEach((key) => {\n      if (!this.modelSchema.config.def[key]) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = parsedConfig[key];\n      acc[paramKey] = paramValue;\n      return acc;\n    }, {} as ParamsType);\n\n    return transformedConfig;\n  }\n\n  transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType {\n    const _parsedRequests = EmbeddingRequests().safeParse(requests);\n    if (!_parsedRequests.success) {\n      throw new InvalidEmbeddingRequestsError({ info: \"Invalid embedding requests\", cause: _parsedRequests.error });\n    }\n\n    // TODO: move to model schema\n    if (_parsedRequests.data.requests.length > 128) {\n      throw new InvalidEmbeddingRequestsError({\n        info: `Invalid embedding requests for model : '${this.modelName}'`,\n        cause: new Error(`Max requests for model : '${this.modelName}' is 128`),\n      });\n    }\n\n    const parsedRequests = _parsedRequests.data as EmbeddingRequestsType;\n    return {\n      input: parsedRequests.requests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.getEmbeddingsUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType> {\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...this.transformConfig(config, requests),\n        ...this.transformEmbeddingRequests(requests),\n      });\n    });\n  }\n\n  transformGetEmbeddingsResponse(response: any): EmbeddingResponseType {\n    let encodingFormat: typeof Base64EmbeddingLiteral | typeof FloatEmbeddingLiteral;\n    const safe = AnthropicGetEmbeddingsResponse.safeParse(response);\n    if (safe.success) {\n      const parsedResponse = safe.data;\n      encodingFormat = typeof parsedResponse.data[0].embedding === \"string\" ? Base64EmbeddingLiteral : FloatEmbeddingLiteral;\n      const embeddings = parsedResponse.data.map((item) => {\n        if (typeof item.embedding === \"string\") {\n          return {\n            index: item.index,\n            embedding: item.embedding,\n          } as Base64EmbeddingType;\n        } else {\n          return {\n            index: item.index,\n            embedding: item.embedding,\n          } as FloatEmbeddingType;\n        }\n      });\n      return {\n        encodingFormat: encodingFormat,\n        embeddings: embeddings,\n        usage: {\n          totalTokens: parsedResponse.usage.total_tokens,\n        },\n      } as EmbeddingResponseType;\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n}\n\nexport { BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.anthropic\";\nimport { AnthropicEmbeddingModelModalities, AnthropicEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst VoyageCode2Literal = \"voyage-code-2\";\nconst VoyageCode2Description = \"Optimized for code retrieval.\";\n\nconst VoyageCode2Schema = EmbeddingModelSchema(AnthropicEmbeddingModelModalitiesEnum).parse({\n  name: VoyageCode2Literal,\n  description: VoyageCode2Description,\n  modalities: AnthropicEmbeddingModelModalities,\n  maxInputTokens: 16000,\n  maxOutputTokens: 16000, // max output dimensions are 1536\n  config: {\n    def: AnthropicEmbeddingModelConfigs.base().def,\n    schema: AnthropicEmbeddingModelConfigs.base().schema,\n  },\n});\n\nconst VoyageCode2Options = BaseEmbeddingModelOptions;\ntype VoyageCode2OptionsType = z.infer<typeof VoyageCode2Options>;\n\nclass VoyageCode2 extends BaseEmbeddingModel {\n  constructor(options: VoyageCode2OptionsType) {\n    super(VoyageCode2Schema, options);\n  }\n}\n\nexport { VoyageCode2, VoyageCode2Options, VoyageCode2Schema, VoyageCode2Literal, type VoyageCode2OptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.anthropic\";\nimport { AnthropicEmbeddingModelModalities, AnthropicEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst VoyageLaw2Literal = \"voyage-law-2\";\nconst VoyageLaw2Description = \"Optimized for legal and long-context retrieval and RAG. Also improved performance across all domains.\";\n\nconst VoyageLaw2Schema = EmbeddingModelSchema(AnthropicEmbeddingModelModalitiesEnum).parse({\n  name: VoyageLaw2Literal,\n  description: VoyageLaw2Description,\n  modalities: AnthropicEmbeddingModelModalities,\n  maxInputTokens: 16000,\n  maxOutputTokens: 16000, // max output dimensions are 1024\n  config: {\n    def: AnthropicEmbeddingModelConfigs.base().def,\n    schema: AnthropicEmbeddingModelConfigs.base().schema,\n  },\n});\n\nconst VoyageLaw2Options = BaseEmbeddingModelOptions;\ntype VoyageLaw2OptionsType = z.infer<typeof VoyageLaw2Options>;\n\nclass VoyageLaw2 extends BaseEmbeddingModel {\n  constructor(options: VoyageLaw2OptionsType) {\n    super(VoyageLaw2Schema, options);\n  }\n}\n\nexport { VoyageLaw2, VoyageLaw2Options, VoyageLaw2Schema, VoyageLaw2Literal, type VoyageLaw2OptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.anthropic\";\nimport { AnthropicEmbeddingModelModalities, AnthropicEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst VoyageMultilingual2Literal = \"voyage-multilingual-2\";\nconst VoyageMultilingual2Description = \"Optimized for multilingual retrieval and RAG.\";\n\nconst VoyageMultilingual2Schema = EmbeddingModelSchema(AnthropicEmbeddingModelModalitiesEnum).parse({\n  name: VoyageMultilingual2Literal,\n  description: VoyageMultilingual2Description,\n  modalities: AnthropicEmbeddingModelModalities,\n  maxInputTokens: 32000,\n  maxOutputTokens: 32000, // max output dimensions are 1024\n  config: {\n    def: AnthropicEmbeddingModelConfigs.base().def,\n    schema: AnthropicEmbeddingModelConfigs.base().schema,\n  },\n});\n\nconst VoyageMultilingual2Options = BaseEmbeddingModelOptions;\ntype VoyageMultilingual2OptionsType = z.infer<typeof VoyageMultilingual2Options>;\n\nclass VoyageMultilingual2 extends BaseEmbeddingModel {\n  constructor(options: VoyageMultilingual2OptionsType) {\n    super(VoyageMultilingual2Schema, options);\n  }\n}\n\nexport {\n  VoyageMultilingual2,\n  VoyageMultilingual2Options,\n  VoyageMultilingual2Schema,\n  VoyageMultilingual2Literal,\n  type VoyageMultilingual2OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.anthropic\";\nimport { AnthropicEmbeddingModelModalities, AnthropicEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst VoyageFinance2Literal = \"voyage-finance-2\";\nconst VoyageFinance2Description = \"Optimized for finance retrieval and RAG.\";\n\nconst VoyageFinance2Schema = EmbeddingModelSchema(AnthropicEmbeddingModelModalitiesEnum).parse({\n  name: VoyageFinance2Literal,\n  description: VoyageFinance2Description,\n  modalities: AnthropicEmbeddingModelModalities,\n  maxInputTokens: 32000,\n  maxOutputTokens: 32000, // max output dimensions are 1024\n  config: {\n    def: AnthropicEmbeddingModelConfigs.base().def,\n    schema: AnthropicEmbeddingModelConfigs.base().schema,\n  },\n});\n\nconst VoyageFinance2Options = BaseEmbeddingModelOptions;\ntype VoyageFinance2OptionsType = z.infer<typeof VoyageFinance2Options>;\n\nclass VoyageFinance2 extends BaseEmbeddingModel {\n  constructor(options: VoyageFinance2OptionsType) {\n    super(VoyageFinance2Schema, options);\n  }\n}\n\nexport { VoyageFinance2, VoyageFinance2Options, VoyageFinance2Schema, VoyageFinance2Literal, type VoyageFinance2OptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.anthropic\";\nimport { AnthropicEmbeddingModelModalities, AnthropicEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Voyage3LiteLiteral = \"voyage-3-lite\";\nconst Voyage3LiteDescription = \"Optimized for latency and cost.\";\n\nconst Voyage3LiteSchema = EmbeddingModelSchema(AnthropicEmbeddingModelModalitiesEnum).parse({\n  name: Voyage3LiteLiteral,\n  description: Voyage3LiteDescription,\n  modalities: AnthropicEmbeddingModelModalities,\n  maxInputTokens: 32000,\n  maxOutputTokens: 32000, // max output dimensions are 512\n  config: {\n    def: AnthropicEmbeddingModelConfigs.base().def,\n    schema: AnthropicEmbeddingModelConfigs.base().schema,\n  },\n});\n\nconst Voyage3LiteOptions = BaseEmbeddingModelOptions;\ntype Voyage3LiteOptionsType = z.infer<typeof Voyage3LiteOptions>;\n\nclass Voyage3Lite extends BaseEmbeddingModel {\n  constructor(options: Voyage3LiteOptionsType) {\n    super(Voyage3LiteSchema, options);\n  }\n}\n\nexport { Voyage3Lite, Voyage3LiteOptions, Voyage3LiteSchema, Voyage3LiteLiteral, type Voyage3LiteOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { AnthropicEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.anthropic\";\nimport { AnthropicEmbeddingModelModalities, AnthropicEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Voyage3Literal = \"voyage-3\";\nconst Voyage3Description = \"Optimized for quality.\";\n\nconst Voyage3Schema = EmbeddingModelSchema(AnthropicEmbeddingModelModalitiesEnum).parse({\n  name: Voyage3Literal,\n  description: Voyage3Description,\n  modalities: AnthropicEmbeddingModelModalities,\n  maxInputTokens: 32000,\n  maxOutputTokens: 32000, // max output dimensions are 1024\n  config: {\n    def: AnthropicEmbeddingModelConfigs.base().def,\n    schema: AnthropicEmbeddingModelConfigs.base().schema,\n  },\n});\n\nconst Voyage3Options = BaseEmbeddingModelOptions;\ntype Voyage3OptionsType = z.infer<typeof Voyage3Options>;\n\nclass Voyage3 extends BaseEmbeddingModel {\n  constructor(options: Voyage3OptionsType) {\n    super(Voyage3Schema, options);\n  }\n}\n\nexport { Voyage3, Voyage3Options, Voyage3Schema, Voyage3Literal, type Voyage3OptionsType };\n"]}