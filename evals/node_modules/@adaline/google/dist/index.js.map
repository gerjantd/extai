{"version":3,"sources":["../src/configs/chat-model/common.config.chat-model.google.ts","../src/configs/chat-model/base.config.chat-model.google.ts","../src/configs/chat-model/c1.config.chat-model.google.ts","../src/configs/embedding-model/base.config.embedding-model.google.ts","../src/configs/embedding-model/common.config.embedding-model.google.ts","../src/configs/configs.google.ts","../src/provider/provider.google.ts","../src/models/chat-models/types/roles.chat-model.google.ts","../src/models/chat-models/types/modalities.chat-model.google.ts","../src/models/chat-models/types/response.chat-model.google.ts","../src/models/chat-models/types/request.chat-model.google.ts","../src/models/chat-models/base-chat-model.google.ts","../src/models/chat-models/base-gemini-1-chat-model.google.ts","../src/models/chat-models/gemini-1.0-pro-001.google.ts","../src/models/chat-models/gemini-1.0-pro-latest.google.ts","../src/models/chat-models/gemini-1.0-pro-vision.google.ts","../src/models/chat-models/gemini-1.0-pro.google.ts","../src/models/chat-models/gemini-1.5-flash-001.google.ts","../src/models/chat-models/gemini-1.5-flash-002.google.ts","../src/models/chat-models/gemini-1.5-flash-latest.google.ts","../src/models/chat-models/gemini-1.5-flash.google.ts","../src/models/chat-models/gemini-1.5-pro-001.google.ts","../src/models/chat-models/gemini-1.5-pro-002.google.ts","../src/models/chat-models/gemini-1.5-pro-latest.google.ts","../src/models/chat-models/gemini-1.5-pro.google.ts","../src/models/chat-models/gemini-2.0-flash-exp.google.ts","../src/models/chat-models/gemini-pro-vision.google.ts","../src/models/chat-models/gemini-pro.google.ts","../src/models/embedding-models/types/modalitites.embedding-model.google.ts","../src/models/embedding-models/types/response.embedding-model.google.ts","../src/models/embedding-models/types/request.embedding-model.google.ts","../src/models/embedding-models/base-embedding-model.google.ts","../src/models/embedding-models/text-embedding-001.google.ts","../src/models/embedding-models/text-embedding-004.google.ts"],"names":["temperature","max","_default","RangeConfigItem","CHAT_CONFIG","maxTokens","maxOutputTokens","stop","maxSequences","MultiStringConfigItem","topP","topK","frequencyPenalty","presencePenalty","seed","toolChoice","SelectStringConfigItem","safetySettings","ObjectSchemaConfigItem","z","ChatModelBaseConfigSchema","maxTemperature","defaultTemperature","defaultTopP","ChatModelBaseConfigDef","ChatModelC1ConfigSchema","defaultTopK","value","ChatModelC1ConfigDef","dimensions","maxDimensions","EMBEDDING_CONFIG","EmbeddingModelBaseConfigSchema","EmbeddingModelBaseConfigDef","GoogleChatModelConfigs","GoogleEmbeddingModelConfigs","ProviderLiteral","Google","GeminiProLiteral","GeminiPro","GeminiProOptions","GeminiProSchema","GeminiProVisionLiteral","GeminiProVision","GeminiProVisionOptions","GeminiProVisionSchema","Gemini1_5Flash001Literal","Gemini1_5Flash001","Gemini1_5Flash001Options","Gemini1_5Flash001Schema","Gemini1_5Flash002Literal","Gemini1_5Flash002","Gemini1_5Flash002Options","Gemini1_5Flash002Schema","Gemini1_5FlashLatestLiteral","Gemini1_5FlashLatest","Gemini1_5FlashLatestOptions","Gemini1_5FlashLatestSchema","Gemini1_5FlashLiteral","Gemini1_5Flash","Gemini1_5FlashOptions","Gemini1_5FlashSchema","Gemini1_5Pro001Literal","Gemini1_5Pro001","Gemini1_5Pro001Options","Gemini1_5Pro001Schema","Gemini1_5Pro002Literal","Gemini1_5Pro002","Gemini1_5Pro002Options","Gemini1_5Pro002Schema","Gemini1_5ProLatestLiteral","Gemini1_5ProLatest","Gemini1_5ProLatestOptions","Gemini1_5ProLatestSchema","Gemini1_5ProLiteral","Gemini1_5Pro","Gemini1_5ProOptions","Gemini1_5ProSchema","Gemini1_0ProLiteral","Gemini1_0Pro","Gemini1_0ProOptions","Gemini1_0ProSchema","Gemini1_0ProVisionLiteral","Gemini1_0ProVision","Gemini1_0ProVisionOptions","Gemini1_0ProVisionSchema","Gemini1_0ProLatestLiteral","Gemini1_0ProLatest","Gemini1_0ProLatestOptions","Gemini1_0ProLatestSchema","Gemini1_0Pro_001Literal","Gemini1_0Pro_001","Gemini1_0Pro_001Options","Gemini1_0Pro_001Schema","Gemini2_0FlashExpLiteral","Gemini2_0FlashExp","Gemini2_0FlashExpOptions","Gemini2_0FlashExpSchema","Text_Embedding_001Literal","Text_Embedding_001","Text_Embedding_001Options","Text_Embedding_001Schema","Text_Embedding_004Literal","Text_Embedding_004","Text_Embedding_004Options","Text_Embedding_004Schema","acc","key","options","modelName","ProviderError","model","parsedOptions","GoogleChatModelRoles","SystemRoleLiteral","UserRoleLiteral","AssistantRoleLiteral","ToolRoleLiteral","GoogleChatAssistantRoleLiteral","GoogleChatToolRoleLiteral","GoogleChatModelRolesMap","GoogleChatModelModalities","TextModalityLiteral","ImageModalityLiteral","ToolCallModalityLiteral","ToolResponseModalityLiteral","GoogleChatModelModalitiesEnum","GoogleChatModelTextModalities","GoogleChatModelTextModalitiesEnum","GoogleChatModelTextVisionModalities","GoogleChatModelTextVisionModalitiesEnum","GoogleChatModelTextToolModalities","GoogleChatModelTextToolModalitiesEnum","GoogleCompleteChatTextResponse","GoogleCompleteChatToolResponse","GoogleCompleteChatResponse","GoogleStreamChatTextResponse","GoogleStreamChatToolResponse","GoogleStreamChatResponse","GoogleChatContentPartText","GoogleChatContentPartInlineData","GoogleChatContentPartFunctionCall","GoogleChatContentPartFunctionResponse","GoogleChatContent","GoogleChatSystemInstruction","GoogleChatTool","GoogleChatToolConfig","GoogleChatGenerationConfig","GoogleChatSafetySettings","GoogleChatRequest","BaseChatModelOptions","BaseChatModel","modelSchema","_a","urlWithoutTrailingSlash","responseHeaders","messages","message","content","request","safeRequest","InvalidModelRequestError","parsedRequest","systemInstruction","generationConfig","toolConfig","_config","config","Config","removeUndefinedEntries","part","role","_content","c","Base64ImageContentTypeLiteral","index","InvalidMessagesError","tools","tool","_toolChoice","_parsedConfig","InvalidConfigError","parsedConfig","transformedConfig","def","paramKey","paramValue","configToolChoice","__spreadValues","parsedMessages","parsedMessage","Message","nonSystemMessages","assistantContent","userContent","toolResponseContent","getNextExpectedRoles","i","InvalidToolsError","parsedTool","Tool","__async","resolve","transformedMessages","transformedTools","response","safe","ModelResponseError","parsedResponse","usage","contentItem","createTextContent","createToolCallContent","safetyRatings","rating","chunk","buffer","__asyncGenerator","lines","line","completeLine","structuredLine","error","partialResponse","messagePart","createPartialTextMessage","toolCall","createPartialToolCallMessage","BaseChatModelGemini1","systemUserMessage","Gemini1_0Pro_001Description","ChatModelSchema","Gemini1_0ProLatestDescription","Gemini1_0ProVisionDescription","Gemini1_0ProDescription","Gemini1_5Flash001Description","Gemini1_5Flash002Description","Gemini1_5FlashLatestDescription","Gemini1_5FlashDescription","Gemini1_5Pro001Description","Gemini1_5Pro002Description","Gemini1_5ProLatestDescription","Gemini1_5ProDescription","Gemini2_0FlashExpDescription","GeminiProVisionDescription","GeminiProDescription","GoogleEmbeddingModelModalities","EmbeddingTextModalityLiteral","GoogleEmbeddingModelModalitiesEnum","GoogleGetEmbeddingsResponse","GoogleEmbeddingRequestInput","GoogleEmbeddingRequest","BaseEmbeddingModelOptions","BaseEmbeddingModel","requests","embeddingRequests","p","_parsedRequests","EmbeddingRequests","InvalidEmbeddingRequestsError","_requests","embeddings","embedding","FloatEmbeddingLiteral","Text_Embedding_001_Description","EmbeddingModelSchema","Text_Embedding_004_Description"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from \"zod\";\n\nimport { CHAT_CONFIG, MultiStringConfigItem, ObjectSchemaConfigItem, RangeConfigItem, SelectStringConfigItem } from \"@adaline/provider\";\n\nconst temperature = (max: number, _default: number) =>\n  RangeConfigItem({\n    param: \"temperature\",\n    title: CHAT_CONFIG.TEMPERATURE.title,\n    description: CHAT_CONFIG.TEMPERATURE.description,\n    min: 0.0,\n    max: max,\n    step: 0.01,\n    default: _default,\n  });\n\nconst maxTokens = (maxOutputTokens: number) =>\n  RangeConfigItem({\n    param: \"maxOutputTokens\",\n    title: CHAT_CONFIG.MAX_TOKENS.title,\n    description: CHAT_CONFIG.MAX_TOKENS.description,\n    min: 0,\n    max: maxOutputTokens,\n    step: 1,\n    default: 0,\n  });\n\nconst stop = (maxSequences: number) =>\n  MultiStringConfigItem({\n    param: \"stopSequences\",\n    title: CHAT_CONFIG.STOP(maxSequences).title,\n    description: CHAT_CONFIG.STOP(maxSequences).description,\n    max: maxSequences,\n  });\n\nconst topP = (_default: number) =>\n  RangeConfigItem({\n    param: \"topP\",\n    title: CHAT_CONFIG.TOP_P.title,\n    description: CHAT_CONFIG.TOP_P.description,\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: _default,\n  });\n\nconst topK = (_default: number) =>\n  RangeConfigItem({\n    param: \"topK\",\n    title: CHAT_CONFIG.TOP_K.title,\n    description: CHAT_CONFIG.TOP_K.description,\n    min: 1,\n    max: 40,\n    step: 1,\n    default: _default,\n  });\n\nconst frequencyPenalty = RangeConfigItem({\n  param: \"frequencyPenalty\",\n  title: CHAT_CONFIG.FREQUENCY_PENALTY.title,\n  description: CHAT_CONFIG.FREQUENCY_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst presencePenalty = RangeConfigItem({\n  param: \"presencePenalty\",\n  title: CHAT_CONFIG.PRESENCE_PENALTY.title,\n  description: CHAT_CONFIG.PRESENCE_PENALTY.description,\n  min: -2,\n  max: 2,\n  step: 0.01,\n  default: 0,\n});\n\nconst seed = RangeConfigItem({\n  param: \"seed\",\n  title: CHAT_CONFIG.SEED.title,\n  description: CHAT_CONFIG.SEED.description,\n  min: 0,\n  max: 1000000,\n  step: 1,\n  default: 0,\n});\n\nconst toolChoice = SelectStringConfigItem({\n  param: \"toolChoice\",\n  title: \"Tool choice\",\n  description:\n    \"Controls which (if any) tool is called by the model. 'none' means the model will not call a function. 'auto' means the model can pick between generating a message or calling a tool.\",\n  default: \"auto\",\n  choices: [\"auto\", \"any\", \"none\"],\n});\n\nconst safetySettings = ObjectSchemaConfigItem({\n  param: \"safetySettings\",\n  title: \"Safety settings\",\n  description: \"The safety rating contains the category of harm and the harm probability level in that category for a piece of content.\",\n  objectSchema: z.array(\n    z.object({\n      threshold: z.enum([\n        \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n        \"BLOCK_LOW_AND_ABOVE\",\n        \"BLOCK_MEDIUM_AND_ABOVE\",\n        \"BLOCK_ONLY_HIGH\",\n        \"BLOCK_NONE\",\n        \"OFF\",\n      ]),\n      category: z.enum([\n        \"HARM_CATEGORY_UNSPECIFIED\",\n        \"HARM_CATEGORY_HARASSMENT\",\n        \"HARM_CATEGORY_HATE_SPEECH\",\n        \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n      ]),\n    })\n  ),\n});\n\nexport { maxTokens, stop, temperature, toolChoice, topK, topP, seed, frequencyPenalty, presencePenalty, safetySettings };\n","import { z } from \"zod\";\n\nimport { maxTokens, safetySettings, stop, temperature, toolChoice, topP } from \"./common.config.chat-model.google\";\n\nconst ChatModelBaseConfigSchema = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number\n) =>\n  z.object({\n    temperature: temperature(maxTemperature, defaultTemperature).schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP(defaultTopP).schema,\n    toolChoice: toolChoice.schema,\n    safetySettings: safetySettings.schema,\n  });\n\nconst ChatModelBaseConfigDef = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number\n) =>\n  ({\n    temperature: temperature(maxTemperature, defaultTemperature).def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP(defaultTopP).def,\n    toolChoice: toolChoice.def,\n    safetySettings: safetySettings.def,\n  }) as const;\n\nexport { ChatModelBaseConfigDef, ChatModelBaseConfigSchema };\n","import { z } from \"zod\";\n\nimport {\n  frequencyPenalty,\n  maxTokens,\n  presencePenalty,\n  safetySettings,\n  seed,\n  stop,\n  temperature,\n  toolChoice,\n  topK,\n  topP,\n} from \"./common.config.chat-model.google\";\n\nconst ChatModelC1ConfigSchema = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number,\n  defaultTopK: number\n) =>\n  z.object({\n    temperature: temperature(maxTemperature, defaultTemperature).schema,\n    maxTokens: maxTokens(maxOutputTokens).schema,\n    stop: stop(maxSequences).schema,\n    topP: topP(defaultTopP).schema,\n    topK: topK(defaultTopK).schema,\n    frequencyPenalty: frequencyPenalty.schema,\n    presencePenalty: presencePenalty.schema,\n    seed: seed.schema.transform((value) => (value === 0 ? undefined : value)),\n    toolChoice: toolChoice.schema,\n    safetySettings: safetySettings.schema,\n  });\n\nconst ChatModelC1ConfigDef = (\n  maxTemperature: number,\n  defaultTemperature: number,\n  maxOutputTokens: number,\n  maxSequences: number,\n  defaultTopP: number,\n  defaultTopK: number\n) =>\n  ({\n    temperature: temperature(maxTemperature, defaultTemperature).def,\n    maxTokens: maxTokens(maxOutputTokens).def,\n    stop: stop(maxSequences).def,\n    topP: topP(defaultTopP).def,\n    topK: topK(defaultTopK).def,\n    frequencyPenalty: frequencyPenalty.def,\n    presencePenalty: presencePenalty.def,\n    seed: seed.def,\n    toolChoice: toolChoice.def,\n    safetySettings: safetySettings.def,\n  }) as const;\n\nexport { ChatModelC1ConfigDef, ChatModelC1ConfigSchema };\n","import { z } from \"zod\";\n\nimport { dimensions } from \"./common.config.embedding-model.google\";\n\nconst EmbeddingModelBaseConfigSchema = (maxDimensions: number) =>\n  z.object({\n    dimensions: dimensions(maxDimensions).schema,\n  });\n\nconst EmbeddingModelBaseConfigDef = (maxDimensions: number) =>\n  ({\n    dimensions: dimensions(maxDimensions).def,\n  }) as const;\n\nexport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema };\n","import { EMBEDDING_CONFIG, RangeConfigItem } from \"@adaline/provider\";\n\nconst dimensions = (maxDimensions: number) =>\n  RangeConfigItem({\n    param: \"outputDimensionality\",\n    title: EMBEDDING_CONFIG.DIMENSIONS.title,\n    description: EMBEDDING_CONFIG.DIMENSIONS.description,\n    min: 1,\n    max: maxDimensions,\n    step: 1,\n    default: maxDimensions,\n  });\n\nexport { dimensions };\n","import { ChatModelBaseConfigDef, ChatModelBaseConfigSchema, ChatModelC1ConfigDef, ChatModelC1ConfigSchema } from \"./chat-model\";\nimport { EmbeddingModelBaseConfigDef, EmbeddingModelBaseConfigSchema } from \"./embedding-model\";\n\nconst GoogleChatModelConfigs = {\n  base: (maxTemperature: number, defaultTemperature: number, maxOutputTokens: number, maxSequences: number, defaultTopP: number) => ({\n    def: ChatModelBaseConfigDef(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP),\n    schema: ChatModelBaseConfigSchema(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP),\n  }),\n  c1: (\n    maxTemperature: number,\n    defaultTemperature: number,\n    maxOutputTokens: number,\n    maxSequences: number,\n    defaultTopP: number,\n    defaultTopK: number\n  ) => ({\n    def: ChatModelC1ConfigDef(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP, defaultTopK),\n    schema: ChatModelC1ConfigSchema(maxTemperature, defaultTemperature, maxOutputTokens, maxSequences, defaultTopP, defaultTopK),\n  }),\n} as const;\n\nconst GoogleEmbeddingModelConfigs = {\n  base: (maxDimensions: number) => ({\n    def: EmbeddingModelBaseConfigDef(maxDimensions),\n    schema: EmbeddingModelBaseConfigSchema(maxDimensions),\n  }),\n} as const;\n\nexport { GoogleChatModelConfigs, GoogleEmbeddingModelConfigs };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType, ChatModelV1, EmbeddingModelSchemaType, EmbeddingModelV1, ProviderError, ProviderV1 } from \"@adaline/provider\";\n\nimport * as Models from \"../models\";\n\nconst ProviderLiteral = \"google\";\nclass Google<C extends Models.BaseChatModelOptionsType, E extends Models.BaseEmbeddingModelOptionsType> implements ProviderV1<C, E> {\n  readonly version = \"v1\" as const;\n  readonly name = ProviderLiteral;\n  static readonly baseUrl: string = \"https://generativelanguage.googleapis.com/v1beta\";\n\n  private readonly chatModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): ChatModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: ChatModelSchemaType;\n    }\n  > = {\n    [Models.GeminiProLiteral]: {\n      model: Models.GeminiPro,\n      modelOptions: Models.GeminiProOptions,\n      modelSchema: Models.GeminiProSchema,\n    },\n    [Models.GeminiProVisionLiteral]: {\n      model: Models.GeminiProVision,\n      modelOptions: Models.GeminiProVisionOptions,\n      modelSchema: Models.GeminiProVisionSchema,\n    },\n    [Models.Gemini1_5Flash001Literal]: {\n      model: Models.Gemini1_5Flash001,\n      modelOptions: Models.Gemini1_5Flash001Options,\n      modelSchema: Models.Gemini1_5Flash001Schema,\n    },\n    [Models.Gemini1_5Flash002Literal]: {\n      model: Models.Gemini1_5Flash002,\n      modelOptions: Models.Gemini1_5Flash002Options,\n      modelSchema: Models.Gemini1_5Flash002Schema,\n    },\n    [Models.Gemini1_5FlashLatestLiteral]: {\n      model: Models.Gemini1_5FlashLatest,\n      modelOptions: Models.Gemini1_5FlashLatestOptions,\n      modelSchema: Models.Gemini1_5FlashLatestSchema,\n    },\n    [Models.Gemini1_5FlashLiteral]: {\n      model: Models.Gemini1_5Flash,\n      modelOptions: Models.Gemini1_5FlashOptions,\n      modelSchema: Models.Gemini1_5FlashSchema,\n    },\n    [Models.Gemini1_5Pro001Literal]: {\n      model: Models.Gemini1_5Pro001,\n      modelOptions: Models.Gemini1_5Pro001Options,\n      modelSchema: Models.Gemini1_5Pro001Schema,\n    },\n    [Models.Gemini1_5Pro002Literal]: {\n      model: Models.Gemini1_5Pro002,\n      modelOptions: Models.Gemini1_5Pro002Options,\n      modelSchema: Models.Gemini1_5Pro002Schema,\n    },\n    [Models.Gemini1_5ProLatestLiteral]: {\n      model: Models.Gemini1_5ProLatest,\n      modelOptions: Models.Gemini1_5ProLatestOptions,\n      modelSchema: Models.Gemini1_5ProLatestSchema,\n    },\n    [Models.Gemini1_5ProLiteral]: {\n      model: Models.Gemini1_5Pro,\n      modelOptions: Models.Gemini1_5ProOptions,\n      modelSchema: Models.Gemini1_5ProSchema,\n    },\n    [Models.Gemini1_0ProLiteral]: {\n      model: Models.Gemini1_0Pro,\n      modelOptions: Models.Gemini1_0ProOptions,\n      modelSchema: Models.Gemini1_0ProSchema,\n    },\n    [Models.Gemini1_0ProVisionLiteral]: {\n      model: Models.Gemini1_0ProVision,\n      modelOptions: Models.Gemini1_0ProVisionOptions,\n      modelSchema: Models.Gemini1_0ProVisionSchema,\n    },\n    [Models.Gemini1_0ProLatestLiteral]: {\n      model: Models.Gemini1_0ProLatest,\n      modelOptions: Models.Gemini1_0ProLatestOptions,\n      modelSchema: Models.Gemini1_0ProLatestSchema,\n    },\n    [Models.Gemini1_0Pro_001Literal]: {\n      model: Models.Gemini1_0Pro_001,\n      modelOptions: Models.Gemini1_0Pro_001Options,\n      modelSchema: Models.Gemini1_0Pro_001Schema,\n    },\n    [Models.Gemini2_0FlashExpLiteral]: {\n      model: Models.Gemini2_0FlashExp,\n      modelOptions: Models.Gemini2_0FlashExpOptions,\n      modelSchema: Models.Gemini2_0FlashExpSchema,\n    },\n  };\n\n  private readonly embeddingModelFactories: Record<\n    string,\n    {\n      model: { new (options: any): EmbeddingModelV1 };\n      modelOptions: z.ZodType<any>;\n      modelSchema: EmbeddingModelSchemaType;\n    }\n  > = {\n    [Models.Text_Embedding_001Literal]: {\n      model: Models.Text_Embedding_001,\n      modelOptions: Models.Text_Embedding_001Options,\n      modelSchema: Models.Text_Embedding_001Schema,\n    },\n    [Models.Text_Embedding_004Literal]: {\n      model: Models.Text_Embedding_004,\n      modelOptions: Models.Text_Embedding_004Options,\n      modelSchema: Models.Text_Embedding_004Schema,\n    },\n  };\n\n  chatModelLiterals(): string[] {\n    return Object.keys(this.chatModelFactories);\n  }\n\n  chatModelSchemas(): Record<string, ChatModelSchemaType> {\n    return Object.keys(this.chatModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.chatModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, ChatModelSchemaType>\n    );\n  }\n\n  chatModel(options: C): ChatModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.chatModelFactories)) {\n      throw new ProviderError({\n        info: `Google chat model: ${modelName} not found`,\n        cause: new Error(`Google chat model: ${modelName} not found, available chat models: \n          [${this.chatModelLiterals().join(\", \")}]`),\n      });\n    }\n\n    const model = this.chatModelFactories[modelName].model;\n    const parsedOptions = this.chatModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n\n  embeddingModelLiterals(): string[] {\n    return Object.keys(this.embeddingModelFactories);\n  }\n\n  embeddingModelSchemas(): Record<string, EmbeddingModelSchemaType> {\n    return Object.keys(this.embeddingModelFactories).reduce(\n      (acc, key) => {\n        acc[key] = this.embeddingModelFactories[key].modelSchema;\n        return acc;\n      },\n      {} as Record<string, EmbeddingModelSchemaType>\n    );\n  }\n\n  embeddingModel(options: E): EmbeddingModelV1 {\n    const modelName = options.modelName;\n    if (!(modelName in this.embeddingModelFactories)) {\n      throw new ProviderError({\n        info: `Google embedding model: ${modelName} not found`,\n        cause: new Error(`Google embedding model: ${modelName} not found, available embedding models: \n          [${this.embeddingModelLiterals().join(\", \")}]`),\n      });\n    }\n\n    const model = this.embeddingModelFactories[modelName].model;\n    const parsedOptions = this.embeddingModelFactories[modelName].modelOptions.parse(options);\n    return new model(parsedOptions);\n  }\n}\n\nexport { Google, ProviderLiteral };\n","import { z } from \"zod\";\n\nimport { AssistantRoleLiteral, SystemRoleLiteral, ToolRoleLiteral, UserRoleLiteral } from \"@adaline/types\";\n\nconst GoogleChatModelRoles = z.enum([SystemRoleLiteral, UserRoleLiteral, AssistantRoleLiteral, ToolRoleLiteral]);\n\nconst GoogleChatAssistantRoleLiteral = \"model\";\nconst GoogleChatToolRoleLiteral = \"function\";\n\nconst GoogleChatModelRolesMap = {\n  system: UserRoleLiteral,\n  user: UserRoleLiteral,\n  assistant: GoogleChatAssistantRoleLiteral,\n  tool: GoogleChatToolRoleLiteral,\n} as const;\n\nexport { GoogleChatAssistantRoleLiteral, GoogleChatToolRoleLiteral, GoogleChatModelRoles, GoogleChatModelRolesMap };\n","import { z } from \"zod\";\n\nimport { ChatModelSchemaType } from \"@adaline/provider\";\nimport { ImageModalityLiteral, TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral } from \"@adaline/types\";\n\nconst GoogleChatModelModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst GoogleChatModelModalitiesEnum = z.enum([\n  TextModalityLiteral,\n  ImageModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n]);\n\nconst GoogleChatModelTextModalities: ChatModelSchemaType[\"modalities\"] = [TextModalityLiteral];\n\nconst GoogleChatModelTextModalitiesEnum = z.enum([TextModalityLiteral]);\n\nconst GoogleChatModelTextVisionModalities: ChatModelSchemaType[\"modalities\"] = [TextModalityLiteral, ImageModalityLiteral];\n\nconst GoogleChatModelTextVisionModalitiesEnum = z.enum([TextModalityLiteral, ImageModalityLiteral]);\n\nconst GoogleChatModelTextToolModalities: ChatModelSchemaType[\"modalities\"] = [\n  TextModalityLiteral,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n];\n\nconst GoogleChatModelTextToolModalitiesEnum = z.enum([TextModalityLiteral, ToolCallModalityLiteral, ToolResponseModalityLiteral]);\n\nexport {\n  GoogleChatModelModalitiesEnum,\n  GoogleChatModelModalities,\n  GoogleChatModelTextModalitiesEnum,\n  GoogleChatModelTextModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextVisionModalitiesEnum,\n  GoogleChatModelTextVisionModalities,\n};\n","import { z } from \"zod\";\n\nconst GoogleCompleteChatTextResponse = z.object({\n  text: z.string(),\n});\n\nconst GoogleCompleteChatToolResponse = z.object({\n  functionCall: z.object({\n    name: z.string(),\n    args: z.record(z.any()),\n  }),\n});\n\nconst GoogleCompleteChatResponse = z.object({\n  candidates: z.array(\n    z.object({\n      content: z\n        .object({\n          role: z.string(),\n          parts: z.array(z.union([GoogleCompleteChatTextResponse, GoogleCompleteChatToolResponse])),\n        })\n        .optional(),\n      finishReason: z.string(),\n      index: z.number().optional(),\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n            blocked: z.boolean().optional(),\n          })\n        )\n      ),\n    })\n  ),\n  promptFeedback: z.optional(\n    z.object({\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n          })\n        )\n      ),\n    })\n  ),\n  usageMetadata: z\n    .object({\n      promptTokenCount: z.number(),\n      cachedContentTokenCount: z.number().optional(),\n      candidatesTokenCount: z.number().optional(),\n      totalTokenCount: z.number(),\n    })\n    .optional(),\n});\ntype GoogleCompleteChatResponseType = z.infer<typeof GoogleCompleteChatResponse>;\n\nconst GoogleStreamChatTextResponse = z.object({\n  text: z.string(),\n});\n\nconst GoogleStreamChatToolResponse = z.object({\n  functionCall: z.object({\n    name: z.string(),\n    args: z.record(z.any()),\n  }),\n});\n\nconst GoogleStreamChatResponse = z.object({\n  candidates: z.array(\n    z.object({\n      content: z\n        .object({\n          role: z.string(),\n          parts: z.array(z.union([GoogleStreamChatTextResponse, GoogleStreamChatToolResponse])),\n        })\n        .optional(),\n      finishReason: z.string().optional(),\n      index: z.number().optional(),\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n            blocked: z.boolean().optional(),\n          })\n        )\n      ),\n    })\n  ),\n  promptFeedback: z.optional(\n    z.object({\n      safetyRatings: z.optional(\n        z.array(\n          z.object({\n            category: z.string(),\n            probability: z.string(),\n          })\n        )\n      ),\n    })\n  ),\n  usageMetadata: z\n    .object({\n      promptTokenCount: z.number(),\n      cachedContentTokenCount: z.number().optional(),\n      candidatesTokenCount: z.number(),\n      totalTokenCount: z.number(),\n    })\n    .optional(),\n});\ntype GoogleStreamChatResponseType = z.infer<typeof GoogleStreamChatResponse>;\n\nexport {\n  GoogleCompleteChatResponse,\n  GoogleCompleteChatTextResponse,\n  GoogleCompleteChatToolResponse,\n  GoogleStreamChatResponse,\n  GoogleStreamChatTextResponse,\n  GoogleStreamChatToolResponse,\n  type GoogleStreamChatResponseType,\n  type GoogleCompleteChatResponseType,\n};\n","import { z } from \"zod\";\n\nconst GoogleChatContentPartText = z.object({\n  text: z.string().min(1),\n});\ntype GoogleChatContentPartTextType = z.infer<typeof GoogleChatContentPartText>;\n\nconst GoogleChatContentPartInlineData = z.object({\n  inline_data: z.object({\n    mime_type: z.string().min(1),\n    data: z.string().base64(),\n  }),\n});\ntype GoogleChatContentPartInlineDataType = z.infer<typeof GoogleChatContentPartInlineData>;\n\nconst GoogleChatContentPartFunctionCall = z.object({\n  function_call: z.object({\n    name: z.string().min(1),\n    args: z.record(z.string().min(1)),\n  }),\n});\ntype GoogleChatContentPartFunctionCallType = z.infer<typeof GoogleChatContentPartFunctionCall>;\n\nconst GoogleChatContentPartFunctionResponse = z.object({\n  function_response: z.object({\n    name: z.string().min(1),\n    response: z.record(z.string().min(1)),\n  }),\n});\ntype GoogleChatContentPartFunctionResponseType = z.infer<typeof GoogleChatContentPartFunctionResponse>;\n\nconst GoogleChatContent = z.object({\n  role: z.enum([\"user\", \"model\", \"function\"]),\n  parts: z.array(\n    z.union([\n      GoogleChatContentPartText,\n      GoogleChatContentPartInlineData,\n      GoogleChatContentPartFunctionCall,\n      GoogleChatContentPartFunctionResponse,\n    ])\n  ),\n});\ntype GoogleChatContentType = z.infer<typeof GoogleChatContent>;\n\nconst GoogleChatSystemInstruction = z.object({\n  parts: z.array(GoogleChatContentPartText),\n});\ntype GoogleChatSystemInstructionType = z.infer<typeof GoogleChatSystemInstruction>;\n\nconst GoogleChatTool = z.object({\n  name: z.string().min(1),\n  description: z.string().min(1),\n  parameters: z.any(),\n});\ntype GoogleChatToolType = z.infer<typeof GoogleChatTool>;\n\nconst GoogleChatToolConfig = z.object({\n  function_calling_config: z.object({\n    mode: z.enum([\"ANY\", \"AUTO\", \"NONE\"]),\n    allowed_function_names: z.array(z.string()).optional(),\n  }),\n});\ntype GoogleChatToolConfigType = z.infer<typeof GoogleChatToolConfig>;\n\nconst GoogleChatGenerationConfig = z.object({\n  stopSequences: z.array(z.string()).optional(),\n  maxOutputTokens: z.number().optional(),\n  temperature: z.number().optional(),\n  topP: z.number().optional(),\n  topK: z.number().optional(),\n  presencePenalty: z.number().optional(),\n  frequencyPenalty: z.number().optional(),\n  seed: z.number().optional(),\n});\ntype GoogleChatGenerationConfigType = z.infer<typeof GoogleChatGenerationConfig>;\n\nconst GoogleChatSafetySettings = z.object({\n  category: z.enum([\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n  ]),\n  threshold: z.enum([\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\",\n    \"OFF\",\n  ]),\n});\ntype GoogleChatSafetySettingsType = z.infer<typeof GoogleChatSafetySettings>;\n\nconst GoogleChatRequest = z.object({\n  model: z.string().min(1).optional(),\n  contents: z.array(GoogleChatContent),\n  systemInstruction: GoogleChatSystemInstruction.optional(),\n  system_instruction: GoogleChatSystemInstruction.optional(),\n  generationConfig: GoogleChatGenerationConfig.optional(),\n  generation_config: GoogleChatGenerationConfig.optional(),\n  safetySettings: z.array(GoogleChatSafetySettings).optional(),\n  safety_settings: z.array(GoogleChatSafetySettings).optional(),\n  tools: z\n    .object({\n      function_declarations: z.array(GoogleChatTool),\n    })\n    .optional(),\n  toolConfig: GoogleChatToolConfig.optional(),\n  tool_config: GoogleChatToolConfig.optional(),\n});\ntype GoogleChatRequestType = z.infer<typeof GoogleChatRequest>;\n\nexport {\n  GoogleChatContent,\n  GoogleChatContentPartFunctionCall,\n  GoogleChatContentPartFunctionResponse,\n  GoogleChatContentPartInlineData,\n  GoogleChatContentPartText,\n  GoogleChatGenerationConfig,\n  GoogleChatRequest,\n  GoogleChatSystemInstruction,\n  GoogleChatTool,\n  GoogleChatToolConfig,\n  GoogleChatSafetySettings,\n  type GoogleChatContentPartTextType,\n  type GoogleChatContentPartFunctionCallType,\n  type GoogleChatContentPartFunctionResponseType,\n  type GoogleChatContentPartInlineDataType,\n  type GoogleChatToolType,\n  type GoogleChatToolConfigType,\n  type GoogleChatGenerationConfigType,\n  type GoogleChatRequestType,\n  type GoogleChatContentType,\n  type GoogleChatSystemInstructionType,\n  type GoogleChatSafetySettingsType,\n};\n","import { z } from \"zod\";\n\nimport {\n  ChatModelSchemaType,\n  ChatModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidMessagesError,\n  InvalidModelRequestError,\n  InvalidToolsError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  SelectStringConfigItemDefType,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  AssistantRoleLiteral,\n  Base64ImageContentTypeLiteral,\n  Base64ImageContentValueType,\n  ChatResponseType,\n  ChatUsageType,\n  Config,\n  ConfigType,\n  ContentType,\n  createPartialTextMessage,\n  createPartialToolCallMessage,\n  createTextContent,\n  createToolCallContent,\n  ImageContentType,\n  ImageModalityLiteral,\n  Message,\n  MessageType,\n  PartialChatResponseType,\n  SystemRoleLiteral,\n  TextModalityLiteral,\n  Tool,\n  ToolCallModalityLiteral,\n  ToolResponseModalityLiteral,\n  ToolRoleLiteral,\n  ToolType,\n  UserRoleLiteral,\n} from \"@adaline/types\";\n\nimport { Google } from \"../../provider/provider.google\";\nimport {\n  GoogleChatContentPartFunctionCallType,\n  GoogleChatContentPartFunctionResponseType,\n  GoogleChatContentPartInlineDataType,\n  GoogleChatContentPartTextType,\n  GoogleChatContentType,\n  GoogleChatRequest,\n  GoogleChatRequestType,\n  GoogleChatSystemInstructionType,\n  GoogleChatToolType,\n  GoogleCompleteChatResponse,\n  GoogleCompleteChatResponseType,\n  GoogleStreamChatResponse,\n  GoogleStreamChatResponseType,\n} from \"./types\";\n\nconst BaseChatModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  baseUrl: z.string().url().optional(),\n  completeChatUrl: z.string().url().optional(),\n  streamChatUrl: z.string().url().optional(),\n});\ntype BaseChatModelOptionsType = z.infer<typeof BaseChatModelOptions>;\n\nclass BaseChatModel implements ChatModelV1<ChatModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: ChatModelSchemaType;\n  readonly modelName: string;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly streamChatUrl: string;\n  private readonly completeChatUrl: string;\n\n  constructor(modelSchema: ChatModelSchemaType, options: BaseChatModelOptionsType) {\n    const parsedOptions = BaseChatModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(parsedOptions.baseUrl ?? Google.baseUrl);\n    this.completeChatUrl = urlWithoutTrailingSlash(\n      parsedOptions.completeChatUrl || `${this.baseUrl}/models/${this.modelName}:generateContent?key=${this.apiKey}`\n    );\n    this.streamChatUrl = urlWithoutTrailingSlash(\n      parsedOptions.streamChatUrl || `${this.baseUrl}/models/${this.modelName}:streamGenerateContent?key=${this.apiKey}`\n    );\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    return { shouldRetry: false, delayMs: 0 };\n  }\n\n  // TODO: unused method, not tested; should add support for non-text modalities, tools\n  getTokenCount(messages: MessageType[]): number {\n    return messages.reduce((acc, message) => {\n      return acc + message.content.map((content) => (content.modality === \"text\" ? content.value : \"\")).join(\" \").length;\n    }, 0);\n  }\n\n  transformModelRequest(request: GoogleChatRequestType): {\n    modelName: string | undefined;\n    config: ConfigType;\n    messages: MessageType[];\n    tools: ToolType[] | undefined;\n  } {\n    const safeRequest = GoogleChatRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    if (parsedRequest.system_instruction && parsedRequest.systemInstruction) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'system_instruction' and 'systemInstruction' are not allowed at the same time\"),\n      });\n    }\n\n    if (parsedRequest.generation_config && parsedRequest.generationConfig) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'generation_config' and 'generationConfig' are not allowed at the same time\"),\n      });\n    }\n\n    if (parsedRequest.tool_config && parsedRequest.toolConfig) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'tool_config' and 'toolConfig' are not allowed at the same time\"),\n      });\n    }\n\n    const systemInstruction = parsedRequest.system_instruction || parsedRequest.systemInstruction;\n    const generationConfig = parsedRequest.generation_config || parsedRequest.generationConfig;\n    const safetySettings = parsedRequest.safety_settings || parsedRequest.safetySettings;\n    const toolConfig = parsedRequest.tool_config || parsedRequest.toolConfig;\n\n    if (toolConfig && (!parsedRequest.tools || parsedRequest.tools.function_declarations.length === 0)) {\n      throw new InvalidModelRequestError({\n        info: `Invalid model request for model : '${this.modelName}'`,\n        cause: new Error(\"'tools' are required when 'tool_choice' is specified\"),\n      });\n    }\n\n    const _config: ConfigType = {};\n\n    if (toolConfig) {\n      if (toolConfig.function_calling_config.mode === \"ANY\") {\n        if (\n          toolConfig.function_calling_config.allowed_function_names &&\n          toolConfig.function_calling_config.allowed_function_names.length === 1\n        ) {\n          _config.toolChoice = toolConfig.function_calling_config.allowed_function_names[0];\n        } else {\n          _config.toolChoice = toolConfig.function_calling_config.mode.toLowerCase();\n        }\n      } else {\n        _config.toolChoice = toolConfig.function_calling_config.mode.toLowerCase();\n      }\n    }\n\n    _config.seed = generationConfig?.seed;\n    _config.maxTokens = generationConfig?.maxOutputTokens;\n    _config.temperature = generationConfig?.temperature;\n    _config.topP = generationConfig?.topP;\n    _config.presencePenalty = generationConfig?.presencePenalty;\n    _config.frequencyPenalty = generationConfig?.frequencyPenalty;\n    _config.stop = generationConfig?.stopSequences;\n    _config.safetySettings = safetySettings;\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const messages: MessageType[] = [];\n    if (systemInstruction) {\n      systemInstruction.parts.forEach((part) => {\n        messages.push({ role: SystemRoleLiteral, content: [{ modality: TextModalityLiteral, value: part.text }] });\n      });\n    }\n\n    parsedRequest.contents.forEach((message) => {\n      const role = message.role;\n      switch (role) {\n        case \"user\":\n          {\n            const content = message.parts as (GoogleChatContentPartTextType | GoogleChatContentPartInlineDataType)[];\n            const _content = content.map((c) => {\n              if (\"text\" in c) {\n                return { modality: TextModalityLiteral, value: c.text };\n              } else {\n                return {\n                  modality: ImageModalityLiteral,\n                  detail: \"auto\" as ImageContentType[\"detail\"],\n                  value: {\n                    type: Base64ImageContentTypeLiteral,\n                    base64: c.inline_data.data,\n                    media_type: c.inline_data.mime_type.split(\"/\")[1] as Base64ImageContentValueType[\"media_type\"],\n                  },\n                };\n              }\n            });\n            messages.push({ role: role, content: _content });\n          }\n          break;\n\n        case \"model\":\n          {\n            const content = message.parts as (GoogleChatContentPartTextType | GoogleChatContentPartFunctionCallType)[];\n            const _content = content.map((c, index) => {\n              if (\"text\" in c) {\n                return { modality: TextModalityLiteral, value: c.text };\n              } else {\n                return {\n                  modality: ToolCallModalityLiteral,\n                  id: index.toString(),\n                  index: index,\n                  name: c.function_call.name,\n                  arguments: JSON.stringify(c.function_call.args),\n                };\n              }\n            });\n            messages.push({ role: AssistantRoleLiteral, content: _content });\n          }\n          break;\n\n        case \"function\":\n          {\n            const content = message.parts as GoogleChatContentPartFunctionResponseType[];\n            const _content = content.map((c, index) => {\n              return {\n                modality: ToolResponseModalityLiteral,\n                id: index.toString(),\n                index: index,\n                name: c.function_response.name,\n                data: JSON.stringify(c.function_response.response),\n              };\n            });\n            messages.push({ role: ToolRoleLiteral, content: _content });\n          }\n          break;\n\n        default: {\n          throw new InvalidMessagesError({\n            info: `Invalid message 'role' for model : ${this.modelName}`,\n            cause: new Error(`role : '${message.role}' is not supported for model : ${this.modelName}`),\n          });\n        }\n      }\n    });\n\n    const tools: ToolType[] = [];\n    if (parsedRequest.tools) {\n      parsedRequest.tools.function_declarations.forEach((tool: GoogleChatToolType) => {\n        tools.push({\n          type: \"function\",\n          definition: {\n            schema: {\n              name: tool.name,\n              description: tool.description,\n              parameters: tool.parameters,\n            },\n          },\n        });\n      });\n    }\n\n    return {\n      modelName,\n      config,\n      messages,\n      tools: tools.length > 0 ? tools : undefined,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, messages?: MessageType[], tools?: ToolType[]): ParamsType {\n    const _toolChoice = config.toolChoice;\n    delete config.toolChoice; // can have a specific tool name that is not in the model schema, validated at transformation\n\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n\n    Object.keys(parsedConfig).forEach((key) => {\n      if (!(key in this.modelSchema.config.def)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = (parsedConfig as ConfigType)[key];\n\n      if (paramKey === \"maxOutputTokens\" && def.type === \"range\" && paramValue === 0) {\n        acc[paramKey] = def.max;\n      } else {\n        acc[paramKey] = paramValue;\n      }\n\n      return acc;\n    }, {} as ParamsType);\n\n    const safetySettings = transformedConfig.safetySettings;\n    delete transformedConfig.safetySettings;\n\n    let toolConfig;\n    if (_toolChoice !== undefined) {\n      const toolChoice = _toolChoice as string;\n      if (!tools || (tools && tools.length === 0)) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(\"'tools' are required when 'toolChoice' is specified\"),\n        });\n      } else if (tools && tools.length > 0) {\n        const configToolChoice = this.modelSchema.config.def.toolChoice as SelectStringConfigItemDefType;\n        if (!configToolChoice.choices.includes(toolChoice)) {\n          // toolChoice not in model schema choices\n          if (tools.map((tool) => tool.definition.schema.name).includes(toolChoice)) {\n            // toolChoice is a specific tool name\n            toolConfig = {\n              function_calling_config: {\n                mode: \"ANY\",\n                allowed_function_names: [toolChoice],\n              },\n            };\n          } else {\n            throw new InvalidConfigError({\n              info: `Invalid config for model : '${this.modelName}'`,\n              cause: new Error(`toolChoice : '${toolChoice}' is not part of provided 'tools' names or \n                one of [${configToolChoice.choices.join(\", \")}]`),\n            });\n          }\n        } else {\n          // toolChoice is in model schema choices\n          if (toolChoice === \"any\") {\n            toolConfig = {\n              function_calling_config: {\n                mode: \"ANY\",\n                allowed_function_names: tools.map((tool) => tool.definition.schema.name),\n              },\n            };\n          } else {\n            toolConfig = {\n              function_calling_config: {\n                mode: toolChoice.toUpperCase(), // Google uses uppercase for toolChoice\n              },\n            };\n          }\n        }\n      }\n    }\n\n    // if (\"response_format\" in transformedConfig && transformedConfig.response_format !== undefined) {\n    //   const responseFormat = transformedConfig.response_format as string;\n    //   if (responseFormat === \"json_schema\") {\n    //     if (!(\"response_schema\" in transformedConfig)) {\n    //       throw new InvalidConfigError({\n    //         info: `Invalid config for model : '${this.modelName}'`,\n    //         cause: new Error(\"'responseSchema' is required in config when 'responseFormat' is 'json_schema'\")\n    //       });\n    //     } else {\n    //       transformedConfig.response_format = {\n    //         type: \"json_schema\",\n    //         json_schema: transformedConfig.response_schema,\n    //       };\n    //       delete transformedConfig.response_schema;\n    //     }\n    //   } else {\n    //     transformedConfig.response_format = { type: responseFormat };\n    //   }\n    // }\n\n    return {\n      generation_config: transformedConfig,\n      ...(toolConfig ? { tool_config: toolConfig } : {}),\n      ...(safetySettings ? { safety_settings: safetySettings } : {}),\n    };\n  }\n\n  transformMessages(messages: MessageType[]): ParamsType {\n    if (!messages || (messages && messages.length === 0)) {\n      return { messages: [] };\n    }\n\n    const parsedMessages = messages.map((message) => {\n      const parsedMessage = Message().safeParse(message);\n      if (!parsedMessage.success) {\n        throw new InvalidMessagesError({ info: \"Invalid messages\", cause: parsedMessage.error });\n      }\n      return parsedMessage.data;\n    });\n\n    parsedMessages.forEach((message) => {\n      message.content.forEach((content) => {\n        if (!this.modelSchema.modalities.includes(content.modality)) {\n          throw new InvalidMessagesError({\n            info: `Invalid message content for model : '${this.modelName}'`,\n            cause: new Error(`model : '${this.modelName}' does not support modality : '${content.modality}', \n              available modalities : [${this.modelSchema.modalities.join(\", \")}]`),\n          });\n        }\n      });\n    });\n\n    parsedMessages.forEach((message) => {\n      if (!Object.keys(this.modelSchema.roles).includes(message.role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message content for model : '${this.modelName}'`,\n          cause: new Error(`model : '${this.modelName}' does not support role : '${message.role}', \n            available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n        });\n      }\n    });\n\n    const systemInstruction: GoogleChatSystemInstructionType = { parts: [] };\n    const nonSystemMessages: GoogleChatContentType[] = [];\n\n    parsedMessages.forEach((message) => {\n      switch (message.role) {\n        case SystemRoleLiteral:\n          {\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                systemInstruction.parts.push({ text: content.value });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n          }\n          break;\n\n        case AssistantRoleLiteral:\n          {\n            const assistantContent: GoogleChatContentType[\"parts\"] = [];\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                assistantContent.push({ text: content.value });\n              } else if (content.modality === ToolCallModalityLiteral) {\n                assistantContent.push({\n                  function_call: {\n                    name: content.name,\n                    args: JSON.parse(content.arguments),\n                  },\n                });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as GoogleChatContentType[\"role\"],\n              parts: assistantContent,\n            });\n          }\n          break;\n\n        case UserRoleLiteral:\n          {\n            const userContent: GoogleChatContentType[\"parts\"] = [];\n            message.content.forEach((content) => {\n              if (content.modality === TextModalityLiteral) {\n                userContent.push({ text: content.value });\n              } else if (content.modality === ImageModalityLiteral) {\n                if (content.value.type === \"base64\") {\n                  userContent.push({\n                    inline_data: {\n                      mime_type: content.value.media_type,\n                      data: content.value.base64,\n                    },\n                  });\n                } else if (content.value.type === \"url\") {\n                  // TODO: add logic to fetch image from url, remove this error\n                  throw new InvalidMessagesError({\n                    info: `Invalid message 'modality' for model : ${this.modelName}`,\n                    cause: new Error(`model: '${this.modelName}' does not support image content type: '${content.value.type}'`),\n                  });\n                }\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as GoogleChatContentType[\"role\"],\n              parts: userContent,\n            });\n          }\n          break;\n\n        case ToolRoleLiteral:\n          {\n            const toolResponseContent: GoogleChatContentPartFunctionResponseType[] = [];\n            message.content.forEach((content) => {\n              if (content.modality === ToolResponseModalityLiteral) {\n                toolResponseContent.push({\n                  function_response: {\n                    name: content.name,\n                    response: JSON.parse(content.data),\n                  },\n                });\n              } else {\n                throw new InvalidMessagesError({\n                  info: `Invalid message 'role' and 'modality' combination for model : ${this.modelName}`,\n                  cause: new Error(`role : '${message.role}' cannot have content with modality : '${content.modality}'`),\n                });\n              }\n            });\n            nonSystemMessages.push({\n              role: this.modelSchema.roles[message.role] as GoogleChatContentType[\"role\"],\n              parts: toolResponseContent,\n            });\n          }\n          break;\n\n        default: {\n          throw new InvalidMessagesError({\n            info: `Invalid message 'role' for model : ${this.modelName}`,\n            cause: new Error(`role : '${message.role}' is not supported, \n              available roles : [${Object.keys(this.modelSchema.roles).join(\", \")}]`),\n          });\n        }\n      }\n    });\n\n    if (nonSystemMessages[0].role !== this.modelSchema.roles[UserRoleLiteral]) {\n      throw new InvalidMessagesError({\n        info: `Invalid message 'role' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' requires first message to be from user`),\n      });\n    }\n\n    const getNextExpectedRoles = (role: string): string[] => {\n      if (role === this.modelSchema.roles[UserRoleLiteral] || role === this.modelSchema.roles[ToolRoleLiteral]) {\n        return [this.modelSchema.roles[AssistantRoleLiteral] as string];\n      }\n      return [this.modelSchema.roles[UserRoleLiteral] as string, this.modelSchema.roles[ToolRoleLiteral] as string];\n    };\n\n    for (let i = 1; i < nonSystemMessages.length; i++) {\n      if (!getNextExpectedRoles(nonSystemMessages[i - 1].role).includes(nonSystemMessages[i].role)) {\n        throw new InvalidMessagesError({\n          info: `Invalid message format for model : ${this.modelName}`,\n          cause: new Error(\n            `model : '${this.modelName}' cannot have message with role : '${nonSystemMessages[i].role}' after message with role : '${nonSystemMessages[i - 1].role}'`\n          ),\n        });\n      }\n    }\n\n    if (\n      nonSystemMessages[nonSystemMessages.length - 1].role !== this.modelSchema.roles[UserRoleLiteral] &&\n      nonSystemMessages[nonSystemMessages.length - 1].role !== this.modelSchema.roles[ToolRoleLiteral]\n    ) {\n      throw new InvalidMessagesError({\n        info: `Invalid message format for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' requires last message to be from user`),\n      });\n    }\n\n    return {\n      contents: nonSystemMessages,\n      ...(systemInstruction.parts.length > 0 ? { system_instruction: systemInstruction } : {}),\n    };\n  }\n\n  transformTools(tools: ToolType[]): ParamsType {\n    if (!this.modelSchema.modalities.includes(ToolCallModalityLiteral)) {\n      throw new InvalidToolsError({\n        info: `Invalid tool 'modality' for model : ${this.modelName}`,\n        cause: new Error(`model : '${this.modelName}' does not support tool modality : '${ToolCallModalityLiteral}'`),\n      });\n    }\n\n    if (!tools || (tools && tools.length === 0)) {\n      return { tools: [] as ToolType[] };\n    }\n\n    const parsedTools = tools.map((tool) => {\n      const parsedTool = Tool().safeParse(tool);\n      if (!parsedTool.success) {\n        throw new InvalidToolsError({ info: \"Invalid tools\", cause: parsedTool.error });\n      }\n      return parsedTool.data;\n    });\n\n    const transformedTools = parsedTools.map((tool) => ({\n      name: tool.definition.schema.name,\n      description: tool.definition.schema.description,\n      parameters: tool.definition.schema.parameters,\n    }));\n\n    return {\n      tools: [\n        {\n          function_declarations: transformedTools,\n        },\n      ],\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.completeChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getCompleteChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getCompleteChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  transformCompleteChatResponse(response: any): ChatResponseType {\n    const safe = GoogleCompleteChatResponse.safeParse(response);\n    if (safe.success) {\n      if (safe.data.candidates.length === 0) {\n        throw new ModelResponseError({\n          info: \"Invalid response from model\",\n          cause: new Error(`No choices in response : ${JSON.stringify(safe.data)}`),\n        });\n      }\n\n      const parsedResponse: GoogleCompleteChatResponseType = safe.data;\n      const messages: MessageType[] = [];\n      let usage: ChatUsageType | undefined;\n      const _content = parsedResponse.candidates[0].content;\n      if (_content) {\n        const content = _content.parts.map((contentItem: any, index: any) => {\n          if (\"text\" in contentItem && contentItem.text !== undefined) {\n            return createTextContent(contentItem.text);\n          } else if (\"functionCall\" in contentItem && contentItem.functionCall !== undefined) {\n            return createToolCallContent(\n              index,\n              `${contentItem.functionCall.name}_${index}`,\n              contentItem.functionCall.name,\n              JSON.stringify(contentItem.functionCall.args)\n            );\n          }\n        }) as ContentType[];\n\n        messages.push({\n          role: AssistantRoleLiteral,\n          content: content,\n        });\n\n        if (parsedResponse.usageMetadata) {\n          usage = {\n            promptTokens: parsedResponse.usageMetadata.promptTokenCount,\n            totalTokens: parsedResponse.usageMetadata.totalTokenCount,\n            completionTokens: parsedResponse.usageMetadata.candidatesTokenCount || 0,\n          };\n        }\n\n        return {\n          messages: messages,\n          usage: usage,\n          logProbs: undefined,\n        };\n      }\n\n      const safetyRatings = parsedResponse.candidates[0].safetyRatings;\n      if (safetyRatings && safetyRatings.length > 0) {\n        safetyRatings.forEach((rating) => {\n          if (rating.blocked) {\n            throw new ModelResponseError({\n              info: `Blocked content for category: ${rating.category} with probability: ${rating.probability}`,\n              cause: new Error(`Blocked content for category: ${rating.category} with probability: ${rating.probability}`),\n            });\n          }\n        });\n      }\n\n      const finishReason = parsedResponse.candidates[0].finishReason;\n      if (finishReason === \"SAFETY\") {\n        throw new ModelResponseError({\n          info: \"Blocked content, model response finished with safety reason\",\n          cause: new Error(\"Blocked content, model response finished with safety reason\"),\n        });\n      }\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatUrl(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.streamChatUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getStreamChatHeaders(config?: ConfigType, messages?: MessageType[], tools?: ToolType[]): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getStreamChatData(config: ConfigType, messages: MessageType[], tools?: ToolType[]): Promise<ParamsType> {\n    const transformedConfig = this.transformConfig(config, messages, tools);\n    const transformedMessages = this.transformMessages(messages);\n    if (transformedMessages.messages && (transformedMessages.messages as MessageType[]).length === 0) {\n      throw new InvalidMessagesError({\n        info: \"Messages are required\",\n        cause: new Error(\"Messages are required\"),\n      });\n    }\n\n    const transformedTools = tools ? this.transformTools(tools) : {};\n\n    return new Promise((resolve) => {\n      resolve({\n        ...this.getDefaultParams(),\n        ...transformedConfig,\n        ...transformedMessages,\n        ...transformedTools,\n      });\n    });\n  }\n\n  async *transformStreamChatResponseChunk(\n    chunk: string,\n    buffer: string\n  ): AsyncGenerator<{ partialResponse: PartialChatResponseType; buffer: string }> {\n    // merge last buffer message and split into lines\n    const lines = (buffer + chunk).split(\",\\r\").filter((line) => line.trim() !== \"\");\n    for (const line of lines) {\n      let completeLine = line;\n      // remove all '\\n' from string JSON\n      completeLine = completeLine.replace(/\\n/g, \"\");\n      if (completeLine.startsWith(\"[\")) {\n        // start of stream, remove '['\n        completeLine = completeLine.slice(1);\n      } else if (completeLine.endsWith(\"]\")) {\n        if (completeLine === \"]\") {\n          // strict end of stream\n          return;\n        } else {\n          // remaining message and then end of stream, remove ']'\n          completeLine = completeLine.slice(0, -1);\n        }\n      }\n\n      let structuredLine: any;\n      try {\n        structuredLine = JSON.parse(completeLine);\n      } catch (error) {\n        // malformed JSON error, must be the end of loop\n        if (error instanceof SyntaxError) {\n          buffer = completeLine;\n          continue;\n        } else {\n          // non JSON parse error, re-raise\n          throw error;\n        }\n      }\n\n      // reset buffer\n      buffer = \"\";\n      const safe = GoogleStreamChatResponse.safeParse(structuredLine);\n      if (safe.success) {\n        const partialResponse: PartialChatResponseType = { partialMessages: [] };\n        const parsedResponse: GoogleStreamChatResponseType = safe.data;\n        if (parsedResponse.candidates.length > 0) {\n          const message = parsedResponse.candidates[0].content;\n          if (message && \"parts\" in message && message.parts.length > 0) {\n            message.parts.forEach((messagePart, index) => {\n              if (\"text\" in messagePart && messagePart.text !== undefined) {\n                partialResponse.partialMessages.push(createPartialTextMessage(AssistantRoleLiteral, messagePart.text));\n              }\n\n              if (\"functionCall\" in messagePart && messagePart.functionCall !== undefined) {\n                const toolCall = messagePart.functionCall;\n                partialResponse.partialMessages.push(\n                  createPartialToolCallMessage(\n                    AssistantRoleLiteral,\n                    index,\n                    `${toolCall.name}_${index}`,\n                    toolCall.name,\n                    JSON.stringify(toolCall.args)\n                  )\n                );\n              }\n            });\n          }\n        }\n\n        if (parsedResponse.usageMetadata) {\n          partialResponse.usage = {\n            promptTokens: parsedResponse.usageMetadata.promptTokenCount,\n            completionTokens: parsedResponse.usageMetadata.candidatesTokenCount,\n            totalTokens: parsedResponse.usageMetadata.totalTokenCount,\n          };\n        }\n\n        yield { partialResponse: partialResponse, buffer: buffer };\n      } else {\n        throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n      }\n    }\n\n    yield { partialResponse: { partialMessages: [] }, buffer: buffer };\n  }\n}\n\nexport { BaseChatModel, BaseChatModelOptions, type BaseChatModelOptionsType };\n","import { ParamsType } from \"@adaline/provider\";\nimport { MessageType, UserRoleLiteral } from \"@adaline/types\";\n\nimport { BaseChatModel } from \"./base-chat-model.google\";\nimport { GoogleChatContentType, GoogleChatSystemInstructionType } from \"./types\";\n\nclass BaseChatModelGemini1 extends BaseChatModel {\n  transformMessages(messages: MessageType[]): ParamsType {\n    const transformedMessages = super.transformMessages(messages) as {\n      contents: GoogleChatContentType[];\n      systemInstruction?: GoogleChatSystemInstructionType;\n    };\n\n    if (transformedMessages.systemInstruction) {\n      const systemUserMessage = {\n        role: this.modelSchema.roles[UserRoleLiteral] as GoogleChatContentType[\"role\"],\n        parts: transformedMessages.systemInstruction.parts,\n      };\n      transformedMessages.contents.unshift(systemUserMessage);\n      delete transformedMessages.systemInstruction;\n    }\n\n    return transformedMessages;\n  }\n}\n\nexport { BaseChatModelGemini1 };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0Pro_001Literal = \"gemini-1.0-pro-001\";\nconst Gemini1_0Pro_001Description =\n  \"Google's predecessor to Gemini 1.5 Pro, a model for scaling across a wide range of tasks \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst Gemini1_0Pro_001Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: Gemini1_0Pro_001Literal,\n  description: Gemini1_0Pro_001Description,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n});\n\nconst Gemini1_0Pro_001Options = BaseChatModelOptions;\ntype Gemini1_0Pro_001OptionsType = z.infer<typeof Gemini1_0Pro_001Options>;\n\nclass Gemini1_0Pro_001 extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0Pro_001OptionsType) {\n    super(Gemini1_0Pro_001Schema, options);\n  }\n}\n\nexport { Gemini1_0Pro_001, Gemini1_0Pro_001Options, Gemini1_0Pro_001Schema, Gemini1_0Pro_001Literal, type Gemini1_0Pro_001OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0ProLatestLiteral = \"gemini-1.0-pro-latest\";\nconst Gemini1_0ProLatestDescription =\n  \"Google's latest multimodal model with great performance for high-frequency tasks. \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst Gemini1_0ProLatestSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: Gemini1_0ProLatestLiteral,\n  description: Gemini1_0ProLatestDescription,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n});\n\nconst Gemini1_0ProLatestOptions = BaseChatModelOptions;\ntype Gemini1_0ProLatestOptionsType = z.infer<typeof Gemini1_0ProLatestOptions>;\n\nclass Gemini1_0ProLatest extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0ProLatestOptionsType) {\n    super(Gemini1_0ProLatestSchema, options);\n  }\n}\n\nexport {\n  Gemini1_0ProLatest,\n  Gemini1_0ProLatestOptions,\n  Gemini1_0ProLatestSchema,\n  Gemini1_0ProLatestLiteral,\n  type Gemini1_0ProLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextVisionModalities,\n  GoogleChatModelTextVisionModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0ProVisionLiteral = \"gemini-1.0-pro-vision\";\nconst Gemini1_0ProVisionDescription =\n  \"Google's predecessor to Gemini 1.5 Pro, an image understanding model to handle a broad range of applications\";\n\nconst Gemini1_0ProVisionSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextVisionModalitiesEnum).parse({\n  name: Gemini1_0ProVisionLiteral,\n  description: Gemini1_0ProVisionDescription,\n  maxInputTokens: 12288,\n  maxOutputTokens: 4096,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextVisionModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).def,\n    schema: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).schema,\n  },\n});\n\nconst Gemini1_0ProVisionOptions = BaseChatModelOptions;\ntype Gemini1_0ProVisionOptionsType = z.infer<typeof Gemini1_0ProVisionOptions>;\n\nclass Gemini1_0ProVision extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0ProVisionOptionsType) {\n    super(Gemini1_0ProVisionSchema, options);\n  }\n}\n\nexport {\n  Gemini1_0ProVision,\n  Gemini1_0ProVisionOptions,\n  Gemini1_0ProVisionSchema,\n  Gemini1_0ProVisionLiteral,\n  type Gemini1_0ProVisionOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst Gemini1_0ProLiteral = \"gemini-1.0-pro\";\nconst Gemini1_0ProDescription =\n  \"Google's predecessor to Gemini 1.5 Pro, a model for scaling across a wide range of tasks \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst Gemini1_0ProSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: Gemini1_0ProLiteral,\n  description: Gemini1_0ProDescription,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n});\n\nconst Gemini1_0ProOptions = BaseChatModelOptions;\ntype Gemini1_0ProOptionsType = z.infer<typeof Gemini1_0ProOptions>;\n\nclass Gemini1_0Pro extends BaseChatModelGemini1 {\n  constructor(options: Gemini1_0ProOptionsType) {\n    super(Gemini1_0ProSchema, options);\n  }\n}\n\nexport { Gemini1_0Pro, Gemini1_0ProOptions, Gemini1_0ProSchema, Gemini1_0ProLiteral, type Gemini1_0ProOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Flash001Literal = \"gemini-1.5-flash-001\";\nconst Gemini1_5Flash001Description =\n  \"Google's fastest, most cost-efficient multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5Flash001Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Flash001Literal,\n  description: Gemini1_5Flash001Description,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n});\n\nconst Gemini1_5Flash001Options = BaseChatModelOptions;\ntype Gemini1_5Flash001OptionsType = z.infer<typeof Gemini1_5Flash001Options>;\n\nclass Gemini1_5Flash001 extends BaseChatModel {\n  constructor(options: Gemini1_5Flash001OptionsType) {\n    super(Gemini1_5Flash001Schema, options);\n  }\n}\n\nexport {\n  Gemini1_5Flash001,\n  Gemini1_5Flash001Options,\n  Gemini1_5Flash001Schema,\n  Gemini1_5Flash001Literal,\n  type Gemini1_5Flash001OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Flash002Literal = \"gemini-1.5-flash-002\";\nconst Gemini1_5Flash002Description =\n  \"Google's fastest, most cost-efficient multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5Flash002Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Flash002Literal,\n  description: Gemini1_5Flash002Description,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).schema,\n  },\n});\n\nconst Gemini1_5Flash002Options = BaseChatModelOptions;\ntype Gemini1_5Flash002OptionsType = z.infer<typeof Gemini1_5Flash002Options>;\n\nclass Gemini1_5Flash002 extends BaseChatModel {\n  constructor(options: Gemini1_5Flash002OptionsType) {\n    super(Gemini1_5Flash002Schema, options);\n  }\n}\n\nexport {\n  Gemini1_5Flash002,\n  Gemini1_5Flash002Options,\n  Gemini1_5Flash002Schema,\n  Gemini1_5Flash002Literal,\n  type Gemini1_5Flash002OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5FlashLatestLiteral = \"gemini-1.5-flash-latest\";\nconst Gemini1_5FlashLatestDescription =\n  \"Google's latest multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5FlashLatestSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5FlashLatestLiteral,\n  description: Gemini1_5FlashLatestDescription,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n});\n\nconst Gemini1_5FlashLatestOptions = BaseChatModelOptions;\ntype Gemini1_5FlashLatestOptionsType = z.infer<typeof Gemini1_5FlashLatestOptions>;\n\nclass Gemini1_5FlashLatest extends BaseChatModel {\n  constructor(options: Gemini1_5FlashLatestOptionsType) {\n    super(Gemini1_5FlashLatestSchema, options);\n  }\n}\n\nexport {\n  Gemini1_5FlashLatest,\n  Gemini1_5FlashLatestOptions,\n  Gemini1_5FlashLatestSchema,\n  Gemini1_5FlashLatestLiteral,\n  type Gemini1_5FlashLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5FlashLiteral = \"gemini-1.5-flash\";\nconst Gemini1_5FlashDescription =\n  \"Google's fastest, most cost-efficient multimodal model with great performance for high-frequency tasks. \\\n  Optimized for fast and versatile performance across a diverse variety of tasks\";\n\nconst Gemini1_5FlashSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5FlashLiteral,\n  description: Gemini1_5FlashDescription,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n});\n\nconst Gemini1_5FlashOptions = BaseChatModelOptions;\ntype Gemini1_5FlashOptionsType = z.infer<typeof Gemini1_5FlashOptions>;\n\nclass Gemini1_5Flash extends BaseChatModel {\n  constructor(options: Gemini1_5FlashOptionsType) {\n    super(Gemini1_5FlashSchema, options);\n  }\n}\n\nexport { Gemini1_5Flash, Gemini1_5FlashOptions, Gemini1_5FlashSchema, Gemini1_5FlashLiteral, type Gemini1_5FlashOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Pro001Literal = \"gemini-1.5-pro-001\";\nconst Gemini1_5Pro001Description =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5Pro001Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Pro001Literal,\n  description: Gemini1_5Pro001Description,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n});\n\nconst Gemini1_5Pro001Options = BaseChatModelOptions;\ntype Gemini1_5Pro001OptionsType = z.infer<typeof Gemini1_5Pro001Options>;\n\nclass Gemini1_5Pro001 extends BaseChatModel {\n  constructor(options: Gemini1_5Pro001OptionsType) {\n    super(Gemini1_5Pro001Schema, options);\n  }\n}\n\nexport { Gemini1_5Pro001, Gemini1_5Pro001Options, Gemini1_5Pro001Schema, Gemini1_5Pro001Literal, type Gemini1_5Pro001OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5Pro002Literal = \"gemini-1.5-pro-002\";\nconst Gemini1_5Pro002Description =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5Pro002Schema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5Pro002Literal,\n  description: Gemini1_5Pro002Description,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 40).schema,\n  },\n});\n\nconst Gemini1_5Pro002Options = BaseChatModelOptions;\ntype Gemini1_5Pro002OptionsType = z.infer<typeof Gemini1_5Pro002Options>;\n\nclass Gemini1_5Pro002 extends BaseChatModel {\n  constructor(options: Gemini1_5Pro002OptionsType) {\n    super(Gemini1_5Pro002Schema, options);\n  }\n}\n\nexport { Gemini1_5Pro002, Gemini1_5Pro002Options, Gemini1_5Pro002Schema, Gemini1_5Pro002Literal, type Gemini1_5Pro002OptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5ProLatestLiteral = \"gemini-1.5-pro-latest\";\nconst Gemini1_5ProLatestDescription =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5ProLatestSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5ProLatestLiteral,\n  description: Gemini1_5ProLatestDescription,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n});\n\nconst Gemini1_5ProLatestOptions = BaseChatModelOptions;\ntype Gemini1_5ProLatestOptionsType = z.infer<typeof Gemini1_5ProLatestOptions>;\n\nclass Gemini1_5ProLatest extends BaseChatModel {\n  constructor(options: Gemini1_5ProLatestOptionsType) {\n    super(Gemini1_5ProLatestSchema, options);\n  }\n}\n\nexport {\n  Gemini1_5ProLatest,\n  Gemini1_5ProLatestOptions,\n  Gemini1_5ProLatestSchema,\n  Gemini1_5ProLatestLiteral,\n  type Gemini1_5ProLatestOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini1_5ProLiteral = \"gemini-1.5-pro\";\nconst Gemini1_5ProDescription =\n  \"Google's best performing multimodal model with features for a wide variety of reasoning tasks. \\\n  Optimized for complex reasoning tasks requiring more intelligence\";\n\nconst Gemini1_5ProSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini1_5ProLiteral,\n  description: Gemini1_5ProDescription,\n  maxInputTokens: 2000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n});\n\nconst Gemini1_5ProOptions = BaseChatModelOptions;\ntype Gemini1_5ProOptionsType = z.infer<typeof Gemini1_5ProOptions>;\n\nclass Gemini1_5Pro extends BaseChatModel {\n  constructor(options: Gemini1_5ProOptionsType) {\n    super(Gemini1_5ProSchema, options);\n  }\n}\n\nexport { Gemini1_5Pro, Gemini1_5ProOptions, Gemini1_5ProSchema, Gemini1_5ProLiteral, type Gemini1_5ProOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModel, BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { GoogleChatModelModalities, GoogleChatModelModalitiesEnum, GoogleChatModelRoles, GoogleChatModelRolesMap } from \"./types\";\n\nconst Gemini2_0FlashExpLiteral = \"gemini-2.0-flash-exp\";\nconst Gemini2_0FlashExpDescription =\n  \"Google's experimental multimodal model with enhanced capabilities. \\\n  Designed for cutting-edge performance across complex and high-frequency tasks.\";\n\nconst Gemini2_0FlashExpSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelModalitiesEnum).parse({\n  name: Gemini2_0FlashExpLiteral,\n  description: Gemini2_0FlashExpDescription,\n  maxInputTokens: 1000000,\n  maxOutputTokens: 8192,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).def,\n    schema: GoogleChatModelConfigs.c1(2.0, 1.0, 8192, 4, 0.95, 64).schema,\n  },\n});\n\nconst Gemini2_0FlashExpOptions = BaseChatModelOptions;\ntype Gemini2_0FlashExpOptionsType = z.infer<typeof Gemini2_0FlashExpOptions>;\n\nclass Gemini2_0FlashExp extends BaseChatModel {\n  constructor(options: Gemini2_0FlashExpOptionsType) {\n    super(Gemini2_0FlashExpSchema, options);\n  }\n}\n\nexport {\n  Gemini2_0FlashExp,\n  Gemini2_0FlashExpLiteral,\n  Gemini2_0FlashExpOptions,\n  Gemini2_0FlashExpSchema,\n  type Gemini2_0FlashExpOptionsType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextVisionModalities,\n  GoogleChatModelTextVisionModalitiesEnum,\n} from \"./types\";\n\nconst GeminiProVisionLiteral = \"gemini-pro-vision\";\nconst GeminiProVisionDescription = \"An image understanding model to handle a broad range of applications\";\n\nconst GeminiProVisionSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextVisionModalitiesEnum).parse({\n  name: GeminiProVisionLiteral,\n  description: GeminiProVisionDescription,\n  maxInputTokens: 12288,\n  maxOutputTokens: 4096,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextVisionModalities,\n  config: {\n    def: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).def,\n    schema: GoogleChatModelConfigs.c1(1.0, 0.4, 4096, 4, 1.0, 32).schema,\n  },\n});\n\nconst GeminiProVisionOptions = BaseChatModelOptions;\ntype GeminiProVisionOptionsType = z.infer<typeof GeminiProVisionOptions>;\n\nclass GeminiProVision extends BaseChatModelGemini1 {\n  constructor(options: GeminiProVisionOptionsType) {\n    super(GeminiProVisionSchema, options);\n  }\n}\n\nexport { GeminiProVision, GeminiProVisionOptions, GeminiProVisionSchema, GeminiProVisionLiteral, type GeminiProVisionOptionsType };\n","import { z } from \"zod\";\n\nimport { ChatModelSchema } from \"@adaline/provider\";\n\nimport { GoogleChatModelConfigs } from \"../../configs\";\nimport { BaseChatModelOptions } from \"./base-chat-model.google\";\nimport { BaseChatModelGemini1 } from \"./base-gemini-1-chat-model.google\";\nimport {\n  GoogleChatModelRoles,\n  GoogleChatModelRolesMap,\n  GoogleChatModelTextToolModalities,\n  GoogleChatModelTextToolModalitiesEnum,\n} from \"./types\";\n\nconst GeminiProLiteral = \"gemini-pro\";\nconst GeminiProDescription =\n  \"A model for scaling across a wide range of tasks \\\n  Optimized for natural language tasks, multi-turn text and code chat, and code generation\";\n\nconst GeminiProSchema = ChatModelSchema(GoogleChatModelRoles, GoogleChatModelTextToolModalitiesEnum).parse({\n  name: GeminiProLiteral,\n  description: GeminiProDescription,\n  maxInputTokens: 30720,\n  maxOutputTokens: 2048,\n  roles: GoogleChatModelRolesMap,\n  modalities: GoogleChatModelTextToolModalities,\n  config: {\n    def: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).def,\n    schema: GoogleChatModelConfigs.base(1.0, 0.9, 2048, 4, 1.0).schema,\n  },\n});\n\nconst GeminiProOptions = BaseChatModelOptions;\ntype GeminiProOptionsType = z.infer<typeof GeminiProOptions>;\n\nclass GeminiPro extends BaseChatModelGemini1 {\n  constructor(options: GeminiProOptionsType) {\n    super(GeminiProSchema, options);\n  }\n}\n\nexport { GeminiPro, GeminiProOptions, GeminiProSchema, GeminiProLiteral, type GeminiProOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchemaType } from \"@adaline/provider\";\nimport { EmbeddingTextModalityLiteral } from \"@adaline/types\";\n\nconst GoogleEmbeddingModelModalities: EmbeddingModelSchemaType[\"modalities\"] = [EmbeddingTextModalityLiteral];\n\nconst GoogleEmbeddingModelModalitiesEnum = z.enum([EmbeddingTextModalityLiteral]);\n\nexport { GoogleEmbeddingModelModalitiesEnum, GoogleEmbeddingModelModalities };\n","import { z } from \"zod\";\n\nconst GoogleGetEmbeddingsResponse = z.object({\n  embeddings: z.array(\n    z.object({\n      values: z.array(z.number()),\n    })\n  ),\n});\ntype GoogleGetEmbeddingsResponseType = z.infer<typeof GoogleGetEmbeddingsResponse>;\n\nexport { GoogleGetEmbeddingsResponse, type GoogleGetEmbeddingsResponseType };\n","import { z } from \"zod\";\n\nconst GoogleEmbeddingRequestInput = z.object({\n  model: z.string().min(1),\n  content: z.object({\n    parts: z\n      .array(\n        z.object({\n          text: z.string().min(1),\n        })\n      )\n      .min(1),\n  }),\n});\ntype GoogleEmbeddingRequestInputType = z.infer<typeof GoogleEmbeddingRequestInput>;\n\nconst GoogleEmbeddingRequest = z.object({\n  model: z.string().min(1).optional(),\n  requests: z.array(GoogleEmbeddingRequestInput).min(1),\n  outputDimensionality: z.number().int().min(1).optional(),\n});\ntype GoogleEmbeddingRequestType = z.infer<typeof GoogleEmbeddingRequest>;\n\nexport { GoogleEmbeddingRequest, GoogleEmbeddingRequestInput, type GoogleEmbeddingRequestType, type GoogleEmbeddingRequestInputType };\n","import { z } from \"zod\";\n\nimport {\n  EmbeddingModelSchemaType,\n  EmbeddingModelV1,\n  HeadersType,\n  InvalidConfigError,\n  InvalidEmbeddingRequestsError,\n  InvalidModelRequestError,\n  ModelResponseError,\n  ParamsType,\n  removeUndefinedEntries,\n  UrlType,\n  urlWithoutTrailingSlash,\n} from \"@adaline/provider\";\nimport {\n  Config,\n  ConfigType,\n  EmbeddingRequests,\n  EmbeddingRequestsType,\n  EmbeddingResponseType,\n  EmbeddingTextModalityLiteral,\n  FloatEmbeddingLiteral,\n  FloatEmbeddingType,\n} from \"@adaline/types\";\n\nimport { GoogleEmbeddingRequest, GoogleEmbeddingRequestInputType, GoogleGetEmbeddingsResponse } from \"./types\";\n\nconst BaseEmbeddingModelOptions = z.object({\n  modelName: z.string(),\n  apiKey: z.string(),\n  baseUrl: z.string().url(),\n  getEmbeddingsUrl: z.string().url().optional(),\n});\ntype BaseEmbeddingModelOptionsType = z.infer<typeof BaseEmbeddingModelOptions>;\n\nclass BaseEmbeddingModel implements EmbeddingModelV1<EmbeddingModelSchemaType> {\n  readonly version = \"v1\" as const;\n  modelSchema: EmbeddingModelSchemaType;\n  readonly modelName: string;\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly getEmbeddingsUrl: string;\n\n  constructor(modelSchema: EmbeddingModelSchemaType, options: BaseEmbeddingModelOptionsType) {\n    const parsedOptions = BaseEmbeddingModelOptions.parse(options);\n    this.modelSchema = modelSchema;\n    this.modelName = parsedOptions.modelName;\n    this.apiKey = parsedOptions.apiKey;\n    this.baseUrl = urlWithoutTrailingSlash(parsedOptions.baseUrl);\n    this.getEmbeddingsUrl = urlWithoutTrailingSlash(\n      parsedOptions.getEmbeddingsUrl || `${this.baseUrl}/models/${this.modelName}:batchEmbedContents?key=${this.apiKey}`\n    );\n  }\n\n  getDefaultBaseUrl(): UrlType {\n    return this.baseUrl;\n  }\n\n  getDefaultHeaders(): HeadersType {\n    return {\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  getDefaultParams(): ParamsType {\n    return {\n      model: this.modelName,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getRetryDelay(responseHeaders: HeadersType): { shouldRetry: boolean; delayMs: number } {\n    return { shouldRetry: false, delayMs: 0 };\n  }\n\n  // TODO: unused method, not tested\n  getTokenCount(requests: EmbeddingRequestsType): number {\n    return requests.requests.reduce((acc, request) => acc + request.length, 0);\n  }\n\n  transformModelRequest(request: any): {\n    modelName: string | undefined;\n    config: ConfigType;\n    embeddingRequests: EmbeddingRequestsType;\n  } {\n    const safeRequest = GoogleEmbeddingRequest.safeParse(request);\n    if (!safeRequest.success) {\n      throw new InvalidModelRequestError({ info: \"Invalid model request\", cause: safeRequest.error });\n    }\n\n    const parsedRequest = safeRequest.data;\n\n    const modelName = parsedRequest.model;\n\n    const _config = {\n      outputDimensionality: parsedRequest.outputDimensionality,\n    };\n    const config = Config().parse(removeUndefinedEntries(_config));\n\n    const embeddingRequests: EmbeddingRequestsType = {\n      modality: EmbeddingTextModalityLiteral,\n      requests: parsedRequest.requests.reduce((acc, request) => {\n        acc.push(...request.content.parts.map((p) => p.text));\n        return acc;\n      }, [] as string[]),\n    };\n\n    return {\n      modelName,\n      config,\n      embeddingRequests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transformConfig(config: ConfigType, requests?: EmbeddingRequestsType): ParamsType {\n    const _parsedConfig = this.modelSchema.config.schema.safeParse(config);\n    if (!_parsedConfig.success) {\n      throw new InvalidConfigError({\n        info: `Invalid config for model : '${this.modelName}'`,\n        cause: _parsedConfig.error,\n      });\n    }\n\n    const parsedConfig = _parsedConfig.data as ConfigType;\n    Object.keys(parsedConfig as ConfigType).forEach((key) => {\n      if (!this.modelSchema.config.def[key]) {\n        throw new InvalidConfigError({\n          info: `Invalid config for model : '${this.modelName}'`,\n          cause: new Error(`Invalid config key : '${key}', \n            available keys : [${Object.keys(this.modelSchema.config.def).join(\", \")}]`),\n        });\n      }\n    });\n\n    const transformedConfig = Object.keys(parsedConfig).reduce((acc, key) => {\n      const def = this.modelSchema.config.def[key];\n      const paramKey = def.param;\n      const paramValue = parsedConfig[key];\n      acc[paramKey] = paramValue;\n      return acc;\n    }, {} as ParamsType);\n\n    return transformedConfig;\n  }\n\n  transformEmbeddingRequests(requests: EmbeddingRequestsType): ParamsType {\n    const _parsedRequests = EmbeddingRequests().safeParse(requests);\n    if (!_parsedRequests.success) {\n      throw new InvalidEmbeddingRequestsError({ info: \"Invalid embedding requests\", cause: _parsedRequests.error });\n    }\n\n    if (requests.modality !== EmbeddingTextModalityLiteral) {\n      throw new InvalidEmbeddingRequestsError({\n        info: `Invalid embedding requests for model : '${this.modelName}'`,\n        cause: new Error(`Only '${EmbeddingTextModalityLiteral}' modality is supported for model : '${this.modelName}'`),\n      });\n    }\n\n    const _requests: GoogleEmbeddingRequestInputType[] = _parsedRequests.data.requests.map((request) => {\n      return {\n        model: `models/${this.modelName}`,\n        content: { parts: [{ text: request as string }] },\n      };\n    });\n\n    return {\n      requests: _requests,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsUrl(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<UrlType> {\n    return new Promise((resolve) => {\n      resolve(this.getEmbeddingsUrl);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async getGetEmbeddingsHeaders(config?: ConfigType, requests?: EmbeddingRequestsType): Promise<HeadersType> {\n    return new Promise((resolve) => {\n      resolve(this.getDefaultHeaders());\n    });\n  }\n\n  async getGetEmbeddingsData(config: ConfigType, requests: EmbeddingRequestsType): Promise<ParamsType> {\n    return new Promise((resolve) => {\n      const _config = this.transformConfig(config);\n      const _requests = this.transformEmbeddingRequests(requests);\n\n      if (requests.requests.length === 0) {\n        throw new InvalidEmbeddingRequestsError({\n          info: `Invalid embedding requests for model : '${this.modelName}'`,\n          cause: new Error(\"requests cannot be empty\"),\n        });\n      }\n\n      if (_config.outputDimensionality) {\n        (_requests as any).requests.forEach((request: any) => {\n          request.outputDimensionality = _config.outputDimensionality;\n        });\n        delete _config.outputDimensionality;\n      }\n\n      resolve({\n        ...this.getDefaultParams(),\n        ..._config,\n        ..._requests,\n      });\n    });\n  }\n\n  transformGetEmbeddingsResponse(response: any): EmbeddingResponseType {\n    const safe = GoogleGetEmbeddingsResponse.safeParse(response);\n    if (safe.success) {\n      const parsedResponse = safe.data;\n      const embeddings = parsedResponse.embeddings.map((embedding, index) => {\n        return {\n          index,\n          embedding: embedding.values,\n        } as FloatEmbeddingType;\n      });\n\n      return {\n        encodingFormat: FloatEmbeddingLiteral,\n        embeddings: embeddings,\n      } as EmbeddingResponseType;\n    }\n\n    throw new ModelResponseError({ info: \"Invalid response from model\", cause: safe.error });\n  }\n}\n\nexport { BaseEmbeddingModel, BaseEmbeddingModelOptions, type BaseEmbeddingModelOptionsType };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { GoogleEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.google\";\nimport { GoogleEmbeddingModelModalities, GoogleEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_001Literal = \"text-embedding-001\";\nconst Text_Embedding_001_Description = \"text-embedding-001\";\n\nconst Text_Embedding_001Schema = EmbeddingModelSchema(GoogleEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_001Literal,\n  description: Text_Embedding_001_Description,\n  modalities: GoogleEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: GoogleEmbeddingModelConfigs.base(768).def,\n    schema: GoogleEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Embedding_001Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_001OptionsType = z.infer<typeof Text_Embedding_001Options>;\n\nclass Text_Embedding_001 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_001OptionsType) {\n    super(Text_Embedding_001Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_001,\n  Text_Embedding_001Options,\n  Text_Embedding_001Schema,\n  Text_Embedding_001Literal,\n  type Text_Embedding_001OptionsType,\n};\n","import { z } from \"zod\";\n\nimport { EmbeddingModelSchema } from \"@adaline/provider\";\n\nimport { GoogleEmbeddingModelConfigs } from \"../../configs\";\nimport { BaseEmbeddingModel, BaseEmbeddingModelOptions } from \"./base-embedding-model.google\";\nimport { GoogleEmbeddingModelModalities, GoogleEmbeddingModelModalitiesEnum } from \"./types\";\n\nconst Text_Embedding_004Literal = \"text-embedding-004\";\nconst Text_Embedding_004_Description = \"text-embedding-004\";\n\nconst Text_Embedding_004Schema = EmbeddingModelSchema(GoogleEmbeddingModelModalitiesEnum).parse({\n  name: Text_Embedding_004Literal,\n  description: Text_Embedding_004_Description,\n  modalities: GoogleEmbeddingModelModalities,\n  maxInputTokens: 2048,\n  maxOutputTokens: 768,\n  config: {\n    def: GoogleEmbeddingModelConfigs.base(768).def,\n    schema: GoogleEmbeddingModelConfigs.base(768).schema,\n  },\n});\n\nconst Text_Embedding_004Options = BaseEmbeddingModelOptions;\ntype Text_Embedding_004OptionsType = z.infer<typeof Text_Embedding_004Options>;\n\nclass Text_Embedding_004 extends BaseEmbeddingModel {\n  constructor(options: Text_Embedding_004OptionsType) {\n    super(Text_Embedding_004Schema, options);\n  }\n}\n\nexport {\n  Text_Embedding_004,\n  Text_Embedding_004Options,\n  Text_Embedding_004Schema,\n  Text_Embedding_004Literal,\n  type Text_Embedding_004OptionsType,\n};\n"]}