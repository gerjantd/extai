{"version":3,"sources":["../src/errors/errors.ts","../src/plugins/http-client/http-client.error.ts","../src/plugins/telemetry/telemetry.manager.ts","../src/plugins/http-client/isomorphic.http-client.ts","../src/plugins/queue/queue.error.ts","../src/plugins/queue/queue.interface.ts","../src/utils/utils.ts","../src/plugins/logger/logger.manager.ts","../src/plugins/logger/console.logger.ts","../src/plugins/queue/simple.queue.ts","../src/plugins/cache/lru.cache.ts","../src/plugins/analytics/no-op.analytics.ts","../src/plugins/analytics/analytics.utils.ts","../src/plugins/analytics/post.analytics.ts","../src/plugins/analytics/analytics.manager.ts","../src/gateway.types.ts","../src/handlers/complete-chat/complete-chat.types.ts","../src/handlers/complete-chat/complete-chat.handler.ts","../src/handlers/get-embeddings/get-embeddings.types.ts","../src/handlers/get-embeddings/get-embeddings.handler.ts","../src/handlers/stream-chat/stream-chat.types.ts","../src/handlers/stream-chat/stream-chat.handler.ts","../src/gateway.ts"],"names":["GatewayError","_GatewayError","message","status","data","GatewayTelemetryErrorLiteral","GatewayTelemetryError","_GatewayTelemetryError","GatewayBaseError","info","cause","error","HttpClientErrorLiteral","HttpClientError","_HttpClientError","HttpRequestErrorLiteral","HttpRequestError","_HttpRequestError","headers","TelemetryManager","tracer","trace","meter","metrics","convertHeadersToRecord","headerRecord","key","value","axiosToHttpRequestError","_a","_b","_c","IsomorphicHttpClient","config","axiosInstance","timeoutInMilliseconds","axios","Timeout","z","ProxyAgent","logger","LoggerManager","_0","_1","_2","__async","method","url","dataOrParams","additionalConfig","telemetryContext","_makeRequest","span","__spreadValues","__spreadProps","resp","SpanStatusCode","response","context","ATTR_HTTP_REQUEST_METHOD","ATTR_URL_FULL","options","__asyncGenerator","_stream","__await","iter","__forAwait","more","temp","chunk","decodedChunk","fetchConfig","text","reader","done","decodedValue","__yieldStar","params","QueueTaskTimeoutErrorLiteral","QueueTaskTimeoutError","_QueueTaskTimeoutError","QueueOptions","getCacheKeyHash","prefix","object","sha256","castToError","err","isRunningInBrowser","logColors","verbose","level","action","args","debug","safelyInvokeCallbacks","callbacks","name","promises","callback","func","result","delay","ms","resolve","ConsoleLogger","SimpleQueue","task","taskSpan","taskTelemetryContext","reject","timeout","retryRemaining","shouldRetry","delayMs","taskRequest","GatewayCompleteChatRequest","retryDelay","retrySpan","item","LRUCache","maxEntries","LRU","NoOpAnalytics","event","dimensions","getNodeDetails","os","getBrowserDetails","PostAnalytics","analyticsEvent","eventsToSend","events","e","AnalyticsManager","analyticsEnabled","GatewayOptions","GatewayCompleteChatRequestOptions","Config","Message","Tool","GatewayStreamChatRequestOptions","GatewayStreamChatRequest","GatewayGetEmbeddingsRequestOptions","GatewayGetEmbeddingsRequest","EmbeddingRequests","CompleteChatHandlerRequest","CompleteChatHandlerResponse","ChatResponse","handleCompleteChat","request","client","_handleCompleteChat","handlerTelemetryContext","providerData","providerRequest","cacheKey","cachedResponse","now","providerResponse","latencyInMs","safeError","GetEmbeddingsHandlerRequest","GetEmbeddingsHandlerResponse","EmbeddingResponse","handleGetEmbeddings","_handleGetEmbeddings","StreamChatHandlerRequest","StreamChatHandlerResponse","PartialChatResponse","handleStreamChat","_handleStreamChat","stable","buffer","isFirstResponse","transformed","streamResponse","Gateway","_d","_e","_f","_g","queueOptions","modelName","uuidv4","activeContext"],"mappings":"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","file":"index.mjs","sourcesContent":["import { GatewayBaseError } from \"@adaline/types\";\n\nclass GatewayError extends Error {\n  status: number;\n  data: unknown;\n\n  constructor(message: string, status: number = 500, data?: unknown) {\n    super(message);\n    this.name = \"GatewayError\";\n    this.status = status;\n    this.data = data;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GatewayError);\n    }\n  }\n}\n\nconst GatewayTelemetryErrorLiteral = \"GatewayTelemetryError\" as const;\nclass GatewayTelemetryError extends GatewayBaseError {\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, GatewayTelemetryErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isGatewayTelemetryError(error: unknown): error is GatewayTelemetryError {\n    return error instanceof GatewayTelemetryError;\n  }\n}\n\nexport { GatewayError, GatewayTelemetryError };\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst HttpClientErrorLiteral = \"HttpClientError\" as const;\nclass HttpClientError extends GatewayBaseError {\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, HttpClientErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isHttpClientError(error: unknown): error is HttpClientError {\n    return error instanceof HttpClientError;\n  }\n}\n\nconst HttpRequestErrorLiteral = \"HttpRequestError\" as const;\nclass HttpRequestError extends GatewayBaseError {\n  readonly info: string;\n  readonly cause: {\n    status: number;\n    headers: Record<string, string>;\n    data: unknown;\n  };\n\n  constructor(message: string, status: number = 500, headers: Record<string, string>, data: unknown) {\n    super({ info: message, cause: { status, headers, data } }, HttpRequestErrorLiteral);\n    this.info = message;\n    this.cause = { status, headers, data };\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isHttpRequestError(error: unknown): error is HttpRequestError {\n    return error instanceof HttpRequestError;\n  }\n}\n\nexport { HttpClientError, HttpRequestError };\n","import { Meter, metrics, trace, Tracer } from \"@opentelemetry/api\";\n\nclass TelemetryManager {\n  static DEFAULT_TRACER_KEY = \"gateway\";\n  static DEFAULT_METER_KEY = \"gateway\";\n\n  private static tracer: Tracer | undefined = undefined;\n  private static meter: Meter | undefined = undefined;\n\n  static setTracer(tracer: Tracer | undefined): void {\n    if (!this.tracer) {\n      this.tracer = tracer || trace.getTracer(this.DEFAULT_TRACER_KEY);\n    }\n  }\n\n  static getTracer(): Tracer {\n    return this.tracer || trace.getTracer(this.DEFAULT_TRACER_KEY);\n  }\n\n  static setMeter(meter: Meter | undefined): void {\n    if (!this.meter) {\n      this.meter = meter || metrics.getMeter(this.DEFAULT_METER_KEY);\n    }\n  }\n\n  static getMeter(): Meter {\n    return this.meter || metrics.getMeter(this.DEFAULT_METER_KEY);\n  }\n}\n\nexport { TelemetryManager };\n","import { Context, context, Span, SpanStatusCode, Tracer } from \"@opentelemetry/api\";\nimport { ATTR_HTTP_REQUEST_METHOD, ATTR_URL_FULL } from \"@opentelemetry/semantic-conventions\";\nimport axios, { AxiosError, AxiosInstance, AxiosRequestConfig } from \"axios\";\nimport type { ProxyAgent } from \"proxy-agent\";\nimport { z } from \"zod\";\n\nimport { LoggerManager } from \"../../plugins\";\nimport { TelemetryManager } from \"../../plugins/telemetry\";\nimport { HttpClientError, HttpRequestError } from \"./http-client.error\";\nimport { HttpClient, HttpClientResponse } from \"./http-client.interface\";\n\nconst convertHeadersToRecord = (headers: any): Record<string, string> => {\n  const headerRecord: Record<string, string> = {};\n  if (headers && (typeof headers === \"object\" || headers instanceof Headers)) {\n    Object.entries(headers).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        headerRecord[key] = value.join(\", \");\n      } else if (typeof value === \"string\") {\n        headerRecord[key] = value;\n      } else {\n        headerRecord[key] = \"\";\n      }\n    });\n  }\n\n  return headerRecord;\n};\n\nconst axiosToHttpRequestError = (error: AxiosError): HttpRequestError => {\n  const message = error?.message || \"An unexpected error occurred\";\n  const status = error?.response?.status || 500;\n  const headers = convertHeadersToRecord(error?.response?.headers) || {};\n  const data = error?.response?.data || {};\n  return new HttpRequestError(message, status, headers, data);\n};\n\ninterface IsomorphicHttpClientConfig {\n  timeoutInMilliseconds?: number;\n  axiosInstance?: AxiosInstance;\n  telemetryTracer?: Tracer;\n}\n\nclass IsomorphicHttpClient implements HttpClient {\n  private defaultTimeout?: number;\n  private client: AxiosInstance;\n  private httpProxyAgent?: ProxyAgent;\n  private httpsProxyAgent?: ProxyAgent;\n\n  constructor(config: IsomorphicHttpClientConfig) {\n    const { axiosInstance, timeoutInMilliseconds } = config;\n    this.client = axiosInstance || axios.create();\n\n    const Timeout = z.number().int().positive().optional();\n    this.defaultTimeout = Timeout.parse(timeoutInMilliseconds);\n\n    this.client.defaults.timeout = this.defaultTimeout;\n    if (this.isNodeEnvironment()) {\n      // Use require here to avoid importing in a browser build\n      const ProxyAgent = require(\"proxy-agent\");\n      this.httpProxyAgent = new ProxyAgent.ProxyAgent();\n      this.httpsProxyAgent = new ProxyAgent.ProxyAgent({\n        rejectUnauthorized: false, // Don't check SSL cert\n      });\n    }\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`IsomorphicHttpClient initialized with defaultTimeout: ${this.defaultTimeout}`);\n  }\n\n  isNodeEnvironment = (): boolean => {\n    return typeof process !== \"undefined\" && process.versions != null && process.versions.node != null;\n  };\n\n  private async makeRequest<T>(\n    method: \"get\" | \"post\" | \"put\" | \"delete\" | \"patch\",\n    url: string,\n    dataOrParams: Record<string, unknown>,\n    additionalConfig: AxiosRequestConfig = {},\n    telemetryContext?: Context\n  ): Promise<HttpClientResponse<T>> {\n    const logger = LoggerManager.getLogger();\n    const _makeRequest = async <T>(span?: Span): Promise<HttpClientResponse<T>> => {\n      try {\n        const config: AxiosRequestConfig = {\n          ...(method === \"get\" || method === \"delete\" ? { params: dataOrParams } : { data: dataOrParams }),\n          ...additionalConfig,\n          timeout: this.defaultTimeout,\n          ...(this.isNodeEnvironment()\n            ? {\n                httpAgent: this.httpProxyAgent,\n                httpsAgent: this.httpsProxyAgent,\n              }\n            : {}),\n        };\n\n        if (method === \"get\" || method === \"delete\") {\n          const resp = await this.client[method]<T>(url, config);\n          span?.setStatus({ code: SpanStatusCode.OK, message: \"request successful\" });\n          const response = {\n            data: resp.data,\n            headers: convertHeadersToRecord(resp.headers),\n            status: {\n              code: resp.status,\n              text: resp.statusText,\n            },\n          };\n          logger?.debug(\"IsomorphicHttpClient.makeRequest response: \", response);\n          return response;\n        } else {\n          const resp = await this.client[method]<T>(url, config.data, {\n            ...config,\n            params: config.params,\n          });\n          span?.setStatus({ code: SpanStatusCode.OK, message: \"request successful\" });\n          const response = {\n            data: resp.data,\n            headers: convertHeadersToRecord(resp.headers),\n            status: {\n              code: resp.status,\n              text: resp.statusText,\n            },\n          };\n          logger?.debug(\"IsomorphicHttpClient.makeRequest response: \", response);\n          return response;\n        }\n      } catch (error) {\n        logger?.warn(\"IsomorphicHttpClient.makeRequest error: \", error);\n        span?.setStatus({ code: SpanStatusCode.ERROR, message: \"request failed\" });\n        if (axios.isAxiosError(error)) throw axiosToHttpRequestError(error);\n        throw new HttpClientError({ info: \"An unexpected error occurred\", cause: error });\n      } finally {\n        span?.end();\n      }\n    };\n\n    if (!telemetryContext) {\n      return _makeRequest<T>();\n    }\n\n    return await context.with(telemetryContext, async () => {\n      const tracer = TelemetryManager.getTracer();\n      return await tracer.startActiveSpan(\"http.request\", async (span: Span) => {\n        span.setAttribute(ATTR_HTTP_REQUEST_METHOD, method.toUpperCase());\n        span.setAttribute(ATTR_URL_FULL, url);\n        return await _makeRequest<T>(span);\n      });\n    });\n  }\n\n  // TODO: needs testing for with context and without context\n  async *stream<T>(\n    url: string,\n    method: \"get\" | \"post\",\n    data?: Record<string, unknown>,\n    headers?: Record<string, string>,\n    options?: {\n      abortSignal?: AbortSignal;\n    },\n    telemetryContext?: Context\n  ): AsyncGenerator<T, void, unknown> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`IsomorphicHttpClient.STREAM request to ${url}`, { data, headers });\n    const _stream = async function* (this: IsomorphicHttpClient, span?: Span): AsyncGenerator<T, void, unknown> {\n      try {\n        if (this.isNodeEnvironment()) {\n          logger?.debug(\"IsomorphicHttpClient.stream in node environment\");\n          const response = await this.client.request({\n            method,\n            url,\n            headers,\n            data,\n            responseType: \"stream\",\n            signal: options?.abortSignal,\n          });\n\n          for await (const chunk of response.data) {\n            span?.addEvent(\"stream.chunk\", { message: \"stream chunk received\" });\n            const decodedChunk = chunk.toString();\n            logger?.debug(\"IsomorphicHttpClient.stream chunk: \", decodedChunk);\n            yield decodedChunk as unknown as T;\n          }\n          span?.setStatus({ code: SpanStatusCode.OK, message: \"stream successful\" });\n        } else {\n          logger?.debug(\"IsomorphicHttpClient.stream in browser environment\");\n          const fetchConfig: RequestInit = {\n            method,\n            headers: new Headers({\n              ...headers,\n            }),\n            body: method !== \"get\" ? JSON.stringify(data) : undefined,\n            signal: options?.abortSignal,\n          };\n          const response = await fetch(url, fetchConfig);\n\n          if (!response.ok) {\n            logger?.warn(\"IsomorphicHttpClient.stream response not ok: \", response);\n            span?.setStatus({ code: SpanStatusCode.ERROR, message: \"stream failed\" });\n            const text: any = await response.json();\n            throw new HttpRequestError(\n              `Request failed with status ${response.status}`,\n              response.status,\n              convertHeadersToRecord(response.headers),\n              text\n            );\n          }\n\n          if (response.body) {\n            const reader = response.body.getReader();\n            while (true) {\n              const { done, value } = await reader.read();\n              if (done) {\n                span?.addEvent(\"stream.chunk\", { message: \"stream chunk received\" });\n                const decodedValue = new TextDecoder().decode(value, { stream: true });\n                logger?.debug(\"IsomorphicHttpClient.stream chunk: \", decodedValue);\n                yield decodedValue as unknown as T;\n                break;\n              }\n\n              span?.addEvent(\"stream.chunk\", { message: \"stream chunk received\" });\n              const decodedValue = new TextDecoder().decode(value, { stream: true });\n              logger?.debug(\"IsomorphicHttpClient.stream chunk: \", decodedValue);\n              yield decodedValue as unknown as T;\n            }\n            span?.setStatus({ code: SpanStatusCode.OK, message: \"stream successful\" });\n          } else {\n            logger?.warn(\"IsomorphicHttpClient.stream response has no body\");\n            span?.setStatus({ code: SpanStatusCode.ERROR, message: \"stream failed\" });\n            throw new HttpRequestError(\"Cannot stream the body of the response.\", 500, {}, response);\n          }\n        }\n      } catch (error: any) {\n        logger?.warn(\"IsomorphicHttpClient.stream error: \", error);\n        span?.setStatus({ code: SpanStatusCode.ERROR, message: \"stream failed\" });\n        if (HttpRequestError.isHttpRequestError(error)) throw error;\n        if (error?.name === \"AbortError\") throw new HttpRequestError(\"AbortError\", 408, {}, {});\n        if (error?.name === \"CanceledError\") throw new HttpRequestError(\"AbortError\", 408, {}, {});\n        // TODO: how to convert non-axios errors to HttpRequestError for fetch aka browser environment\n        if (axios.isAxiosError(error)) throw axiosToHttpRequestError(error);\n        throw new HttpClientError({ info: \"An unexpected error occurred\", cause: error });\n      } finally {\n        span?.end();\n      }\n    }.bind(this);\n\n    if (!telemetryContext) {\n      return yield* _stream();\n    }\n\n    return yield* await context.with(telemetryContext, async () => {\n      const tracer = TelemetryManager.getTracer();\n      return await tracer.startActiveSpan(\"http.stream\", async (span: Span) => {\n        span.setAttribute(ATTR_HTTP_REQUEST_METHOD, method.toUpperCase());\n        span.setAttribute(ATTR_URL_FULL, url);\n        return await _stream(span);\n      });\n    });\n  }\n\n  async get<T>(\n    url: string,\n    params?: Record<string, unknown>,\n    headers?: Record<string, string | undefined>,\n    telemetryContext?: Context\n  ): Promise<HttpClientResponse<T>> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`IsomorphicHttpClient.GET request to ${url}`, { params, headers });\n    return this.makeRequest<T>(\"get\", url, params || {}, { headers }, telemetryContext);\n  }\n\n  async post<T>(\n    url: string,\n    data?: Record<string, unknown>,\n    headers?: Record<string, string | undefined>,\n    telemetryContext?: Context\n  ): Promise<HttpClientResponse<T>> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`IsomorphicHttpClient.POST request to ${url}`, { data, headers });\n    return this.makeRequest<T>(\"post\", url, data || {}, { headers }, telemetryContext);\n  }\n\n  async put<T>(\n    url: string,\n    data?: Record<string, unknown>,\n    headers?: Record<string, string | undefined>,\n    telemetryContext?: Context\n  ): Promise<HttpClientResponse<T>> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`IsomorphicHttpClient.PUT request to ${url}`, { data, headers });\n    return this.makeRequest<T>(\"put\", url, data || {}, { headers }, telemetryContext);\n  }\n\n  async delete<T>(\n    url: string,\n    params?: Record<string, unknown>,\n    headers?: Record<string, string | undefined>,\n    telemetryContext?: Context\n  ): Promise<HttpClientResponse<T>> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`IsomorphicHttpClient.DELETE request to ${url}`, { params, headers });\n    return this.makeRequest<T>(\"delete\", url, params || {}, { headers }, telemetryContext);\n  }\n\n  async patch<T>(\n    url: string,\n    data?: Record<string, unknown>,\n    headers?: Record<string, string | undefined>,\n    telemetryContext?: Context\n  ): Promise<HttpClientResponse<T>> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`IsomorphicHttpClient.PATCH request to ${url}`, { data, headers });\n    return this.makeRequest<T>(\"patch\", url, data || {}, { headers }, telemetryContext);\n  }\n}\n\nexport { IsomorphicHttpClient };\n","import { GatewayBaseError } from \"@adaline/types\";\n\nconst QueueTaskTimeoutErrorLiteral = \"QueueTaskTimeoutError\" as const;\nclass QueueTaskTimeoutError extends GatewayBaseError {\n  readonly info: string;\n  readonly cause: unknown;\n\n  constructor({ info, cause }: { info: string; cause: unknown }) {\n    super({ info, cause }, QueueTaskTimeoutErrorLiteral);\n    this.info = info;\n    this.cause = cause;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  static isQueueTaskTimeoutError(error: unknown): error is QueueTaskTimeoutError {\n    return error instanceof QueueTaskTimeoutError;\n  }\n}\n\nexport { QueueTaskTimeoutError };\n","import { Context } from \"@opentelemetry/api\";\nimport { z } from \"zod\";\n\nimport { type Cache } from \"../cache\";\n\ntype QueueTask<Request, Response> = {\n  id: string;\n  request: Request;\n  cache: Cache<Response>;\n  resolve: (value: Response) => void;\n  reject: (error: any) => void;\n  execute: (request: Request, context: Context) => Promise<Response>;\n  telemetryContext: Context;\n};\n\ninterface Queue<Request, Response> {\n  enqueue(task: QueueTask<Request, Response>): void;\n}\n\nconst QueueOptions = z.object({\n  maxConcurrentTasks: z.number().int().positive(),\n  retryCount: z.number().int().positive(),\n  timeout: z.number().int().positive(),\n  retry: z.object({\n    initialDelay: z.number().int().positive(),\n    exponentialFactor: z.number().int().positive(),\n  }),\n});\ntype QueueOptionsType = z.infer<typeof QueueOptions>;\n\nexport { QueueOptions, type Queue, type QueueOptionsType, type QueueTask };\n","import sha256 from \"crypto-js/sha256.js\";\n\nimport { GatewayError } from \"../errors/errors\";\nimport { HttpClientError } from \"../plugins/http-client/http-client.error\";\n\nconst getCacheKeyHash = (prefix: string, object: object): string => {\n  return sha256(prefix + JSON.stringify(object)).toString();\n};\n\nconst castToError = (err: any): GatewayError => {\n  if (err instanceof GatewayError) return err;\n  if (HttpClientError.isHttpClientError(err)) return new GatewayError(err.message as string);\n  if (err instanceof Error) return new GatewayError(err.message as string);\n  return new GatewayError(err);\n};\n\nconst isRunningInBrowser = () => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof navigator !== \"undefined\";\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst logLevels = {\n  error: 0,\n  warn: 1,\n  info: 2,\n};\n\nconst logColors = {\n  error: \"color: red\",\n  warn: \"color: yellow\",\n  info: \"color: green\",\n};\n\nconst verbose = (level: keyof typeof logLevels, action: string, ...args: any[]) => {\n  if (!isRunningInBrowser()) {\n    // Node.js environment\n    switch (level) {\n      case \"error\":\n        console.error(...args);\n        break;\n      case \"warn\":\n        console.warn(...args);\n        break;\n      default:\n        console.log(...args);\n    }\n  } else if (isRunningInBrowser()) {\n    // Browser environment\n    console.log(`%c[${level.toUpperCase()}] [${action}]`, logColors[level], ...args);\n  }\n};\n\nconst debug = (level: keyof typeof logLevels, action: string, ...args: any[]) => {\n  if (isRunningInBrowser()) return;\n  // eslint-disable-next-line turbo/no-undeclared-env-vars\n  if (process?.env?.DEBUG !== \"true\") return;\n  verbose(level, action, ...args);\n};\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K];\n} & unknown;\n\ninterface BaseCallback {\n  [key: string]: (...args: any[]) => void | Promise<void>;\n}\n\ntype ArgumentsType<T> = T extends (...args: infer A) => any ? A : never;\n\nconst safelyInvokeCallbacks = async <T extends BaseCallback, K extends keyof T>(\n  callbacks: T[],\n  name: keyof T,\n  ...args: ArgumentsType<T[K]>\n): Promise<void> => {\n  const promises: Promise<void>[] = [];\n\n  callbacks.forEach((callback) => {\n    const func = callback[name];\n    if (typeof func === \"function\") {\n      try {\n        const result = func(...args);\n        if (result instanceof Promise) {\n          promises.push(result);\n        }\n      } catch (error) {\n        debug(\"error\", `SAFELY_INVOKE_CALLBACKS:${String(name)}:`, error);\n      }\n    }\n  });\n\n  await Promise.allSettled(promises);\n};\n\nconst delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst calcRateLimitRetryTimeout = (\n  maxRetries: number,\n  backOffInitialDelay: number,\n  backOffMultiplier: number,\n  executionTimePerAttempt: number\n): number => {\n  let totalDelayTime = 0;\n  const totalExecutionTime = maxRetries * executionTimePerAttempt;\n\n  for (let i = 0; i < maxRetries; i++) {\n    totalDelayTime += backOffInitialDelay * Math.pow(backOffMultiplier, i);\n  }\n\n  return totalDelayTime + totalExecutionTime;\n};\n\nconst defaultShouldRetry = (status: number) => {\n  // Rate limit errors are handled separately.\n\n  // Retry on request timeouts.\n  if (status === 408) return true;\n  // Retry on lock timeouts.\n  if (status === 409) return true;\n  // Retry internal errors.\n  if (status >= 500) return true;\n\n  return false;\n};\n\nexport {\n  calcRateLimitRetryTimeout,\n  castToError,\n  debug,\n  defaultShouldRetry,\n  delay,\n  getCacheKeyHash,\n  isRunningInBrowser,\n  safelyInvokeCallbacks,\n  type Prettify,\n};\n","import { Logger } from \"./logger.interface\";\n\nclass LoggerManager {\n  private static logger: Logger | undefined;\n\n  static setLogger(logger: Logger | undefined): void {\n    this.logger = logger;\n  }\n\n  static getLogger(): Logger | undefined {\n    return this.logger;\n  }\n}\n\nexport { LoggerManager };\n","import { isRunningInBrowser } from \"../../utils/utils\";\nimport { Logger } from \"./logger.interface\";\n\nexport class ConsoleLogger implements Logger {\n  debug(message: string, ...params: any[]): void {\n    console.debug(message, ...params);\n  }\n\n  info(message: string, ...params: any[]): void {\n    console.info(message, ...params);\n  }\n\n  warn(message: string, ...params: any[]): void {\n    if (isRunningInBrowser()) {\n      console.warn(`%WARN: %c${message}`, \"color: yellow; font-weight: bold;\", \"\", ...params);\n    } else {\n      const yellow = \"\\x1b[33m\";\n      const reset = \"\\x1b[0m\";\n      console.warn(`${yellow}WARN:${reset} ${message}`, ...params);\n    }\n  }\n\n  error(message: string, ...params: any[]): void {\n    if (isRunningInBrowser()) {\n      console.error(`%ERROR: %c${message}`, \"color: lightcoral; font-weight: bold;\", \"\", ...params);\n    } else {\n      const red = \"\\x1b[91m\";\n      const reset = \"\\x1b[0m\";\n      console.error(`${red}ERROR:${reset} ${message}`, ...params);\n    }\n  }\n\n  critical(message: string, ...params: any[]): void {\n    if (isRunningInBrowser()) {\n      console.error(`%cCRITICAL: %c${message}`, \"color: red; font-weight: bold;\", \"\", ...params);\n    } else {\n      const redBold = \"\\x1b[31;1m\";\n      const reset = \"\\x1b[0m\";\n      console.error(`${redBold}CRITICAL:${reset} ${message}`, ...params);\n    }\n  }\n}\n","import { Context, context, Span, SpanStatusCode, trace } from \"@opentelemetry/api\";\n\nimport { GatewayCompleteChatRequest } from \"../../gateway.types\";\nimport { delay } from \"../../utils\";\nimport { HttpRequestError } from \"./../http-client\";\nimport { LoggerManager } from \"./../logger\";\nimport { TelemetryManager } from \"./../telemetry\";\nimport { QueueTaskTimeoutError } from \"./queue.error\";\nimport { Queue, QueueOptionsType, QueueTask } from \"./queue.interface\";\n\nclass SimpleQueue<Request, Response> implements Queue<Request, Response> {\n  private options: QueueOptionsType;\n  private activeTasks = 0;\n  private queue: { task: QueueTask<Request, Response>; taskSpan: Span }[] = [];\n\n  constructor(options: QueueOptionsType) {\n    this.options = options;\n  }\n\n  public enqueue(task: QueueTask<Request, Response>): void {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`SimpleQueue.enqueue invoked, id: ${task.id}`);\n    context.with(task.telemetryContext, async () => {\n      const tracer = TelemetryManager.getTracer();\n      return tracer.startActiveSpan(\"queue.task.pickup-wait\", async (taskSpan: Span) => {\n        taskSpan.setAttribute(\"id\", task.id);\n        this.queue.push({ task, taskSpan });\n        logger?.debug(`SimpleQueue.enqueue task enqueued, id: ${task.id}`);\n      });\n    });\n    this.processQueue();\n  }\n\n  private executeWithTimeout(task: QueueTask<Request, Response>, taskTelemetryContext: Context): Promise<Response> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`SimpleQueue.executeWithTimeout invoked with timeout: ${this.options.timeout}, id: ${task.id}`);\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        logger?.warn(`SimpleQueue.executeWithTimeout timed out, id: ${task.id}`);\n        reject(\n          new QueueTaskTimeoutError({\n            info: \"Queue task timeout\",\n            cause: new Error(\"Queue task timeout\"),\n          })\n        );\n      }, this.options.timeout);\n\n      logger?.debug(`SimpleQueue.executeWithTimeout task executing, id: ${task.id}`);\n      task\n        .execute(task.request, taskTelemetryContext)\n        .then((result) => {\n          logger?.debug(`SimpleQueue.executeWithTimeout task completed, id: ${task.id}`);\n          clearTimeout(timeout);\n          resolve(result);\n        })\n        .catch((error) => {\n          logger?.warn(`SimpleQueue.executeWithTimeout task errored, id: ${task.id}`);\n          clearTimeout(timeout);\n          reject(error);\n        });\n    });\n  }\n\n  private async executeWithRetry(task: QueueTask<Request, Response>, retryRemaining: number): Promise<Response> {\n    const logger = LoggerManager.getLogger();\n    return await context.with(task.telemetryContext, async () => {\n      const tracer = TelemetryManager.getTracer();\n      return await tracer.startActiveSpan(\"queue.task.execute\", async (span: Span) => {\n        logger?.debug(`SimpleQueue.executeWithRetry invoked, attempt: ${this.options.retryCount - retryRemaining}, id: ${task.id}`);\n        span.setAttribute(\"attempt\", this.options.retryCount - retryRemaining);\n        try {\n          const taskTelemetryContext = context.active();\n          const response = await this.executeWithTimeout(task, taskTelemetryContext);\n          span.setStatus({ code: SpanStatusCode.OK });\n          span.end();\n          return response;\n        } catch (error) {\n          if (retryRemaining === 0) {\n            logger?.warn(`SimpleQueue.executeWithRetry retry count reached, id: ${task.id}`);\n            // span.setStatus({ code: SpanStatusCode.ERROR });\n            span.end();\n            throw error;\n          }\n\n          let shouldRetry = true;\n          let delayMs =\n            this.options.retry.initialDelay * Math.pow(this.options.retry.exponentialFactor, this.options.retryCount - retryRemaining);\n          if (HttpRequestError.isHttpRequestError(error)) {\n            // rate limiting error\n            if (error.cause.status === 429) {\n              logger?.warn(`SimpleQueue.executeWithRetry rate limiting error, id: ${task.id}`);\n              const taskRequest = GatewayCompleteChatRequest.safeParse(task.request);\n              if (taskRequest.success) {\n                const retryDelay = taskRequest.data.model.getRetryDelay(error.cause.headers);\n                shouldRetry = retryDelay.shouldRetry;\n                // valid delayMs is returned from model\n                if (retryDelay.delayMs > 0) {\n                  delayMs = retryDelay.delayMs;\n                }\n              }\n            }\n\n            if (error.cause.status >= 500 && error.cause.status < 600) {\n              logger?.warn(`SimpleQueue.executeWithRetry ${error.cause.status} error, id: ${task.id}`);\n              // implement retry logic for 500 errors\n              // else defaults to exponential backoff\n            }\n          } else {\n            logger?.warn(`SimpleQueue.executeWithRetry non http-request error, id: ${task.id}`, { error });\n            // implement retry logic for non http-request errors\n            // else defaults to exponential backoff\n          }\n\n          if (!shouldRetry) {\n            // span.setStatus({ code: SpanStatusCode.ERROR });\n            logger?.warn(`SimpleQueue.executeWithRetry model returned should not retry, id: ${task.id}`);\n            span.end();\n            throw error;\n          } else {\n            // span.setStatus({ code: SpanStatusCode.ERROR });\n            return await tracer.startActiveSpan(\"queue.task.retry-wait\", async (retrySpan: Span) => {\n              logger?.debug(`SimpleQueue.executeWithRetry retry wait: ${delayMs}ms, id: ${task.id}`);\n              await delay(delayMs);\n              retrySpan.end();\n              span.end();\n              return this.executeWithRetry(task, retryRemaining - 1);\n            });\n          }\n        } finally {\n          // span.end();\n        }\n      });\n    });\n  }\n\n  private async processQueue() {\n    const logger = LoggerManager.getLogger();\n    if (this.activeTasks >= this.options.maxConcurrentTasks) {\n      logger?.debug(\"SimpleQueue.processQueue max concurrent tasks reached\");\n      return;\n    }\n\n    const item = this.queue.shift();\n    if (!item) {\n      logger?.debug(\"SimpleQueue.processQueue no item to process\");\n      return;\n    }\n\n    const { task, taskSpan } = item;\n    if (taskSpan) {\n      taskSpan.end();\n    }\n\n    this.activeTasks += 1;\n    logger?.debug(`SimpleQueue.processQueue active tasks: ${this.activeTasks}`);\n    logger?.debug(`SimpleQueue.processQueue processing task, id: ${task.id}`);\n\n    try {\n      const response: Response = await this.executeWithRetry(task, this.options.retryCount);\n      logger?.debug(`SimpleQueue.processQueue task completed, id: ${task.id}`);\n      task.resolve(response);\n    } catch (error) {\n      logger?.warn(`SimpleQueue.processQueue task errored, id: ${task.id}`);\n      task.reject(error);\n    } finally {\n      this.activeTasks -= 1;\n      logger?.debug(`SimpleQueue.processQueue active tasks: ${this.activeTasks}`);\n      trace.getSpan(task.telemetryContext)?.end();\n      this.processQueue();\n    }\n  }\n}\n\nexport { SimpleQueue };\n","import { LRUCache as LRU } from \"lru-cache\";\n\nimport { LoggerManager } from \"./../logger\";\nimport { type Cache } from \"./cache.interface\";\n\nclass LRUCache<T extends object> implements Cache<T> {\n  private cache: LRU<string, T>;\n\n  constructor(maxEntries: number = 1000) {\n    this.cache = new LRU<string, T>({\n      max: maxEntries,\n      allowStale: false,\n      updateAgeOnGet: false,\n    });\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`LRUCache initialized with maxEntries: ${maxEntries}`);\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`LRUCache.get invoked, key: ${key}`);\n    return new Promise((resolve) => {\n      const value = this.cache.get(key);\n      logger?.debug(\"LRUCache.get completed, value: \", value);\n      resolve(value);\n    });\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`LRUCache.set invoked, key: ${key}, value: `, value);\n    return new Promise((resolve) => {\n      this.cache.set(key, value);\n      logger?.debug(\"LRUCache.set completed\");\n      resolve();\n    });\n  }\n\n  async delete(key: string): Promise<void> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(`LRUCache.delete invoked, key: ${key}`);\n    return new Promise((resolve) => {\n      this.cache.delete(key);\n      logger?.debug(\"LRUCache.delete completed\");\n      resolve();\n    });\n  }\n\n  async clear(): Promise<void> {\n    const logger = LoggerManager.getLogger();\n    logger?.debug(\"LRUCache.clear invoked\");\n    return new Promise((resolve) => {\n      this.cache.clear();\n      logger?.debug(\"LRUCache.clear completed\");\n      resolve();\n    });\n  }\n}\n\nexport { LRUCache, type Cache };\n","import { AnalyticsEvent, AnalyticsRecorder } from \"./analytics.interface\";\n\nclass NoOpAnalytics implements AnalyticsRecorder {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  record(event: AnalyticsEvent[\"event\"], status: AnalyticsEvent[\"status\"], dimensions: AnalyticsEvent[\"dimensions\"]): void {\n    // Do nothing\n  }\n\n  stopRecorder(): void {\n    // Do nothing\n  }\n}\n\nexport { NoOpAnalytics };\n","// TODO: test if this file is isomorphic\nimport os from \"os\";\n\nimport { AnalyticsBrowserEnvironment, AnalyticsNodeEnvironment } from \"./analytics.interface\";\n\n// const isGatewayAnalyticsEnabled = (): boolean => {\n//   return process.env.ADX_ANALYTICS_ENABLED === \"true\" || process.env.ADX_ANALYTICS_ENABLED === undefined;\n// }\n\nconst getGatewayEnvironment = (): string => {\n  return process.env.ADX_NODE_ENV || \"unknown\";\n};\n\nconst getNodeDetails = (): AnalyticsNodeEnvironment => {\n  return {\n    node: {\n      version: process.version,\n      platform: os.platform(),\n      architecture: os.arch(),\n    },\n  };\n};\n\nconst getBrowserDetails = (): AnalyticsBrowserEnvironment => {\n  return {\n    browser: {\n      version: navigator.userAgent,\n      userAgent: navigator.userAgent,\n    },\n  };\n};\n\nexport { getBrowserDetails, getGatewayEnvironment, getNodeDetails };\n","import axios from \"axios\";\n\nimport { isRunningInBrowser } from \"./../../utils\";\nimport { AnalyticsBrowserEnvironment, AnalyticsEvent, AnalyticsNodeEnvironment, AnalyticsRecorder } from \"./analytics.interface\";\nimport { getBrowserDetails, getNodeDetails } from \"./analytics.utils\";\n\nclass PostAnalytics implements AnalyticsRecorder {\n  private readonly eventVersion = \"0.1\";\n  private readonly gatewayVersion = __LIBRARY_VERSION__;\n\n  private flushTimer: any;\n  private flushInterval: number = 10000;\n  private batchSize: number = 1;\n  private maxAttempts: number = 3;\n  private environment: AnalyticsNodeEnvironment | AnalyticsBrowserEnvironment = isRunningInBrowser()\n    ? getBrowserDetails()\n    : getNodeDetails();\n  private analyticsEndpointUrl: string = \"https://j954t34pkh.execute-api.us-east-1.amazonaws.com/v0/analytics\";\n\n  private events: { event: AnalyticsEvent; attempt: number }[] = [];\n\n  constructor() {\n    // this.startFlushTimer();\n  }\n\n  private startFlushTimer() {\n    if (isRunningInBrowser()) {\n      this.flushTimer = window.setInterval(() => this.flushEvents(), this.flushInterval);\n    } else {\n      this.flushTimer = setInterval(() => this.flushEvents(), this.flushInterval);\n    }\n  }\n\n  private stopFlushTimer() {\n    if (isRunningInBrowser()) {\n      window.clearInterval(this.flushTimer);\n    } else {\n      clearInterval(this.flushTimer);\n    }\n  }\n\n  record(event: AnalyticsEvent[\"event\"], status: AnalyticsEvent[\"status\"], dimensions: AnalyticsEvent[\"dimensions\"]): void {\n    const analyticsEvent: AnalyticsEvent = {\n      event,\n      status,\n      dimensions,\n      timestamp: new Date().toISOString(),\n      eventVersion: this.eventVersion,\n      gatewayVersion: this.gatewayVersion,\n      environment: this.environment,\n    };\n    this.events.push({ event: analyticsEvent, attempt: 0 });\n\n    if (this.events.length >= this.batchSize) {\n      this.flushEvents();\n    }\n  }\n\n  private async flushEvents(): Promise<void> {\n    if (this.events.length === 0) return;\n\n    const eventsToSend = [...this.events];\n    this.events = [];\n\n    const success = await this.sendEvents(eventsToSend.map((e) => e.event));\n    if (!success) {\n      this.events.push(\n        ...eventsToSend.filter((e) => e.attempt < this.maxAttempts).map((e) => ({ event: e.event, attempt: e.attempt + 1 }))\n      );\n    }\n  }\n\n  private async sendEvents(events: AnalyticsEvent[]): Promise<boolean> {\n    try {\n      const response = await axios.post(\n        this.analyticsEndpointUrl,\n        { events },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      return response.status === 200;\n    } catch {\n      return false;\n    }\n  }\n\n  public stopRecorder() {\n    this.stopFlushTimer();\n    this.flushEvents();\n  }\n}\n\nexport { PostAnalytics };\n","import { AnalyticsRecorder } from \"./analytics.interface\";\nimport { NoOpAnalytics } from \"./no-op.analytics\";\nimport { PostAnalytics } from \"./post.analytics\";\n\nclass AnalyticsManager {\n  private static analytics: AnalyticsRecorder | undefined;\n\n  static getAnalyticsRecorder(analyticsEnabled: boolean): AnalyticsRecorder {\n    if (this.analytics !== undefined) {\n      return this.analytics;\n    } else {\n      this.analytics = analyticsEnabled ? new PostAnalytics() : new NoOpAnalytics();\n      return this.analytics;\n    }\n  }\n}\n\nexport { AnalyticsManager };\n","import { Meter, Tracer } from \"@opentelemetry/api\";\nimport { z } from \"zod\";\n\nimport { ChatModelV1, EmbeddingModelV1 } from \"@adaline/provider\";\nimport { Config, EmbeddingRequests, Message, Tool } from \"@adaline/types\";\n\nimport {\n  CompleteChatCallbackType,\n  CompleteChatHandlerResponseType,\n  GetEmbeddingsCallbackType,\n  GetEmbeddingsHandlerResponseType,\n  StreamChatCallbackType,\n} from \"./handlers\";\nimport { Cache, HttpClient, Logger, QueueOptions } from \"./plugins\";\n\nconst GatewayOptions = z.object({\n  queueOptions: z.lazy(() => QueueOptions.partial()).optional(),\n  dangerouslyAllowBrowser: z.boolean().optional(),\n  httpClient: z.custom<HttpClient>().optional(),\n  completeChatCache: z.custom<Cache<CompleteChatHandlerResponseType>>().optional(),\n  completeChatCallbacks: z.array(z.custom<CompleteChatCallbackType>()).nonempty().optional(),\n  getEmbeddingsCache: z.custom<Cache<GetEmbeddingsHandlerResponseType>>().optional(),\n  getEmbeddingsCallbacks: z.array(z.custom<GetEmbeddingsCallbackType>()).nonempty().optional(),\n  streamChatCallbacks: z.array(z.custom<StreamChatCallbackType>()).nonempty().optional(),\n  logger: z.custom<Logger>().optional(),\n  telemetry: z\n    .object({\n      tracer: z.custom<Tracer>().optional(),\n      meter: z.custom<Meter>().optional(),\n    })\n    .optional(),\n  analyticsEnabled: z.boolean().optional(),\n});\ntype GatewayOptionsType = z.infer<typeof GatewayOptions>;\n\nconst GatewayCompleteChatRequestOptions = z.object({\n  enableCache: z.boolean().optional().default(true),\n  customHeaders: z.record(z.string()).optional(),\n  metadataForCallbacks: z.any().optional(),\n});\ntype GatewayCompleteChatRequestOptionsType = z.infer<typeof GatewayCompleteChatRequestOptions>;\n\nconst GatewayCompleteChatRequest = z.object({\n  model: z.custom<ChatModelV1>(),\n  config: Config(),\n  messages: z.array(Message()),\n  tools: z.array(Tool()).optional(),\n  options: GatewayCompleteChatRequestOptions.optional(),\n});\ntype GatewayCompleteChatRequestType = z.infer<typeof GatewayCompleteChatRequest>;\n\nconst GatewayStreamChatRequestOptions = z.object({\n  customHeaders: z.record(z.string()).optional(),\n  metadataForCallbacks: z.any().optional(),\n});\ntype GatewayStreamChatRequestOptionsType = z.infer<typeof GatewayStreamChatRequestOptions>;\n\nconst GatewayStreamChatRequest = z.object({\n  model: z.custom<ChatModelV1>(),\n  config: Config(),\n  messages: z.array(Message()),\n  tools: z.array(Tool()).optional(),\n  options: GatewayStreamChatRequestOptions.optional(),\n});\ntype GatewayStreamChatRequestType = z.infer<typeof GatewayStreamChatRequest>;\n\nconst GatewayGetEmbeddingsRequestOptions = z.object({\n  enableCache: z.boolean().optional().default(true),\n  customHeaders: z.record(z.string()).optional(),\n  metadataForCallbacks: z.any().optional(),\n});\ntype GatewayGetEmbeddingsRequestOptionsType = z.infer<typeof GatewayGetEmbeddingsRequestOptions>;\n\nconst GatewayGetEmbeddingsRequest = z.object({\n  model: z.custom<EmbeddingModelV1>(),\n  config: Config(),\n  embeddingRequests: EmbeddingRequests(),\n  options: GatewayGetEmbeddingsRequestOptions.optional(),\n});\ntype GatewayGetEmbeddingsRequestType = z.infer<typeof GatewayGetEmbeddingsRequest>;\n\nexport {\n  GatewayCompleteChatRequest,\n  GatewayCompleteChatRequestOptions,\n  GatewayGetEmbeddingsRequest,\n  GatewayGetEmbeddingsRequestOptions,\n  GatewayOptions,\n  GatewayStreamChatRequest,\n  GatewayStreamChatRequestOptions,\n  type GatewayCompleteChatRequestOptionsType,\n  type GatewayCompleteChatRequestType,\n  type GatewayGetEmbeddingsRequestOptionsType,\n  type GatewayGetEmbeddingsRequestType,\n  type GatewayOptionsType,\n  type GatewayStreamChatRequestOptionsType,\n  type GatewayStreamChatRequestType,\n};\n","import { z } from \"zod\";\n\nimport { ChatModelV1 } from \"@adaline/provider\";\nimport { ChatResponse, Config, Message, Tool } from \"@adaline/types\";\n\nimport { GatewayError } from \"../../errors\";\nimport { Cache, HttpRequestError } from \"../../plugins\";\n\nconst CompleteChatHandlerRequest = z.object({\n  cache: z.custom<Cache<CompleteChatHandlerResponseType>>(),\n  model: z.custom<ChatModelV1>(),\n  config: Config(),\n  messages: z.array(Message()),\n  tools: z.array(Tool()).optional(),\n  enableCache: z.boolean(),\n  customHeaders: z.record(z.string()).optional(),\n  callbacks: z.array(z.custom<CompleteChatCallbackType>()).nonempty().optional(),\n  metadataForCallbacks: z.any().optional(),\n});\ntype CompleteChatHandlerRequestType = z.infer<typeof CompleteChatHandlerRequest>;\n\nconst CompleteChatHandlerResponse = z.object({\n  request: z.object({\n    config: Config(),\n    messages: z.array(Message()),\n    tools: z.array(Tool()).optional(),\n  }),\n  response: ChatResponse,\n  cached: z.boolean(),\n  latencyInMs: z.number().int().positive(),\n  metadataForCallbacks: z.any().optional(),\n  provider: z.object({\n    request: z.any(),\n    response: z.any(),\n  }),\n});\ntype CompleteChatHandlerResponseType = z.infer<typeof CompleteChatHandlerResponse>;\n\ntype CompleteChatCallbackType<M = any> = {\n  onChatStart?: (metadata?: M) => Promise<void> | void;\n  onChatCached?: (metadata?: M, response?: CompleteChatHandlerResponseType) => Promise<void> | void;\n  onChatComplete?: (metadata?: M, response?: CompleteChatHandlerResponseType) => Promise<void> | void;\n  onChatError?: (metadata?: M, error?: GatewayError | HttpRequestError) => Promise<void> | void;\n};\n\nexport {\n  CompleteChatHandlerRequest,\n  CompleteChatHandlerResponse,\n  type CompleteChatCallbackType,\n  type CompleteChatHandlerRequestType,\n  type CompleteChatHandlerResponseType,\n};\n","import { Context, context, Span, SpanStatusCode } from \"@opentelemetry/api\";\n\nimport { GatewayError } from \"../../errors/errors\";\nimport { HttpClient, HttpRequestError, LoggerManager, TelemetryManager } from \"../../plugins\";\nimport { castToError, getCacheKeyHash, safelyInvokeCallbacks } from \"../../utils\";\nimport {\n  CompleteChatCallbackType,\n  CompleteChatHandlerRequest,\n  CompleteChatHandlerRequestType,\n  CompleteChatHandlerResponseType,\n} from \"./complete-chat.types\";\n\nasync function handleCompleteChat(\n  request: CompleteChatHandlerRequestType,\n  client: HttpClient,\n  telemetryContext?: Context\n): Promise<CompleteChatHandlerResponseType> {\n  const logger = LoggerManager.getLogger();\n  const _handleCompleteChat = async (span?: Span) => {\n    logger?.debug(\"handleCompleteChat invoked\");\n    logger?.debug(\"handleCompleteChat request: \", { request });\n    const data = CompleteChatHandlerRequest.parse(request);\n    const callbacks = request.callbacks || [];\n    const handlerTelemetryContext = context.active();\n\n    try {\n      safelyInvokeCallbacks<CompleteChatCallbackType, keyof CompleteChatCallbackType>(\n        callbacks,\n        \"onChatStart\",\n        request.metadataForCallbacks\n      );\n\n      const providerData = {\n        config: data.config,\n        messages: data.messages,\n        tools: data.tools,\n      };\n\n      const providerRequest = {\n        url: await data.model.getCompleteChatUrl(data.config, data.messages, data.tools),\n        headers: await data.model.getCompleteChatHeaders(data.config, data.messages, data.tools),\n        data: await data.model.getCompleteChatData(data.config, data.messages, data.tools),\n      };\n\n      providerRequest.headers = {\n        ...providerRequest.headers,\n        source: \"adaline.ai\",\n      };\n\n      if (data.customHeaders) {\n        providerRequest.headers = {\n          ...providerRequest.headers,\n          ...data.customHeaders,\n        };\n      }\n      \n      logger?.debug(\"handleCompleteChat providerRequest: \", { providerRequest });\n      const cacheKey = getCacheKeyHash(`complete-chat:${providerRequest.url}:${data.model.modelSchema.name}`, providerData);\n      if (data.enableCache) {\n        logger?.debug(\"handleCompleteChat checking cache\");\n        const cachedResponse = await request.cache.get(cacheKey);\n        if (cachedResponse) {\n          cachedResponse.cached = true;\n          logger?.debug(\"handleCompleteChat cached hit\");\n          span?.setAttribute(\"cached\", true);\n          span?.setStatus({ code: SpanStatusCode.OK });\n          safelyInvokeCallbacks<CompleteChatCallbackType, keyof CompleteChatCallbackType>(\n            callbacks,\n            \"onChatCached\",\n            request.metadataForCallbacks,\n            cachedResponse\n          );\n          logger?.debug(\"handleCompleteChat cached response: \", { cachedResponse });\n          return cachedResponse;\n        }\n      }\n\n      logger?.debug(\"handleCompleteChat cache miss\");\n      const now = Date.now();\n      const providerResponse = await client.post(\n        providerRequest.url,\n        providerRequest.data,\n        providerRequest.headers,\n        handlerTelemetryContext\n      );\n      const latencyInMs = Date.now() - now;\n      logger?.debug(\"handleCompleteChat providerResponse: \", { providerResponse });\n\n      const response: CompleteChatHandlerResponseType = {\n        request: providerData,\n        response: data.model.transformCompleteChatResponse(providerResponse.data),\n        cached: false,\n        latencyInMs,\n        metadataForCallbacks: request.metadataForCallbacks,\n        provider: {\n          request: providerRequest,\n          response: providerResponse,\n        },\n      };\n\n      logger?.debug(\"handleCompleteChat response: \", { response });\n      if (data.enableCache) {\n        await request.cache.set(cacheKey, response);\n        logger?.debug(\"handleCompleteChat response cached\");\n      }\n\n      span?.setAttribute(\"cached\", false);\n      span?.setStatus({ code: SpanStatusCode.OK });\n      safelyInvokeCallbacks<CompleteChatCallbackType, keyof CompleteChatCallbackType>(\n        callbacks,\n        \"onChatComplete\",\n        request.metadataForCallbacks,\n        response\n      );\n\n      return response;\n    } catch (error) {\n      logger?.warn(\"handleCompleteChat error: \", { error });\n      let safeError: GatewayError | HttpRequestError;\n\n      if (HttpRequestError.isHttpRequestError(error)) {\n        safeError = error;\n      } else if (error instanceof GatewayError) {\n        safeError = error;\n      } else {\n        safeError = castToError(error);\n      }\n\n      // TODO: maybe only set if it's non HTTP Error ?\n      // span?.setStatus({ code: SpanStatusCode.ERROR, message: safeError.message });\n      safelyInvokeCallbacks<CompleteChatCallbackType, keyof CompleteChatCallbackType>(\n        callbacks,\n        \"onChatError\",\n        request.metadataForCallbacks,\n        safeError\n      );\n\n      throw safeError;\n    } finally {\n      span?.end();\n    }\n  };\n\n  if (!telemetryContext) {\n    return await _handleCompleteChat();\n  }\n\n  return await context.with(telemetryContext, async () => {\n    const tracer = TelemetryManager.getTracer();\n    return await tracer.startActiveSpan(\"complete-chat.handler\", async (span: Span) => {\n      return await _handleCompleteChat(span);\n    });\n  });\n}\n\nexport { handleCompleteChat };\n","import { z } from \"zod\";\n\nimport { EmbeddingModelV1 } from \"@adaline/provider\";\nimport { Config, EmbeddingRequests, EmbeddingResponse } from \"@adaline/types\";\n\nimport { GatewayError } from \"../../errors\";\nimport { Cache, HttpRequestError } from \"../../plugins\";\n\nconst GetEmbeddingsHandlerRequest = z.object({\n  cache: z.custom<Cache<GetEmbeddingsHandlerResponseType>>(),\n  model: z.custom<EmbeddingModelV1>(),\n  config: Config(),\n  embeddingRequests: EmbeddingRequests(),\n  enableCache: z.boolean(),\n  customHeaders: z.record(z.string()).optional(),\n  callbacks: z.array(z.custom<GetEmbeddingsCallbackType>()).nonempty().optional(),\n  metadataForCallbacks: z.any().optional(),\n});\ntype GetEmbeddingsHandlerRequestType = z.infer<typeof GetEmbeddingsHandlerRequest>;\n\nconst GetEmbeddingsHandlerResponse = z.object({\n  request: z.object({\n    config: Config(),\n    embeddingRequests: EmbeddingRequests(),\n  }),\n  response: EmbeddingResponse,\n  cached: z.boolean(),\n  latencyInMs: z.number().int().positive(),\n  metadataForCallbacks: z.any().optional(),\n  provider: z.object({\n    request: z.any(),\n    response: z.any(),\n  }),\n});\ntype GetEmbeddingsHandlerResponseType = z.infer<typeof GetEmbeddingsHandlerResponse>;\n\ntype GetEmbeddingsCallbackType<M = any> = {\n  onGetEmbeddingsStart?: (metadata?: M) => Promise<void> | void;\n  onGetEmbeddingsCached?: (metadata?: M, response?: GetEmbeddingsHandlerResponseType) => Promise<void> | void;\n  onGetEmbeddingsComplete?: (metadata?: M, response?: GetEmbeddingsHandlerResponseType) => Promise<void> | void;\n  onGetEmbeddingsError?: (metadata?: M, error?: GatewayError | HttpRequestError) => Promise<void> | void;\n};\n\nexport {\n  GetEmbeddingsHandlerRequest,\n  GetEmbeddingsHandlerResponse,\n  type GetEmbeddingsHandlerRequestType,\n  type GetEmbeddingsHandlerResponseType,\n  type GetEmbeddingsCallbackType,\n};\n","import { Context, context, Span, SpanStatusCode } from \"@opentelemetry/api\";\n\nimport { GatewayError } from \"../../errors/errors\";\nimport { HttpClient, HttpRequestError, LoggerManager, TelemetryManager } from \"../../plugins\";\nimport { castToError, getCacheKeyHash, safelyInvokeCallbacks } from \"../../utils\";\nimport {\n  GetEmbeddingsCallbackType,\n  GetEmbeddingsHandlerRequest,\n  GetEmbeddingsHandlerRequestType,\n  GetEmbeddingsHandlerResponseType,\n} from \"./get-embeddings.types\";\n\nasync function handleGetEmbeddings(\n  request: GetEmbeddingsHandlerRequestType,\n  client: HttpClient,\n  telemetryContext?: Context\n): Promise<GetEmbeddingsHandlerResponseType> {\n  const logger = LoggerManager.getLogger();\n  const _handleGetEmbeddings = async (span?: Span) => {\n    logger?.debug(\"handleGetEmbeddings invoked\");\n    logger?.debug(\"handleGetEmbeddings request: \", { request });\n    const data = GetEmbeddingsHandlerRequest.parse(request);\n    const callbacks = request.callbacks || [];\n    const handlerTelemetryContext = context.active();\n\n    try {\n      safelyInvokeCallbacks<GetEmbeddingsCallbackType, keyof GetEmbeddingsCallbackType>(\n        callbacks,\n        \"onGetEmbeddingsStart\",\n        request.metadataForCallbacks\n      );\n\n      const providerData = {\n        config: data.config,\n        embeddingRequests: data.embeddingRequests,\n      };\n\n      const providerRequest = {\n        url: await data.model.getGetEmbeddingsUrl(data.config, data.embeddingRequests),\n        headers: await data.model.getGetEmbeddingsHeaders(data.config, data.embeddingRequests),\n        data: await data.model.getGetEmbeddingsData(data.config, data.embeddingRequests),\n      };\n\n      providerRequest.headers = {\n        ...providerRequest.headers,\n        source: \"adaline.ai\",\n      };\n      \n      if (data.customHeaders) {\n        providerRequest.headers = {\n          ...providerRequest.headers,\n          ...data.customHeaders,\n        };\n      }\n\n      logger?.debug(\"handleGetEmbeddings providerRequest: \", { providerRequest });\n      const cacheKey = getCacheKeyHash(`get-embeddings:${providerRequest.url}:${data.model.modelSchema.name}`, providerData);\n      if (data.enableCache) {\n        logger?.debug(\"handleGetEmbeddings checking cache\");\n        const cachedResponse = await request.cache.get(cacheKey);\n        if (cachedResponse) {\n          cachedResponse.cached = true;\n          logger?.debug(\"handleGetEmbeddings cached hit\");\n          span?.setAttribute(\"cached\", true);\n          span?.setStatus({ code: SpanStatusCode.OK });\n          safelyInvokeCallbacks<GetEmbeddingsCallbackType, keyof GetEmbeddingsCallbackType>(\n            callbacks,\n            \"onGetEmbeddingsCached\",\n            request.metadataForCallbacks,\n            cachedResponse\n          );\n          logger?.debug(\"handleGetEmbeddings cached response: \", { cachedResponse });\n          return cachedResponse;\n        }\n      }\n\n      logger?.debug(\"handleGetEmbeddings cache miss\");\n      const now = Date.now();\n      const providerResponse = await client.post(\n        providerRequest.url,\n        providerRequest.data,\n        providerRequest.headers,\n        handlerTelemetryContext\n      );\n      const latencyInMs = Date.now() - now;\n      logger?.debug(\"handleGetEmbeddings providerResponse: \", { providerResponse });\n\n      const response: GetEmbeddingsHandlerResponseType = {\n        request: providerData,\n        response: data.model.transformGetEmbeddingsResponse(providerResponse.data),\n        cached: false,\n        latencyInMs,\n        metadataForCallbacks: request.metadataForCallbacks,\n        provider: {\n          request: providerRequest,\n          response: providerResponse,\n        },\n      };\n\n      logger?.debug(\"handleGetEmbeddings response: \", { response });\n      if (data.enableCache) {\n        await request.cache.set(cacheKey, response);\n        logger?.debug(\"handleGetEmbeddings response cached\");\n      }\n\n      span?.setAttribute(\"cached\", false);\n      span?.setStatus({ code: SpanStatusCode.OK });\n      safelyInvokeCallbacks<GetEmbeddingsCallbackType, keyof GetEmbeddingsCallbackType>(\n        callbacks,\n        \"onGetEmbeddingsComplete\",\n        request.metadataForCallbacks,\n        response\n      );\n\n      return response;\n    } catch (error) {\n      logger?.warn(\"handleGetEmbeddings error: \", { error });\n      let safeError: GatewayError | HttpRequestError;\n\n      if (HttpRequestError.isHttpRequestError(error)) {\n        safeError = error;\n      } else if (error instanceof GatewayError) {\n        safeError = error;\n      } else {\n        safeError = castToError(error);\n      }\n\n      // span?.setStatus({ code: SpanStatusCode.ERROR, message: safeError.message });\n      safelyInvokeCallbacks<GetEmbeddingsCallbackType, keyof GetEmbeddingsCallbackType>(\n        callbacks,\n        \"onGetEmbeddingsError\",\n        request.metadataForCallbacks,\n        safeError\n      );\n\n      throw safeError;\n    } finally {\n      span?.end();\n    }\n  };\n\n  if (!telemetryContext) {\n    return await _handleGetEmbeddings();\n  }\n\n  return await context.with(telemetryContext, async () => {\n    const tracer = TelemetryManager.getTracer();\n    return await tracer.startActiveSpan(\"get-embeddings.handler\", async (span: Span) => {\n      return await _handleGetEmbeddings(span);\n    });\n  });\n}\n\nexport { handleGetEmbeddings };\n","import { z } from \"zod\";\n\nimport { ChatModelV1 } from \"@adaline/provider\";\nimport { Config, Message, PartialChatResponse, Tool } from \"@adaline/types\";\n\nimport { GatewayError } from \"../../errors\";\nimport { HttpRequestError } from \"../../plugins\";\n\nconst StreamChatHandlerRequest = z.object({\n  model: z.custom<ChatModelV1>(),\n  config: Config(),\n  messages: z.array(Message()),\n  tools: z.array(Tool()).optional(),\n  customHeaders: z.record(z.string()).optional(),\n  callbacks: z.array(z.custom<StreamChatCallbackType>()).nonempty().optional(),\n  metadataForCallbacks: z.any().optional(),\n});\ntype StreamChatHandlerRequestType = z.infer<typeof StreamChatHandlerRequest>;\n\nconst StreamChatHandlerResponse = z.object({\n  request: z.object({\n    config: Config(),\n    messages: z.array(Message()),\n    tools: z.array(Tool()).optional(),\n  }),\n  response: PartialChatResponse,\n  metadataForCallbacks: z.any().optional(),\n  provider: z.object({\n    request: z.any(),\n    response: z.any(),\n  }),\n});\ntype StreamChatHandlerResponseType = z.infer<typeof StreamChatHandlerResponse>;\n\ntype StreamChatCallbackType<M = any> = {\n  onStreamStart?: (metadata?: M) => Promise<void> | void;\n  onStreamFirstResponse?: (metadata?: M, response?: StreamChatHandlerResponseType, chunk?: unknown) => Promise<void> | void;\n  onStreamNewResponse?: (metadata?: M, response?: StreamChatHandlerResponseType, chunk?: unknown) => Promise<void> | void;\n  onStreamEnd?: (metadata?: M, response?: StreamChatHandlerResponseType) => Promise<void> | void;\n  onStreamError?: (metadata?: M, error?: GatewayError | HttpRequestError) => Promise<void> | void;\n};\n\nexport {\n  StreamChatHandlerRequest,\n  StreamChatHandlerResponse,\n  type StreamChatCallbackType,\n  type StreamChatHandlerRequestType,\n  type StreamChatHandlerResponseType,\n};\n","import { Context, context, Span, SpanStatusCode } from \"@opentelemetry/api\";\n\nimport { GatewayError } from \"../../errors/errors\";\nimport { HttpClient, HttpRequestError, LoggerManager, TelemetryManager } from \"../../plugins\";\nimport { castToError, safelyInvokeCallbacks } from \"../../utils\";\nimport {\n  StreamChatCallbackType,\n  StreamChatHandlerRequest,\n  StreamChatHandlerRequestType,\n  StreamChatHandlerResponseType,\n} from \"./stream-chat.types\";\n\nasync function* handleStreamChat<M>(\n  request: StreamChatHandlerRequestType,\n  client: HttpClient,\n  telemetryContext?: Context\n): AsyncGenerator<StreamChatHandlerResponseType, void, unknown> {\n  const logger = LoggerManager.getLogger();\n  const _handleStreamChat = async function* (span?: Span): AsyncGenerator<StreamChatHandlerResponseType, void, unknown> {\n    logger?.debug(\"handleStreamChat invoked\");\n    logger?.debug(\"handleStreamChat request: \", { request });\n    const data = StreamChatHandlerRequest.parse(request);\n    const callbacks = request.callbacks || [];\n\n    const stable = {\n      config: data.config,\n      messages: data.messages,\n      tools: data.tools,\n    };\n\n    try {\n      safelyInvokeCallbacks<StreamChatCallbackType, keyof StreamChatCallbackType>(callbacks, \"onStreamStart\", request.metadataForCallbacks);\n\n      const providerRequest = {\n        url: await data.model.getStreamChatUrl(data.config, data.messages, data.tools),\n        headers: await data.model.getStreamChatHeaders(data.config, data.messages, data.tools),\n        data: await data.model.getStreamChatData(data.config, data.messages, data.tools),\n      };\n\n      providerRequest.headers = {\n        ...providerRequest.headers,\n        source: \"adaline.ai\",\n      };\n      \n      if (data.customHeaders) {\n        providerRequest.headers = {\n          ...providerRequest.headers,\n          ...data.customHeaders,\n        };\n      }\n      logger?.debug(\"handleStreamChat providerRequest: \", { providerRequest });\n\n      let buffer = \"\";\n      let isFirstResponse = true;\n      for await (const chunk of client.stream(providerRequest.url, \"post\", providerRequest.data, providerRequest.headers)) {\n        for await (const transformed of data.model.transformStreamChatResponseChunk(chunk as string, buffer)) {\n          if (transformed.partialResponse.partialMessages.length > 0) {\n            const streamResponse = {\n              request: stable,\n              response: transformed.partialResponse,\n              metadataForCallbacks: request.metadataForCallbacks,\n              provider: {\n                request: providerRequest,\n                response: chunk,\n              },\n            };\n\n            safelyInvokeCallbacks<StreamChatCallbackType<M>, keyof StreamChatCallbackType<M>>(\n              callbacks,\n              isFirstResponse ? \"onStreamFirstResponse\" : \"onStreamNewResponse\",\n              request.metadataForCallbacks,\n              streamResponse\n            );\n\n            if (isFirstResponse) {\n              isFirstResponse = false;\n            }\n\n            logger?.debug(\"handleStreamChat streamResponse: \", { streamResponse });\n            yield streamResponse;\n          } else {\n            buffer = transformed.buffer;\n          }\n        }\n      }\n\n      span?.setStatus({ code: SpanStatusCode.OK });\n      safelyInvokeCallbacks<StreamChatCallbackType<M>, keyof StreamChatCallbackType<M>>(\n        callbacks,\n        \"onStreamEnd\",\n        request.metadataForCallbacks\n      );\n    } catch (error) {\n      logger?.warn(\"handleStreamChat error: \", { error });\n      let safeError: GatewayError | HttpRequestError;\n\n      if (HttpRequestError.isHttpRequestError(error)) {\n        safeError = error;\n      } else if (error instanceof GatewayError) {\n        safeError = error;\n      } else {\n        safeError = castToError(error);\n      }\n\n      // span?.setStatus({ code: SpanStatusCode.ERROR, message: safeError.message });\n      safelyInvokeCallbacks<StreamChatCallbackType<M>, keyof StreamChatCallbackType<M>>(\n        callbacks,\n        \"onStreamError\",\n        request.metadataForCallbacks,\n        safeError\n      );\n\n      throw safeError;\n    } finally {\n      span?.end();\n    }\n  };\n\n  if (!telemetryContext) {\n    return yield* _handleStreamChat();\n  }\n\n  return yield* await context.with(telemetryContext, async () => {\n    const tracer = TelemetryManager.getTracer();\n    return await tracer.startActiveSpan(\"stream-chat.handler\", async (span: Span) => {\n      return await _handleStreamChat(span);\n    });\n  });\n}\n\nexport { handleStreamChat };\n","import { Context, context, Meter, Span, SpanStatusCode, trace, Tracer } from \"@opentelemetry/api\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { GatewayError } from \"./errors\";\nimport {\n  GatewayCompleteChatRequest,\n  GatewayCompleteChatRequestType,\n  GatewayGetEmbeddingsRequest,\n  GatewayGetEmbeddingsRequestType,\n  GatewayOptions,\n  GatewayOptionsType,\n  GatewayStreamChatRequest,\n  GatewayStreamChatRequestType,\n} from \"./gateway.types\";\nimport { CompleteChatHandlerResponseType, GetEmbeddingsHandlerResponseType, StreamChatHandlerResponseType } from \"./handlers\";\nimport { handleCompleteChat } from \"./handlers/complete-chat/complete-chat.handler\";\nimport { handleGetEmbeddings } from \"./handlers/get-embeddings/get-embeddings.handler\";\nimport { handleStreamChat } from \"./handlers/stream-chat/stream-chat.handler\";\nimport { Cache, HttpClient, IsomorphicHttpClient, LRUCache, Queue, QueueTask, SimpleQueue } from \"./plugins\";\nimport { AnalyticsManager, AnalyticsRecorder } from \"./plugins/analytics\";\nimport { Logger, LoggerManager } from \"./plugins/logger\";\nimport { TelemetryManager } from \"./plugins/telemetry\";\nimport { isRunningInBrowser } from \"./utils\";\n\nclass Gateway {\n  private options: GatewayOptionsType;\n\n  private logger?: Logger;\n  private tracer: Tracer;\n  private meter: Meter;\n  private analytics: AnalyticsRecorder;\n\n  private httpClient: HttpClient;\n  private queues: {\n    completeChat: Queue<GatewayCompleteChatRequestType, CompleteChatHandlerResponseType>;\n    getEmbeddings: Queue<GatewayGetEmbeddingsRequestType, GetEmbeddingsHandlerResponseType>;\n  };\n  private caches: {\n    completeChat: Cache<CompleteChatHandlerResponseType>;\n    getEmbeddings: Cache<GetEmbeddingsHandlerResponseType>;\n  };\n\n  constructor(options: GatewayOptionsType = {}) {\n    if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {\n      throw new GatewayError(\n        \"It looks like you're running in a browser-like environment. \\\n        This is disabled by default, as it risks exposing your provider secrets to attackers. \\\n        If you understand the risks and have appropriate mitigation in place, \\\n        you can set the `dangerouslyAllowBrowser` option to `true`.\"\n      );\n    }\n\n    this.options = GatewayOptions.parse(options);\n\n    LoggerManager.setLogger(options.logger);\n    this.logger = options.logger;\n\n    this.analytics = AnalyticsManager.getAnalyticsRecorder(\n      this.options.analyticsEnabled === undefined ? true : this.options.analyticsEnabled\n    );\n\n    TelemetryManager.setTracer(options.telemetry?.tracer);\n    this.tracer = TelemetryManager.getTracer();\n\n    TelemetryManager.setMeter(options.telemetry?.meter);\n    this.meter = TelemetryManager.getMeter();\n\n    const queueOptions = {\n      maxConcurrentTasks: this.options.queueOptions?.maxConcurrentTasks || 4,\n      retryCount: this.options.queueOptions?.retryCount || 3,\n      retry: this.options.queueOptions?.retry || {\n        initialDelay: 1000,\n        exponentialFactor: 2,\n      },\n      timeout: this.options.queueOptions?.timeout || 120000,\n    };\n\n    this.queues = {\n      completeChat: new SimpleQueue(queueOptions),\n      getEmbeddings: new SimpleQueue(queueOptions),\n    };\n\n    // httpClient timeout is 90% of queue timeout\n    this.httpClient = options.httpClient || new IsomorphicHttpClient({ timeoutInMilliseconds: queueOptions.timeout * 0.9 });\n\n    this.caches = {\n      completeChat: options.completeChatCache || new LRUCache<CompleteChatHandlerResponseType>(),\n      getEmbeddings: options.getEmbeddingsCache || new LRUCache<GetEmbeddingsHandlerResponseType>(),\n    };\n    this.logger?.debug(\"gateway initialized\");\n  }\n\n  async completeChat(request: GatewayCompleteChatRequestType): Promise<CompleteChatHandlerResponseType> {\n    this.logger?.info(\"gateway.completeChat invoked\");\n    this.logger?.debug(\"request: \", { request });\n    const data = GatewayCompleteChatRequest.parse(request);\n    const modelName = data.model.modelSchema.name;\n    // const counter = this.meter.createCounter(\"completeChat.counter\");\n    // counter.add(1, { modelName });\n    return await this.tracer.startActiveSpan(\"complete-chat\", async (span: Span) => {\n      span.setAttribute(\"modelName\", modelName);\n      return new Promise<CompleteChatHandlerResponseType>((resolve, reject) => {\n        const task: QueueTask<GatewayCompleteChatRequestType, CompleteChatHandlerResponseType> = {\n          id: uuidv4(),\n          request: data,\n          cache: this.caches.completeChat,\n          resolve: (response: CompleteChatHandlerResponseType) => {\n            this.analytics.record(\"completeChat\", \"success\", { modelName, usage: response.response.usage || {} });\n            resolve(response);\n          },\n          reject: (error: any) => {\n            console.log(\"completeChat error\", error);\n            this.analytics.record(\"completeChat\", \"error\", { modelName });\n            reject(error);\n          },\n          execute: this.executeCompleteChat.bind(this),\n          telemetryContext: context.active(),\n        };\n        this.queues.completeChat.enqueue(task);\n        this.logger?.debug(`gateway.completeChat task enqueued, id: ${task.id}`);\n      });\n    });\n  }\n\n  private async executeCompleteChat(\n    request: GatewayCompleteChatRequestType,\n    telemetryContext: Context\n  ): Promise<CompleteChatHandlerResponseType> {\n    this.logger?.debug(\"gateway.executeCompleteChat invoked\");\n    const data = GatewayCompleteChatRequest.parse(request);\n    return handleCompleteChat(\n      {\n        cache: this.caches.completeChat,\n        model: data.model,\n        config: data.config,\n        messages: data.messages,\n        tools: data.tools,\n        enableCache: data.options?.enableCache ?? true,\n        callbacks: this.options.completeChatCallbacks,\n        metadataForCallbacks: data.options?.metadataForCallbacks,\n      },\n      this.httpClient,\n      telemetryContext\n    );\n  }\n\n  async *streamChat(request: GatewayStreamChatRequestType): AsyncGenerator<StreamChatHandlerResponseType, void, unknown> {\n    this.logger?.info(\"gateway.streamChat invoked\");\n    this.logger?.debug(\"request: \", { request });\n    const data = GatewayStreamChatRequest.parse(request);\n    const modelName = data.model.modelSchema.name;\n\n    let status = \"success\";\n    const span = this.tracer.startSpan(\"stream-chat\");\n    const activeContext = trace.setSpan(context.active(), span);\n\n    try {\n      span.setAttribute(\"modelName\", modelName);\n      return yield* await context.with(activeContext, async () => {\n        return handleStreamChat(\n          {\n            model: data.model,\n            config: data.config,\n            messages: data.messages,\n            tools: data.tools,\n            callbacks: this.options.streamChatCallbacks,\n            metadataForCallbacks: data.options?.metadataForCallbacks,\n          },\n          this.httpClient,\n          activeContext\n        );\n      });\n    } catch (error) {\n      status = \"error\";\n      span.setStatus({ code: SpanStatusCode.ERROR, message: \"stream failed\" });\n      this.logger?.error(\"gateway.streamChat error: \", { error });\n      if (error instanceof GatewayError) throw error;\n      else throw new GatewayError((error as any)?.message, 500, (error as any)?.response?.data);\n    } finally {\n      this.analytics.record(\"streamChat\", status, { modelName });\n      span.end();\n    }\n  }\n\n  async getEmbeddings(request: GatewayGetEmbeddingsRequestType): Promise<GetEmbeddingsHandlerResponseType> {\n    this.logger?.info(\"gateway.getEmbeddings invoked\");\n    this.logger?.debug(\"request: \", { request });\n    const data = GatewayGetEmbeddingsRequest.parse(request);\n    const modelName = data.model.modelSchema.name;\n    return await this.tracer.startActiveSpan(\"get-embeddings\", async (span: Span) => {\n      span.setAttribute(\"modelName\", modelName);\n      return new Promise<GetEmbeddingsHandlerResponseType>((resolve, reject) => {\n        const task: QueueTask<GatewayGetEmbeddingsRequestType, GetEmbeddingsHandlerResponseType> = {\n          id: uuidv4(),\n          request: data,\n          cache: this.caches.getEmbeddings,\n          resolve: (response: GetEmbeddingsHandlerResponseType) => {\n            this.analytics.record(\"getEmbeddings\", \"success\", { modelName, usage: response.response.usage || {} });\n            resolve(response);\n          },\n          reject: (error: any) => {\n            this.analytics.record(\"getEmbeddings\", \"error\", { modelName });\n            reject(error);\n          },\n          execute: this.executeGetEmbeddings.bind(this),\n          telemetryContext: context.active(),\n        };\n        this.queues.getEmbeddings.enqueue(task);\n        this.logger?.debug(`gateway.getEmbeddings task enqueued, id: ${task.id}`);\n      });\n    });\n  }\n\n  private async executeGetEmbeddings(\n    request: GatewayGetEmbeddingsRequestType,\n    telemetryContext: Context\n  ): Promise<GetEmbeddingsHandlerResponseType> {\n    this.logger?.debug(\"gateway.executeGetEmbeddings invoked\");\n    const data = GatewayGetEmbeddingsRequest.parse(request);\n    return handleGetEmbeddings(\n      {\n        cache: this.caches.getEmbeddings,\n        model: data.model,\n        config: data.config,\n        embeddingRequests: data.embeddingRequests,\n        enableCache: data.options?.enableCache ?? true,\n        callbacks: this.options.getEmbeddingsCallbacks,\n        metadataForCallbacks: data.options?.metadataForCallbacks,\n      },\n      this.httpClient,\n      telemetryContext\n    );\n  }\n\n  static GatewayError = GatewayError;\n}\n\nexport { Gateway, type GatewayOptionsType };\n"]}