"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.JAVASCRIPT_EXTENSIONS = void 0;
exports.isJavascriptFile = isJavascriptFile;
exports.isImageFile = isImageFile;
exports.isVideoFile = isVideoFile;
exports.isAudioFile = isAudioFile;
exports.getResolvedRelativePath = getResolvedRelativePath;
const path = __importStar(require("path"));
/**
 * Array of supported JavaScript and TypeScript file extensions
 */
exports.JAVASCRIPT_EXTENSIONS = ['js', 'cjs', 'mjs', 'ts', 'cts', 'mts'];
/**
 * Checks if a file is a JavaScript or TypeScript file based on its extension.
 *
 * @param filePath - The path of the file to check.
 * @returns True if the file has a JavaScript or TypeScript extension, false otherwise.
 */
function isJavascriptFile(filePath) {
    return new RegExp(`\\.(${exports.JAVASCRIPT_EXTENSIONS.join('|')})$`).test(filePath);
}
/**
 * Checks if a file is an image file based on its extension. Non-exhaustive list.
 *
 * @param filePath - The path of the file to check.
 * @returns True if the file has an image extension, false otherwise.
 */
function isImageFile(filePath) {
    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'];
    const fileExtension = filePath.split('.').pop()?.toLowerCase() || '';
    return imageExtensions.includes(fileExtension);
}
/**
 * Checks if a file is a video file based on its extension. Non-exhaustive list.
 *
 * @param filePath - The path of the file to check.
 * @returns True if the file has a video extension, false otherwise.
 */
function isVideoFile(filePath) {
    const videoExtensions = ['mp4', 'webm', 'ogg', 'mov', 'avi', 'wmv', 'mkv', 'm4v'];
    const fileExtension = filePath.split('.').pop()?.toLowerCase() || '';
    return videoExtensions.includes(fileExtension);
}
/**
 * Checks if a file is an audio file based on its extension. Non-exhaustive list.
 *
 * @param filePath - The path of the file to check.
 * @returns True if the file has an audio extension, false otherwise.
 */
function isAudioFile(filePath) {
    const audioExtensions = ['wav', 'mp3', 'ogg', 'aac', 'm4a', 'flac', 'wma', 'aiff', 'opus'];
    const fileExtension = filePath.split('.').pop()?.toLowerCase() || '';
    return audioExtensions.includes(fileExtension);
}
/**
 * Resolves a relative file path with respect to a base path, handling cloud configuration appropriately.
 * When using a cloud configuration, the current working directory is always used instead of the context's base path.
 *
 * @param filePath - The relative or absolute file path to resolve.
 * @param contextBasePath - The base path from the context (typically the directory containing the config file).
 * @param isCloudConfig - Whether this is a cloud configuration.
 * @returns The resolved absolute file path.
 */
function getResolvedRelativePath(filePath, contextBasePath, isCloudConfig) {
    // If it's already an absolute path, return it as is
    if (path.isAbsolute(filePath)) {
        return filePath;
    }
    // If using a cloud config, always use process.cwd() instead of contextBasePath
    const basePath = isCloudConfig === true ? process.cwd() : contextBasePath || process.cwd();
    // Join the basePath and filePath to get the resolved path
    return path.join(basePath, filePath);
}
//# sourceMappingURL=file.js.map