#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const package_json_1 = require("../package.json");
const checkNodeVersion_1 = require("./checkNodeVersion");
const auth_1 = require("./commands/auth");
const cache_1 = require("./commands/cache");
const config_1 = require("./commands/config");
const debug_1 = require("./commands/debug");
const delete_1 = require("./commands/delete");
const eval_1 = require("./commands/eval");
const export_1 = require("./commands/export");
const feedback_1 = require("./commands/feedback");
const dataset_1 = require("./commands/generate/dataset");
const import_1 = require("./commands/import");
const init_1 = require("./commands/init");
const list_1 = require("./commands/list");
const modelScan_1 = require("./commands/modelScan");
const share_1 = require("./commands/share");
const show_1 = require("./commands/show");
const view_1 = require("./commands/view");
const logger_1 = __importDefault(require("./logger"));
const migrate_1 = require("./migrate");
const generate_1 = require("./redteam/commands/generate");
const init_2 = require("./redteam/commands/init");
const plugins_1 = require("./redteam/commands/plugins");
const report_1 = require("./redteam/commands/report");
const run_1 = require("./redteam/commands/run");
const setup_1 = require("./redteam/commands/setup");
const updates_1 = require("./updates");
const default_1 = require("./util/config/default");
async function main() {
    await (0, updates_1.checkForUpdates)();
    await (0, migrate_1.runDbMigrations)();
    const { defaultConfig, defaultConfigPath } = await (0, default_1.loadDefaultConfig)();
    const program = new commander_1.Command('promptfoo');
    program
        .version(package_json_1.version)
        .showHelpAfterError()
        .showSuggestionAfterError()
        .on('option:*', function () {
        logger_1.default.error('Invalid option(s)');
        program.help();
        process.exitCode = 1;
    });
    // Main commands
    (0, eval_1.evalCommand)(program, defaultConfig, defaultConfigPath);
    (0, init_1.initCommand)(program);
    (0, view_1.viewCommand)(program);
    const redteamBaseCommand = program.command('redteam').description('Red team LLM applications');
    (0, share_1.shareCommand)(program);
    // Alphabetical order
    (0, auth_1.authCommand)(program);
    (0, cache_1.cacheCommand)(program);
    (0, config_1.configCommand)(program);
    (0, debug_1.debugCommand)(program, defaultConfig, defaultConfigPath);
    (0, delete_1.deleteCommand)(program);
    (0, export_1.exportCommand)(program);
    const generateCommand = program.command('generate').description('Generate synthetic data');
    (0, feedback_1.feedbackCommand)(program);
    (0, import_1.importCommand)(program);
    (0, list_1.listCommand)(program);
    (0, modelScan_1.modelScanCommand)(program);
    (0, show_1.showCommand)(program);
    (0, dataset_1.generateDatasetCommand)(generateCommand, defaultConfig, defaultConfigPath);
    (0, generate_1.redteamGenerateCommand)(generateCommand, 'redteam', defaultConfig, defaultConfigPath);
    const { defaultConfig: redteamConfig, defaultConfigPath: redteamConfigPath } = await (0, default_1.loadDefaultConfig)(undefined, 'redteam');
    (0, init_2.initCommand)(redteamBaseCommand);
    (0, eval_1.evalCommand)(redteamBaseCommand, redteamConfig ?? defaultConfig, redteamConfigPath ?? defaultConfigPath);
    (0, generate_1.redteamGenerateCommand)(redteamBaseCommand, 'generate', defaultConfig, defaultConfigPath);
    (0, run_1.redteamRunCommand)(redteamBaseCommand);
    (0, report_1.redteamReportCommand)(redteamBaseCommand);
    (0, setup_1.redteamSetupCommand)(redteamBaseCommand);
    (0, plugins_1.pluginsCommand)(redteamBaseCommand);
    program.parse();
}
if (require.main === module) {
    (0, checkNodeVersion_1.checkNodeVersion)();
    main();
}
//# sourceMappingURL=main.js.map