"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_LANGUAGES = void 0;
exports.generateMultilingual = generateMultilingual;
exports.translate = translate;
exports.addMultilingual = addMultilingual;
const async_1 = __importDefault(require("async"));
const cli_progress_1 = require("cli-progress");
const dedent_1 = __importDefault(require("dedent"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const cache_1 = require("../../cache");
const accounts_1 = require("../../globalConfig/accounts");
const logger_1 = __importDefault(require("../../logger"));
const shared_1 = require("../../providers/shared");
const invariant_1 = __importDefault(require("../../util/invariant"));
const shared_2 = require("../providers/shared");
const remoteGeneration_1 = require("../remoteGeneration");
exports.DEFAULT_LANGUAGES = ['bn', 'sw', 'jv']; // Bengali, Swahili, Javanese
async function generateMultilingual(testCases, injectVar, config) {
    try {
        const batchSize = 8;
        const concurrency = 10;
        const batches = [];
        for (let i = 0; i < testCases.length; i += batchSize) {
            batches.push(testCases.slice(i, i + batchSize));
        }
        let allResults = [];
        let processedBatches = 0;
        let progressBar;
        if (logger_1.default.level !== 'debug') {
            progressBar = new cli_progress_1.SingleBar({
                format: 'Remote Multilingual Generation {bar} {percentage}% | ETA: {eta}s | {value}/{total} batches',
                hideCursor: true,
            }, cli_progress_1.Presets.shades_classic);
            progressBar.start(batches.length, 0);
        }
        await async_1.default.forEachOfLimit(batches, concurrency, async (batch, index) => {
            const payload = {
                task: 'multilingual',
                testCases: batch,
                injectVar,
                config,
                email: (0, accounts_1.getUserEmail)(),
            };
            const { data } = await (0, cache_1.fetchWithCache)((0, remoteGeneration_1.getRemoteGenerationUrl)(), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            }, shared_1.REQUEST_TIMEOUT_MS);
            logger_1.default.debug(`Got remote multilingual generation result for batch ${Number(index) + 1}: ${JSON.stringify(data)}`);
            allResults = allResults.concat(data.result);
            processedBatches++;
            if (progressBar) {
                progressBar.increment(1);
            }
            else {
                logger_1.default.debug(`Processed batch ${processedBatches} of ${batches.length}`);
            }
        });
        if (progressBar) {
            progressBar.stop();
        }
        return allResults;
    }
    catch (error) {
        logger_1.default.error(`Error in remote multilingual generation: ${error}`);
        return [];
    }
}
async function translate(text, lang) {
    const redteamProvider = await shared_2.redteamProviderManager.getProvider({
        jsonOnly: true,
        preferSmallModel: true,
    });
    const result = await redteamProvider.callApi((0, dedent_1.default) `Translate the <Text> below to language '${lang}'. Respond with JSON object containing {translation: string}, , do not put it in markdown

    <Text>
    ${text}
    </Text>`);
    try {
        return js_yaml_1.default.load(result.output).translation;
    }
    catch (error) {
        logger_1.default.error(`[translate] Error parsing translation result: ${error} Provider Output: ${JSON.stringify(result.output, null, 2)}`);
        return null;
    }
}
async function addMultilingual(testCases, injectVar, config) {
    if ((0, remoteGeneration_1.shouldGenerateRemote)()) {
        const multilingualTestCases = await generateMultilingual(testCases, injectVar, config);
        if (multilingualTestCases.length > 0) {
            return multilingualTestCases;
        }
    }
    const languages = config.languages || exports.DEFAULT_LANGUAGES;
    (0, invariant_1.default)(Array.isArray(languages), 'multilingual strategy: `languages` must be an array of strings');
    const translatedTestCases = [];
    const totalOperations = testCases.length * languages.length;
    let progressBar;
    if (logger_1.default.level !== 'debug') {
        progressBar = new cli_progress_1.SingleBar({
            format: 'Generating Multilingual {bar} {percentage}% | ETA: {eta}s | {value}/{total}',
            hideCursor: true,
        }, cli_progress_1.Presets.shades_classic);
        progressBar.start(totalOperations, 0);
    }
    let testCaseCount = 0;
    for (const testCase of testCases) {
        (0, invariant_1.default)(testCase.vars, `Multilingual: testCase.vars is required, but got ${JSON.stringify(testCase)}`);
        const originalText = String(testCase.vars[injectVar]);
        for (const lang of languages) {
            testCaseCount++;
            const translatedText = await translate(originalText, lang);
            if (!translatedText) {
                logger_1.default.debug(`[translate] Failed to translate to ${lang}, skipping ${testCase} #${testCaseCount}`);
                continue;
            }
            translatedTestCases.push({
                ...testCase,
                assert: testCase.assert?.map((assertion) => ({
                    ...assertion,
                    metric: assertion.type?.startsWith('promptfoo:redteam:')
                        ? `${assertion.type?.split(':').pop() || assertion.metric}/Multilingual-${lang.toUpperCase()}`
                        : assertion.metric,
                })),
                vars: {
                    ...testCase.vars,
                    [injectVar]: translatedText,
                },
                metadata: {
                    ...testCase.metadata,
                    strategyId: 'multilingual',
                },
            });
            if (progressBar) {
                progressBar.increment(1);
            }
            else {
                logger_1.default.debug(`Translated to ${lang}: ${translatedTestCases.length} of ${totalOperations}`);
            }
        }
    }
    if (progressBar) {
        progressBar.stop();
    }
    return translatedTestCases;
}
//# sourceMappingURL=multilingual.js.map